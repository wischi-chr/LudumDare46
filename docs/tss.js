/**
 * @compiler H5 0.0.34002
 */
H5.assemblyVersion("tss","2022.11.34246.0");
H5.assembly("tss", function ($asm, globals) {
    "use strict";

    H5.define("tss.arX", {
        statics: {
            methods: {
                /**
                 * Depending upon the use case, the code may be clearer if this extension method or used or it may be clearer to rely upon and explicit or implicit cast from array to ReadOnlyArray
                 *
                 * @static
                 * @public
                 * @this tss.arX
                 * @memberof tss.arX
                 * @param   {Function}     T         
                 * @param   {Array.<T>}    source
                 * @return  {tss.ROA}
                 */
                AsReadOnlyArray: function (T, source) {
                    return tss.ROA(T).op_Implicit(source);
                }
            }
        }
    });

    H5.define("tss.att", {
        fields: {
            _data: null,
            ClassName: null,
            Id: null,
            Title: null,
            OnElementCreate: null,
            Styles: null,
            Href: null,
            Src: null,
            Rel: null,
            Target: null,
            Text: null,
            Type: null,
            Disabled: null,
            Value: null,
            DefaultValue: null,
            Placeholder: null,
            Alt: null,
            Role: null
        },
        props: {
            Data: {
                get: function () {
                    return this._data.AsReadOnly();
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this._data = new (System.Collections.Generic.List$1(System.ValueTuple$2(System.String,System.String))).ctor();
            }
        },
        methods: {
            InitElement: function (element) {
                var $t;
                if (!System.String.isNullOrEmpty(this.Text)) {
                    var lines = System.String.split(System.String.replaceAll(System.String.replaceAll(this.Text, "\r\n", "\n"), String.fromCharCode(13), String.fromCharCode(10)), [10].map(function (i) {{ return String.fromCharCode(i); }}));
                    for (var i = 0; i < lines.length; i = (i + 1) | 0) {
                        if (i > 0) {
                            element.appendChild(document.createElement("br"));
                        }
                        element.appendChild(document.createTextNode(lines[System.Array.index(i, lines)]));
                    }
                }

                if (!System.String.isNullOrEmpty(this.Id)) {
                    element.id = this.Id;
                }
                if (!System.String.isNullOrEmpty(this.ClassName)) {
                    element.className = this.ClassName;
                }
                if (!System.String.isNullOrEmpty(this.Title)) {
                    element.title = this.Title;
                }
                if (!System.String.isNullOrEmpty(this.Alt)) {
                    element.setAttribute("alt", this.Role);
                }
                if (!System.String.isNullOrEmpty(this.Role)) {
                    element.setAttribute("role", this.Role);
                }
                $t = H5.getEnumerator(this._data);
                try {
                    while ($t.moveNext()) {
                        var _d1 = $t.Current.$clone();
                        var attributeName = { };
                        var attributeValue = { };
                        H5.Deconstruct(_d1.$clone(), attributeName, attributeValue);
                        element.setAttribute(System.String.format("data-{0}", [attributeName.v]), attributeValue.v);
                    }
                } finally {
                    if (H5.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                !H5.staticEquals(this.Styles, null) ? this.Styles(element.style) : null;
                !H5.staticEquals(this.OnElementCreate, null) ? this.OnElementCreate(element) : null;
            },
            InitAnchorElement: function (element) {
                this.InitElement(element);

                if (!System.String.isNullOrEmpty(this.Href)) {
                    element.href = this.Href;
                }
                if (!System.String.isNullOrEmpty(this.Rel)) {
                    element.rel = this.Rel;
                }
                if (!System.String.isNullOrEmpty(this.Target)) {
                    element.target = this.Target;
                }
                if (!System.String.isNullOrEmpty(this.Type)) {
                    element.type = this.Type;
                }
            },
            InitButtonElement: function (element) {
                this.InitElement(element);
                if (!System.String.isNullOrEmpty(this.Type)) {
                    element.type = this.Type;
                }
            },
            InitImageElement: function (element) {
                this.InitElement(element);
                if (!System.String.isNullOrEmpty(this.Src)) {
                    element.src = this.Src;
                }
            },
            InitInputElement: function (element) {
                this.InitElement(element);
                if (!System.String.isNullOrEmpty(this.Placeholder)) {
                    element.placeholder = this.Placeholder;
                }
                if (!System.String.isNullOrEmpty(this.DefaultValue)) {
                    element.defaultValue = this.DefaultValue;
                }
                if (System.Nullable.hasValue(this.Disabled)) {
                    element.disabled = System.Nullable.getValue(this.Disabled);
                }
                if (!System.String.isNullOrEmpty(this.Value)) {
                    element.value = this.Value;
                }
                if (!System.String.isNullOrEmpty(this.Type)) {
                    element.type = this.Type;
                }
            },
            InitIFrameElement: function (element) {
                this.InitElement(element);
                if (!System.String.isNullOrEmpty(this.Src)) {
                    element.src = this.Src;
                }
            },
            InitOptionElement: function (element) {
                this.InitElement(element);
                if (System.Nullable.hasValue(this.Disabled)) {
                    element.disabled = System.Nullable.getValue(this.Disabled);
                }
                if (!System.String.isNullOrEmpty(this.Value)) {
                    element.value = this.Value;
                }
            },
            InitTextAreaElement: function (element) {
                this.InitElement(element);
                if (!System.String.isNullOrEmpty(this.Placeholder)) {
                    element.placeholder = this.Placeholder;
                }
                if (!System.String.isNullOrEmpty(this.DefaultValue)) {
                    element.defaultValue = this.DefaultValue;
                }
                if (System.Nullable.hasValue(this.Disabled)) {
                    element.disabled = System.Nullable.getValue(this.Disabled);
                }
                if (!System.String.isNullOrEmpty(this.Value)) {
                    element.value = this.Value;
                }
            },
            WithAlt: function (alt) {
                if (System.String.isNullOrWhiteSpace(alt)) {
                    throw new System.ArgumentException.$ctor1("alt");
                }

                this.Alt = alt;

                return this;
            },
            WithRole: function (role) {
                if (System.String.isNullOrWhiteSpace(role)) {
                    throw new System.ArgumentException.$ctor1("role");
                }

                this.Role = role;

                return this;
            },
            WithData: function (attributeName, attributeValue) {
                if (System.String.isNullOrWhiteSpace(attributeName)) {
                    throw new System.ArgumentException.$ctor1("attributeName");
                }

                if (System.String.isNullOrWhiteSpace(attributeValue)) {
                    throw new System.ArgumentException.$ctor1(attributeValue);
                }

                this._data.add(new (System.ValueTuple$2(System.String,System.String)).$ctor1(attributeName, attributeValue));

                return this;
            }
        }
    });

    H5.define("tss.IHBG", {
        $kind: "interface"
    });

    H5.definei("tss.ICBT", function (TChild) { return {
        inherits: [tss.IC],
        $kind: "interface"
    }; });

    H5.define("tss.ICW", {
        $kind: "interface"
    });

    H5.define("tss.IHFG", {
        $kind: "interface"
    });

    H5.define("tss.ITF", {
        $kind: "interface"
    });

    H5.define("tss.IHMP", {
        $kind: "interface"
    });

    H5.definei("tss.IObservableComponent", function (T) { return {
        $kind: "interface"
    }; });

    H5.define("tss.ChoiceGroup.ChoiceGroupOrientation", {
        $kind: "nested enum",
        statics: {
            fields: {
                Vertical: 0,
                Horizontal: 1
            }
        }
    });

    H5.define("tss.Clipboard", {
        statics: {
            methods: {
                Copy: function (valueToCopy, showMessage, customMessage) {
                    var $t;
                    if (showMessage === void 0) { showMessage = true; }
                    if (customMessage === void 0) { customMessage = null; }
                    if (H5.is(navigator.clipboard, System.Object)) {
                        navigator.clipboard.writeText(valueToCopy);
                    } else {
                        var ta = tss.UI.TextBox(tss.UI._());
                        ta.style.opacity = "0";
                        ta.style.position = "absolute";
                        document.body.appendChild(ta);

                        try {
                            var curEl = document.activeElement;
                            ta.value = valueToCopy;
                            ta.select();
                            document.execCommand("copy");

                            if (curEl != null) {
                                curEl.focus();
                            }
                        } finally {
                            document.body.removeChild(ta);
                        }
                    }

                    if (showMessage) {
                        tss.UI.Toast().Success$1("", ($t = customMessage, $t != null ? $t : System.String.format("\ud83d\udccb Copied\n{0}", [valueToCopy])));
                    }
                }
            }
        }
    });

    H5.define("tss.Color", {
        statics: {
            methods: {
                FromArgb: function (r, g, b) {
                    var $t;
                    return ($t = new tss.Color(), $t.A = 255, $t.R = r, $t.G = g, $t.B = b, $t);
                },
                FromArgb$1: function (a, r, g, b) {
                    var $t;
                    return ($t = new tss.Color(), $t.A = a, $t.R = r, $t.G = g, $t.B = b, $t);
                },
                EvalVar: function (variableName) {
                    if (System.String.startsWith(variableName, "var(")) {
                        variableName = variableName.substr(4, ((variableName.length - 5) | 0));
                    }
                    var color = window.getComputedStyle(document.body).getPropertyValue(variableName);
                    return color;
                },
                FromString: function (hexString) {
                    var r = 0, g = 0, b = 0;

                    if (System.String.contains(hexString,"rgb(")) {
                        hexString = System.String.replaceAll(System.String.replaceAll(System.String.replaceAll(System.String.replaceAll(hexString, "rgb", ""), " ", ""), "(", ""), ")", "");
                        var parts = System.String.split(hexString, System.Array.init([44], System.Char).map(function (i) {{ return String.fromCharCode(i); }}));
                        r = System.Byte.parse(parts[System.Array.index(0, parts)]);
                        g = System.Byte.parse(parts[System.Array.index(1, parts)]);
                        b = System.Byte.parse(parts[System.Array.index(2, parts)]);
                        return tss.Color.FromArgb$1(255, r, g, b);
                    } else if (System.String.contains(hexString,"rgba(")) {
                        hexString = System.String.replaceAll(System.String.replaceAll(System.String.replaceAll(System.String.replaceAll(hexString, "rgba", ""), " ", ""), "(", ""), ")", "");
                        var parts1 = System.String.split(hexString, System.Array.init([44], System.Char).map(function (i) {{ return String.fromCharCode(i); }}));
                        r = System.Byte.parse(parts1[System.Array.index(0, parts1)]);
                        g = System.Byte.parse(parts1[System.Array.index(1, parts1)]);
                        b = System.Byte.parse(parts1[System.Array.index(2, parts1)]);
                        var a = System.Single.parse(parts1[System.Array.index(3, parts1)]);
                        return tss.Color.FromArgb$1(H5.Int.clipu8(a * 255), r, g, b);
                    }

                    var hex = System.String.trimStart(hexString, [35]);

                    if (hex.length === 3) {
                        hex = (hex.substr(0, 1) || "") + (hex.substr(0, 1) || "") + (hex.substr(1, 1) || "") + (hex.substr(1, 1) || "") + (hex.substr(2, 1) || "") + (hex.substr(2, 1) || "");
                    }

                    if (hex.length !== 6) {
                        throw new System.ArgumentException.ctor();
                    }


                    var bigint = parseInt(hex, 16); var r = (bigint >> 16) & 255; var g = (bigint >> 8) & 255; var b = bigint & 255;

                    return tss.Color.FromArgb$1(255, r, g, b);





                }
            }
        },
        fields: {
            A: 0,
            B: 0,
            R: 0,
            G: 0,
            Hex: null
        },
        methods: {
            GetHue: function () {
                if (this.R === this.G && this.G === this.B) {
                    return 0;
                }

                var r = this.R / 255.0;
                var g = this.G / 255.0;
                var b = this.B / 255.0;

                var max, min;
                var delta;
                var hue = 0.0;

                max = r;
                min = r;

                if (g > max) {
                    max = g;
                }
                if (b > max) {
                    max = b;
                }

                if (g < min) {
                    min = g;
                }
                if (b < min) {
                    min = b;
                }

                delta = max - min;

                if (r === max) {
                    hue = (g - b) / delta;
                } else if (g === max) {
                    hue = 2 + (b - r) / delta;
                } else if (b === max) {
                    hue = 4 + (r - g) / delta;
                }
                hue *= 60;

                if (hue < 0.0) {
                    hue += 360.0;
                }
                return hue;
            },
            GetBrightness: function () {
                var r = this.R / 255.0;
                var g = this.G / 255.0;
                var b = this.B / 255.0;

                var max, min;

                max = r;
                min = r;

                if (g > max) {
                    max = g;
                }
                if (b > max) {
                    max = b;
                }

                if (g < min) {
                    min = g;
                }
                if (b < min) {
                    min = b;
                }

                return (max + min) / 2;
            },
            GetSaturation: function () {
                var r = this.R / 255.0;
                var g = this.G / 255.0;
                var b = this.B / 255.0;

                var max, min;
                var l, s = 0;

                max = r;
                min = r;

                if (g > max) {
                    max = g;
                }
                if (b > max) {
                    max = b;
                }

                if (g < min) {
                    min = g;
                }
                if (b < min) {
                    min = b;
                }

                if (max !== min) {
                    l = (max + min) / 2;

                    if (l <= 0.5) {
                        s = (max - min) / (max + min);
                    } else {
                        s = (max - min) / (2 - max - min);
                    }
                }
                return s;
            },
            ToHex: function () {
                if (this.Hex == null) {
                    this.Hex = System.String.format("#{0:X2}{1:X2}{2:X2}", H5.box(this.R, System.Byte), H5.box(this.G, System.Byte), H5.box(this.B, System.Byte));
                }
                return this.Hex;
            },
            ToRGB: function () {
                return System.String.format("rgb({0:#0.##}, {1:#0.##}, {2:#0.##})", H5.box(this.R, System.Byte), H5.box(this.G, System.Byte), H5.box(this.B, System.Byte));
            },
            ToRGBvar: function () {
                return System.String.format("{0:#0.##}, {1:#0.##}, {2:#0.##}", H5.box(this.R, System.Byte), H5.box(this.G, System.Byte), H5.box(this.B, System.Byte));
            },
            ToRGBA: function (opacity) {
                return System.String.format("rgba({0:#0.##}, {1:#0.##}, {2:#0.##}, {3:#0.##})", H5.box(this.R, System.Byte), H5.box(this.G, System.Byte), H5.box(this.B, System.Byte), H5.box(opacity, System.Single, System.Single.format, System.Single.getHashCode));
            },
            ToRGBAvar: function (opacity) {
                return System.String.format("{0:#0.##}, {1:#0.##}, {2:#0.##}, {3:#0.##}", H5.box(this.R, System.Byte), H5.box(this.G, System.Byte), H5.box(this.B, System.Byte), H5.box(opacity, System.Single, System.Single.format, System.Single.getHashCode));
            }
        }
    });

    H5.define("tss.ITAB", {
        $kind: "interface"
    });

    H5.definei("tss.IOBS", function (T) { return {
        $kind: "interface"
    }; });

    H5.define("tss.ComponentCacheBase", function (TComponent) { return {
        fields: {
            _componentsAndKeys: null
        },
        props: {
            ComponentsCount: {
                get: function () {
                    return this._componentsAndKeys.Count;
                }
            },
            HasComponents: {
                get: function () {
                    return System.Linq.Enumerable.from(this._componentsAndKeys, System.ValueTuple$2(System.Int32,TComponent)).any();
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this._componentsAndKeys = new (System.Collections.Generic.List$1(System.ValueTuple$2(System.Int32,TComponent))).ctor();
            }
        },
        methods: {
            AddToComponents: function (components) {
                var $t;
                var componentsCount = this.ComponentsCount;

                var componentsToAdd = System.Linq.Enumerable.from(components, TComponent).select(function (component, index) {
                        return { component: component, key: ((((index + componentsCount) | 0) + 1) | 0) };
                    });

                $t = H5.getEnumerator(componentsToAdd);
                try {
                    while ($t.moveNext()) {
                        var componentToAdd = $t.Current;
                        this._componentsAndKeys.add(new (System.ValueTuple$2(System.Int32,TComponent)).$ctor1(componentToAdd.key, componentToAdd.component));
                    }
                } finally {
                    if (H5.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            }
        }
    }; });

    H5.define("tss.ContextMenu.ItemType", {
        $kind: "nested enum",
        statics: {
            fields: {
                "tss-contextmenu-item": "tss-contextmenu-item",
                "tss-contextmenu-header": "tss-contextmenu-header",
                "tss-contextmenu-divider": "tss-contextmenu-divider"
            }
        },
        $utype: System.String
    });

    H5.define("tss.ContextMenu.Point2D", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new tss.ContextMenu.Point2D(); }
            }
        },
        fields: {
            x: 0,
            y: 0
        },
        ctors: {
            $ctor1: function (x, y) {
                this.$initialize();
                this.x = x;
                this.y = y;

            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = H5.addHash([1856872900, this.x, this.y]);
                return h;
            },
            equals: function (o) {
                if (!H5.is(o, tss.ContextMenu.Point2D)) {
                    return false;
                }
                return H5.equals(this.x, o.x) && H5.equals(this.y, o.y);
            },
            $clone: function (to) {
                var s = to || new tss.ContextMenu.Point2D();
                s.x = this.x;
                s.y = this.y;
                return s;
            }
        }
    });

    H5.define("tss.IDetailsListItem", {
        $kind: "interface"
    });

    H5.define("tss.ISCS", {
        $kind: "interface"
    });

    H5.define("tss.Dialog", {
        statics: {
            fields: {
                RNG: null
            },
            ctors: {
                init: function () {
                    this.RNG = new System.Random.ctor();
                }
            }
        },
        fields: {
            _modal: null,
            _scope: null
        },
        props: {
            IsDraggable: {
                get: function () {
                    return this._modal.IsDraggable;
                },
                set: function (value) {
                    this._modal.IsDraggable = value;
                }
            },
            IsDark: {
                get: function () {
                    return this._modal.IsDark;
                },
                set: function (value) {
                    this._modal.IsDark = value;
                }
            }
        },
        ctors: {
            ctor: function (content, title, centerContent) {
                if (content === void 0) { content = null; }
                if (title === void 0) { title = null; }
                if (centerContent === void 0) { centerContent = true; }

                this.$initialize();
                this._modal = tss.UI.Modal$1().HideCloseButton().NoLightDismiss().Blocking();

                if (centerContent) {
                    this._modal.CenterContent();
                    var tb;
                    if (((tb = H5.as(title, tss.txt))) != null) {
                        tss.ITFX.TextCenter(tss.txt, tb);
                    }
                }

                this._modal.SetHeader(title);
                this._modal.Content = content;
                this._modal.StylingContainer.classList.add("tss-dialog");

                this._scope = System.String.format("dialog-{0}", [H5.box(tss.Dialog.RNG.Next(), System.Int32)]);

                this._modal.OnShow(H5.fn.bind(this, function (_) {
                    tss.Hotkeys.SetScope(this._scope);
                }));
                this._modal.OnHide(H5.fn.bind(this, function (_) {
                    tss.Hotkeys.DeleteScope(this._scope);
                }));
            }
        },
        methods: {
            Title: function (title) {
                this._modal.SetHeader(title);
                return this;
            },
            Content: function (content) {
                tss.LayerExtensions.Content(tss.Modal, this._modal, content);
                return this;
            },
            Commands: function (content) {
                if (content === void 0) { content = []; }
                content.reverse();
                this._modal.SetFooter(tss.ICTX.Children$6(tss.S, tss.UI.Stack().HorizontalReverse(), content));
                return this;
            },
            Dark: function () {
                this.IsDark = true;
                return this;
            },
            MinHeight: function (unitSize) {
                tss.ICX.MinHeight(tss.Modal, this._modal, unitSize);
                return this;
            },
            Height: function (unitSize) {
                tss.ICX.Height(tss.Modal, this._modal, unitSize);
                return this;
            },
            Ok: function (onOk, btnOk) {
                if (btnOk === void 0) { btnOk = null; }
                var acted = false;
                this._modal.LightDismiss().SetFooter(tss.ICTX.Children$6(tss.S, tss.UI.Stack().HorizontalReverse(), [this.CreateButton("Ok", onOk, "Esc, Escape, Enter", btnOk, true, function () {
                    acted = true;
                })])).OnHide(function (_) {
                    if (!acted) {
                        onOk();
                    }
                }).Show();
            },
            OkCancel: function (onOk, onCancel, btnOk, btnCancel) {
                if (onOk === void 0) { onOk = null; }
                if (onCancel === void 0) { onCancel = null; }
                if (btnOk === void 0) { btnOk = null; }
                if (btnCancel === void 0) { btnCancel = null; }
                var acted = false;

                this._modal.SetFooter(tss.ICTX.Children$6(tss.S, tss.UI.Stack().HorizontalReverse(), [this.CreateButton("Cancel", onCancel, "Esc, Escape", btnCancel, false, function () {
                    acted = true;
                }), this.CreateButton("Ok", onOk, "Enter", btnOk, true, function () {
                    acted = true;
                })])).OnHide(function (_) {
                    if (!acted) {
                        onCancel();
                    }
                }).Show();
            },
            YesNo: function (onYes, onNo, btnYes, btnNo) {
                if (onYes === void 0) { onYes = null; }
                if (onNo === void 0) { onNo = null; }
                if (btnYes === void 0) { btnYes = null; }
                if (btnNo === void 0) { btnNo = null; }
                var acted = false;

                this._modal.SetFooter(tss.ICTX.Children$6(tss.S, tss.UI.Stack().HorizontalReverse(), [this.CreateButton("No", onNo, "Esc, Escape", btnNo, false, function () {
                    acted = true;
                }), this.CreateButton("Yes", onYes, "Enter", btnYes, true, function () {
                    acted = true;
                })])).OnHide(function (_) {
                    if (!acted) {
                        onNo();
                    }
                }).Show();
            },
            YesNoCancel: function (onYes, onNo, onCancel, btnYes, btnNo, btnCancel) {
                if (onYes === void 0) { onYes = null; }
                if (onNo === void 0) { onNo = null; }
                if (onCancel === void 0) { onCancel = null; }
                if (btnYes === void 0) { btnYes = null; }
                if (btnNo === void 0) { btnNo = null; }
                if (btnCancel === void 0) { btnCancel = null; }
                var acted = false;

                this._modal.SetFooter(tss.ICTX.Children$6(tss.S, tss.UI.Stack().HorizontalReverse(), [this.CreateButton("Cancel", onCancel, "Esc, Escape", btnCancel, false, function () {
                    acted = true;
                }), this.CreateButton("No", onNo, null, btnNo, false, function () {
                    acted = true;
                }), this.CreateButton("Yes", onYes, "Enter", btnYes, true, function () {
                    acted = true;
                })])).OnHide(function (_) {
                    if (!acted) {
                        onCancel();
                    }
                }).Show();
            },
            RetryCancel: function (onRetry, onCancel, btnRetry, btnCancel) {
                if (onRetry === void 0) { onRetry = null; }
                if (onCancel === void 0) { onCancel = null; }
                if (btnRetry === void 0) { btnRetry = null; }
                if (btnCancel === void 0) { btnCancel = null; }
                var acted = false;

                this._modal.SetFooter(tss.ICTX.Children$6(tss.S, tss.UI.Stack().HorizontalReverse(), [this.CreateButton("Cancel", onCancel, "Esc, Escape", btnCancel, false, function () {
                    acted = true;
                }), this.CreateButton("Retry", onRetry, "Enter", btnRetry, true, function () {
                    acted = true;
                })])).OnHide(function (_) {
                    if (!acted) {
                        onCancel();
                    }
                }).Show();
            },
            Show: function () {
                this._modal.Show();
            },
            Hide: function (onHidden) {
                if (onHidden === void 0) { onHidden = null; }
                this._modal.Hide(onHidden);
            },
            Draggable: function () {
                this.IsDraggable = true;
                return this;
            },
            OkAsync: function (btnOk) {
                if (btnOk === void 0) { btnOk = null; }
                var tcs = new System.Threading.Tasks.TaskCompletionSource();
                this.Ok(function () {
                    tcs.setResult(tss.Dialog.Response.Ok);
                }, btnOk);
                return tcs.task;
            },
            OkCancelAsync: function (btnOk, btnCancel) {
                if (btnOk === void 0) { btnOk = null; }
                if (btnCancel === void 0) { btnCancel = null; }
                var tcs = new System.Threading.Tasks.TaskCompletionSource();
                this.OkCancel(function () {
                    tcs.setResult(tss.Dialog.Response.Ok);
                }, function () {
                    tcs.setResult(tss.Dialog.Response.Cancel);
                }, btnOk, btnCancel);
                return tcs.task;
            },
            YesNoAsync: function (btnYes, btnNo) {
                if (btnYes === void 0) { btnYes = null; }
                if (btnNo === void 0) { btnNo = null; }
                var tcs = new System.Threading.Tasks.TaskCompletionSource();
                this.YesNo(function () {
                    tcs.setResult(tss.Dialog.Response.Yes);
                }, function () {
                    tcs.setResult(tss.Dialog.Response.No);
                }, btnYes, btnNo);
                return tcs.task;
            },
            YesNoCancelAsync: function (btnYes, btnNo, btnCancel) {
                if (btnYes === void 0) { btnYes = null; }
                if (btnNo === void 0) { btnNo = null; }
                if (btnCancel === void 0) { btnCancel = null; }
                var tcs = new System.Threading.Tasks.TaskCompletionSource();
                this.YesNoCancel(function () {
                    tcs.setResult(tss.Dialog.Response.Yes);
                }, function () {
                    tcs.setResult(tss.Dialog.Response.No);
                }, function () {
                    tcs.setResult(tss.Dialog.Response.Cancel);
                }, btnYes, btnNo, btnCancel);
                return tcs.task;
            },
            RetryCancelAsync: function (btnRetry, btnCancel) {
                if (btnRetry === void 0) { btnRetry = null; }
                if (btnCancel === void 0) { btnCancel = null; }
                var tcs = new System.Threading.Tasks.TaskCompletionSource();
                this.RetryCancel(function () {
                    tcs.setResult(tss.Dialog.Response.Retry);
                }, function () {
                    tcs.setResult(tss.Dialog.Response.Cancel);
                }, btnRetry, btnCancel);
                return tcs.task;
            },
            CreateButton: function (text, onClick, bindToKeys, modifier, isPrimary, onActed) {
                var button = tss.ICX.AlignEnd(tss.Button, tss.UI.Button$1(text)).OnClick(H5.fn.bind(this, function (_, __) {
                    onActed();
                    this._modal.Hide();
                    !H5.staticEquals(onClick, null) ? onClick() : null;
                }));

                if (isPrimary) {
                    button.Primary();
                }

                if (H5.is(modifier, System.Object)) {
                    button = modifier(button);
                }

                if (!System.String.isNullOrWhiteSpace(bindToKeys)) {
                    tss.Hotkeys.Bind(bindToKeys, { scope: this._scope }, H5.fn.bind(this, function (e, _) {
                        tss.UI.StopEvent(e);
                        onActed();
                        this._modal.Hide();
                        !H5.staticEquals(onClick, null) ? onClick() : null;
                    }));
                }

                return button;
            }
        }
    });

    H5.define("tss.Dialog.Response", {
        $kind: "nested enum",
        statics: {
            fields: {
                Yes: 0,
                No: 1,
                Cancel: 2,
                Ok: 3,
                Retry: 4
            }
        }
    });

    /** @namespace System */

    /**
     * @memberof System
     * @callback System.Action
     * @return  {void}
     */

    H5.define("tss.domObs", {
        statics: {
            fields: {
                _elementsToTrackMountingOf: null,
                _elementsToTrackRemovalOf: null
            },
            ctors: {
                ctor: function () {
                    tss.domObs._elementsToTrackMountingOf = new (System.Collections.Generic.List$1(tss.domObs.ElementAndCallback)).ctor();
                    tss.domObs._elementsToTrackRemovalOf = new (System.Collections.Generic.List$1(tss.domObs.ElementAndCallback)).ctor();

                    var observer = new (MutationObserver)(function (mutationRecords, _) {
                        tss.domObs.CheckMounted(mutationRecords);
                        tss.domObs.CheckUnmounted(mutationRecords);
                    });

                    observer.observe(document.body, { childList: true, subtree: true });
                }
            },
            methods: {
                CleanUnusedReferences: function () {
                    tss.domObs._elementsToTrackMountingOf.RemoveAll(function (e) {
                        return e.ElementOrNullIfCollected == null;
                    });
                    tss.domObs._elementsToTrackRemovalOf.RemoveAll(function (e) {
                        return e.ElementOrNullIfCollected == null;
                    });
                },
                CheckMounted: function (mutationRecords) {
                    var $t, $t1, $t2;
                    if (tss.domObs._elementsToTrackMountingOf.Count === 0) {
                        return;
                    }

                    var elementsMountedThatWeCareAbout = new (System.Collections.Generic.List$1(tss.domObs.ElementAndCallback)).ctor();

                    $t = H5.getEnumerator(mutationRecords);
                    try {
                        while ($t.moveNext()) {
                            var mutationRecord = $t.Current;
                            $t1 = H5.getEnumerator(mutationRecord.addedNodes, Node);
                            try {
                                while ($t1.moveNext()) {
                                    var mountedElement = $t1.Current;
                                    $t2 = H5.getEnumerator(tss.domObs._elementsToTrackMountingOf);
                                    try {
                                        while ($t2.moveNext()) {
                                            var elementToTrackMountingOf = $t2.Current;
                                            var element = elementToTrackMountingOf.ElementOrNullIfCollected;

                                            if (H5.is(element, System.Object) && tss.UI.IsEqualToOrIsChildOf(element, mountedElement)) {
                                                elementsMountedThatWeCareAbout.add(elementToTrackMountingOf);
                                            }
                                        }
                                    } finally {
                                        if (H5.is($t2, System.IDisposable)) {
                                            $t2.System$IDisposable$Dispose();
                                        }
                                    }
                                }
                            } finally {
                                if (H5.is($t1, System.IDisposable)) {
                                    $t1.System$IDisposable$Dispose();
                                }
                            }
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    if (elementsMountedThatWeCareAbout.Count === 0) {
                        return;
                    }

                    tss.domObs._elementsToTrackMountingOf = System.Linq.Enumerable.from(tss.domObs._elementsToTrackMountingOf, tss.domObs.ElementAndCallback).except(elementsMountedThatWeCareAbout).where(function (e) {
                        return H5.is(e.ElementOrNullIfCollected, System.Object) && H5.is(e.CallbackOrNullIfCollected, System.Object);
                    }).toList(tss.domObs.ElementAndCallback);

                    window.requestAnimationFrame(function (_) {
                        var $t3, $t4;
                        $t3 = H5.getEnumerator(elementsMountedThatWeCareAbout);
                        try {
                            while ($t3.moveNext()) {
                                var entry = $t3.Current;
                                var element1 = entry.ElementOrNullIfCollected;

                                if (H5.is(element1, System.Object)) {
                                    if (!tss.UI.IsMounted(element1)) {
                                        continue;
                                    }

                                    !H5.staticEquals(($t4 = entry.CallbackOrNullIfCollected), null) ? $t4() : null;
                                }
                            }
                        } finally {
                            if (H5.is($t3, System.IDisposable)) {
                                $t3.System$IDisposable$Dispose();
                            }
                        }
                    });
                },
                CheckUnmounted: function (mutationRecords) {
                    var $t, $t1, $t2;
                    if (tss.domObs._elementsToTrackRemovalOf.Count === 0) {
                        return;
                    }

                    var elementsRemovedThatWeCareAbout = new (System.Collections.Generic.List$1(tss.domObs.ElementAndCallback)).ctor();
                    $t = H5.getEnumerator(mutationRecords);
                    try {
                        while ($t.moveNext()) {
                            var mutationRecord = $t.Current;
                            $t1 = H5.getEnumerator(mutationRecord.removedNodes, Node);
                            try {
                                while ($t1.moveNext()) {
                                    var removedElement = $t1.Current;

                                    var highestAncestorElementIfAny = removedElement.parentElement;

                                    while ((highestAncestorElementIfAny != null ? highestAncestorElementIfAny.parentElement : null) != null) {
                                        highestAncestorElementIfAny = highestAncestorElementIfAny.parentElement;
                                    }

                                    if ((highestAncestorElementIfAny != null) && System.String.equals(highestAncestorElementIfAny.tagName, "HTML", 5)) {
                                        continue;
                                    }

                                    $t2 = H5.getEnumerator(tss.domObs._elementsToTrackRemovalOf);
                                    try {
                                        while ($t2.moveNext()) {
                                            var elementToTrackRemovalOf = $t2.Current;
                                            var element = elementToTrackRemovalOf.ElementOrNullIfCollected;

                                            if (H5.is(element, System.Object) && tss.UI.IsEqualToOrIsChildOf(element, removedElement)) {
                                                elementsRemovedThatWeCareAbout.add(elementToTrackRemovalOf);
                                            }
                                        }
                                    } finally {
                                        if (H5.is($t2, System.IDisposable)) {
                                            $t2.System$IDisposable$Dispose();
                                        }
                                    }
                                }
                            } finally {
                                if (H5.is($t1, System.IDisposable)) {
                                    $t1.System$IDisposable$Dispose();
                                }
                            }
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    if (elementsRemovedThatWeCareAbout.Count === 0) {
                        return;
                    }

                    tss.domObs._elementsToTrackRemovalOf = System.Linq.Enumerable.from(tss.domObs._elementsToTrackRemovalOf, tss.domObs.ElementAndCallback).except(elementsRemovedThatWeCareAbout).where(function (e) {
                        return H5.is(e.ElementOrNullIfCollected, System.Object) && H5.is(e.CallbackOrNullIfCollected, System.Object);
                    }).toList(tss.domObs.ElementAndCallback);

                    window.requestAnimationFrame(function (_) {
                        var $t3, $t4;
                        $t3 = H5.getEnumerator(elementsRemovedThatWeCareAbout);
                        try {
                            while ($t3.moveNext()) {
                                var entry = $t3.Current;
                                var element1 = entry.ElementOrNullIfCollected;

                                if (H5.is(element1, System.Object)) {
                                    if (tss.UI.IsMounted(element1)) {
                                        continue;
                                    }

                                    !H5.staticEquals(($t4 = entry.CallbackOrNullIfCollected), null) ? $t4() : null;
                                }
                            }
                        } finally {
                            if (H5.is($t3, System.IDisposable)) {
                                $t3.System$IDisposable$Dispose();
                            }
                        }
                    });
                },
                /**
                 * Some rendering libraries don't support rendering to a container until that container is mounted but the way that we commonly write components is to return an element that the caller will
                 mount, which is a problem for componentizing those libraries. One workaround is to postpone the initialization until the element is mounted, which is made possible by this method. It
                 will execute the specified action when the element is added to the document body. While there is at least one element being tracked in this manner, there is a marginal cost as all
                 DOM manipulations will be tracked and any added elements will be checked (and all of their child elements checked) to see if they match one of the elements that we're interested
                 in. The cost should be negligible but if there is a process that is going to make large and frequent updates to the DOM then it may be better to avoid having any elements in
                 the notify-when-mounted list.
                 *
                 * @static
                 * @public
                 * @this tss.domObs
                 * @memberof tss.domObs
                 * @param   {H5.Core..HTMLElement}    element     
                 * @param   {System.Action}           callback
                 * @return  {void}
                 */
                WhenMounted: function (element, callback) {
                    if (element == null) {
                        throw new System.ArgumentNullException.$ctor1("element");
                    }
                    if (H5.staticEquals(callback, null)) {
                        throw new System.ArgumentNullException.$ctor1("callback");
                    }

                    if (tss.UI.IsMounted(element)) {
                        callback();
                    } else {
                        tss.domObs._elementsToTrackMountingOf.add(new tss.domObs.ElementAndCallback(element, callback));
                    }
                },
                /**
                 * When there is some relating tidying up that must be done when a component is removed from the DOM, this method may be used to enable that - it will execute the specified action when
                 the element is removed. While there is at least one element being tracked in this manner, there is a marginal cost as all DOM manipulations will be tracked and any removed elements
                 will be checked (and all of their child elements checked) to see if they match one of the elements that we're interested in. The cost should be negligible but if there is a process
                 that is going to make large and frequent updates to the DOM then it may be better to avoid having any elements in the notify-when-removed list.
                 *
                 * @static
                 * @public
                 * @this tss.domObs
                 * @memberof tss.domObs
                 * @param   {H5.Core..HTMLElement}    element     
                 * @param   {System.Action}           callback
                 * @return  {void}
                 */
                WhenRemoved: function (element, callback) {
                    if (element == null) {
                        throw new System.ArgumentNullException.$ctor1("element");
                    }
                    if (H5.staticEquals(callback, null)) {
                        throw new System.ArgumentNullException.$ctor1("callback");
                    }

                    tss.domObs._elementsToTrackRemovalOf.add(new tss.domObs.ElementAndCallback(element, callback));
                }
            }
        }
    });

    H5.define("tss.domObs.ElementAndCallback", {
        $kind: "nested class",
        statics: {
            fields: {
                _weakrefAvailable: null,
                _count: 0
            },
            methods: {
                IsAvailable: function () {
                    if (System.Nullable.hasValue(tss.domObs.ElementAndCallback._weakrefAvailable)) {
                        return System.Nullable.getValue(tss.domObs.ElementAndCallback._weakrefAvailable);
                    }

                    try {
let ref = new WeakRef(                        H5.unbox({ }));
                        tss.domObs.ElementAndCallback._weakrefAvailable = true;
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        tss.domObs.ElementAndCallback._weakrefAvailable = false;
                    }

                    return System.Nullable.getValue(tss.domObs.ElementAndCallback._weakrefAvailable);
                }
            }
        },
        props: {
            ElementOrNullIfCollected: {
                get: function () {
                    return this.dereference();
                }
            },
            CallbackOrNullIfCollected: {
                get: function () {
                    return this.dereferenceCallback();
                }
            }
        },
        ctors: {
            ctor: function (element, callback) {
                this.$initialize();
                if (tss.domObs.ElementAndCallback.IsAvailable()) {
                    tss.domObs.ElementAndCallback._count = (tss.domObs.ElementAndCallback._count + 1) | 0;
                    if (tss.domObs.ElementAndCallback._count < 0) {
                        tss.domObs.ElementAndCallback._count = 0;
                    }
                    element['callbackRefN' + tss.domObs.ElementAndCallback._count] = callback;
                    this.ref = new WeakRef(element);
                    this.callbackref = new WeakRef(callback);
                } else {
                    this.ref = element;
                    this.callbackref = callback;
                }
            }
        },
        methods: {
            dereference: function () {
                if (tss.domObs.ElementAndCallback.IsAvailable()) {
                    return this.ref.deref();
                } else {
                    return this.ref;
                }
            },
            dereferenceCallback: function () {
                if (tss.domObs.ElementAndCallback.IsAvailable()) {
                    return this.callbackref.deref();
                } else {
                    return this.callbackref;
                }
            }
        }
    });

    H5.definei("tss.IObservableListComponent", function (T) { return {
        $kind: "interface"
    }; });

    H5.define("tss.Dropdown.ItemType", {
        $kind: "nested enum",
        statics: {
            fields: {
                "tss-contextmenu-item": "tss-contextmenu-item",
                "tss-contextmenu-header": "tss-contextmenu-header",
                "tss-contextmenu-divider": "tss-contextmenu-divider"
            }
        },
        $utype: System.String
    });

    H5.define("tss.Dropdown.SelectMode", {
        $kind: "nested enum",
        statics: {
            fields: {
                Single: 0,
                Multi: 1
            }
        }
    });

    H5.define("Tesserae.Emoji", {
        $kind: "enum",
        statics: {
            fields: {
                "ec-100": 0,
                "ec-1234": 1,
                "ec-grinning": 2,
                "ec-grimacing": 3,
                "ec-grin": 4,
                "ec-joy": 5,
                "ec-rofl": 6,
                "ec-partying": 7,
                "ec-smiley": 8,
                "ec-smile": 9,
                "ec-sweat-smile": 10,
                "ec-laughing": 11,
                "ec-innocent": 12,
                "ec-wink": 13,
                "ec-blush": 14,
                "ec-slightly-smiling-face": 15,
                "ec-upside-down-face": 16,
                "ec-yum": 17,
                "ec-relieved": 18,
                "ec-heart-eyes": 19,
                "ec-smiling-face-with-three-hearts": 20,
                "ec-kissing-heart": 21,
                "ec-kissing": 22,
                "ec-kissing-smiling-eyes": 23,
                "ec-kissing-closed-eyes": 24,
                "ec-stuck-out-tongue-winking-eye": 25,
                "ec-zany": 26,
                "ec-raised-eyebrow": 27,
                "ec-monocle": 28,
                "ec-stuck-out-tongue-closed-eyes": 29,
                "ec-stuck-out-tongue": 30,
                "ec-money-mouth-face": 31,
                "ec-nerd-face": 32,
                "ec-sunglasses": 33,
                "ec-star-struck": 34,
                "ec-clown-face": 35,
                "ec-cowboy-hat-face": 36,
                "ec-hugs": 37,
                "ec-smirk": 38,
                "ec-no-mouth": 39,
                "ec-neutral-face": 40,
                "ec-expressionless": 41,
                "ec-unamused": 42,
                "ec-roll-eyes": 43,
                "ec-thinking": 44,
                "ec-lying-face": 45,
                "ec-hand-over-mouth": 46,
                "ec-shushing": 47,
                "ec-symbols-over-mouth": 48,
                "ec-exploding-head": 49,
                "ec-flushed": 50,
                "ec-disappointed": 51,
                "ec-worried": 52,
                "ec-angry": 53,
                "ec-rage": 54,
                "ec-pensive": 55,
                "ec-confused": 56,
                "ec-slightly-frowning-face": 57,
                "ec-frowning-face": 58,
                "ec-persevere": 59,
                "ec-confounded": 60,
                "ec-tired-face": 61,
                "ec-weary": 62,
                "ec-pleading": 63,
                "ec-triumph": 64,
                "ec-open-mouth": 65,
                "ec-scream": 66,
                "ec-fearful": 67,
                "ec-cold-sweat": 68,
                "ec-hushed": 69,
                "ec-frowning": 70,
                "ec-anguished": 71,
                "ec-cry": 72,
                "ec-disappointed-relieved": 73,
                "ec-drooling-face": 74,
                "ec-sleepy": 75,
                "ec-sweat": 76,
                "ec-hot": 77,
                "ec-cold": 78,
                "ec-sob": 79,
                "ec-dizzy-face": 80,
                "ec-astonished": 81,
                "ec-zipper-mouth-face": 82,
                "ec-nauseated-face": 83,
                "ec-sneezing-face": 84,
                "ec-vomiting": 85,
                "ec-mask": 86,
                "ec-face-with-thermometer": 87,
                "ec-face-with-head-bandage": 88,
                "ec-woozy": 89,
                "ec-sleeping": 90,
                "ec-zzz": 91,
                "ec-poop": 92,
                "ec-smiling-imp": 93,
                "ec-imp": 94,
                "ec-japanese-ogre": 95,
                "ec-japanese-goblin": 96,
                "ec-skull": 97,
                "ec-ghost": 98,
                "ec-alien": 99,
                "ec-robot": 100,
                "ec-smiley-cat": 101,
                "ec-smile-cat": 102,
                "ec-joy-cat": 103,
                "ec-heart-eyes-cat": 104,
                "ec-smirk-cat": 105,
                "ec-kissing-cat": 106,
                "ec-scream-cat": 107,
                "ec-crying-cat-face": 108,
                "ec-pouting-cat": 109,
                "ec-palms-up": 110,
                "ec-raised-hands": 111,
                "ec-clap": 112,
                "ec-wave": 113,
                "ec-call-me-hand": 114,
                "ec-plus1": 115,
                "ec--1": 116,
                "ec-facepunch": 117,
                "ec-fist": 118,
                "ec-fist-left": 119,
                "ec-fist-right": 120,
                "ec-v": 121,
                "ec-ok-hand": 122,
                "ec-raised-hand": 123,
                "ec-raised-back-of-hand": 124,
                "ec-open-hands": 125,
                "ec-muscle": 126,
                "ec-pray": 127,
                "ec-foot": 128,
                "ec-leg": 129,
                "ec-handshake": 130,
                "ec-point-up": 131,
                "ec-point-up-2": 132,
                "ec-point-down": 133,
                "ec-point-left": 134,
                "ec-point-right": 135,
                "ec-fu": 136,
                "ec-raised-hand-with-fingers-splayed": 137,
                "ec-love-you": 138,
                "ec-metal": 139,
                "ec-crossed-fingers": 140,
                "ec-vulcan-salute": 141,
                "ec-writing-hand": 142,
                "ec-selfie": 143,
                "ec-nail-care": 144,
                "ec-lips": 145,
                "ec-tooth": 146,
                "ec-tongue": 147,
                "ec-ear": 148,
                "ec-nose": 149,
                "ec-eye": 150,
                "ec-eyes": 151,
                "ec-brain": 152,
                "ec-bust-in-silhouette": 153,
                "ec-busts-in-silhouette": 154,
                "ec-speaking-head": 155,
                "ec-baby": 156,
                "ec-child": 157,
                "ec-boy": 158,
                "ec-girl": 159,
                "ec-adult": 160,
                "ec-man": 161,
                "ec-woman": 162,
                "ec-blonde-man": 163,
                "ec-bearded-person": 164,
                "ec-older-adult": 165,
                "ec-older-man": 166,
                "ec-older-woman": 167,
                "ec-man-with-gua-pi-mao": 168,
                "ec-woman-with-headscarf": 169,
                "ec-man-with-turban": 170,
                "ec-policeman": 171,
                "ec-construction-worker-man": 172,
                "ec-guardsman": 173,
                "ec-male-detective": 174,
                "ec-mrs-claus": 175,
                "ec-santa": 176,
                "ec-angel": 177,
                "ec-pregnant-woman": 178,
                "ec-breastfeeding": 179,
                "ec-princess": 180,
                "ec-prince": 181,
                "ec-bride-with-veil": 182,
                "ec-man-in-tuxedo": 183,
                "ec-running-man": 184,
                "ec-walking-man": 185,
                "ec-dancer": 186,
                "ec-man-dancing": 187,
                "ec-dancing-women": 188,
                "ec-couple": 189,
                "ec-two-men-holding-hands": 190,
                "ec-two-women-holding-hands": 191,
                "ec-bowing-man": 192,
                "ec-woman-shrugging": 193,
                "ec-tipping-hand-woman": 194,
                "ec-no-good-woman": 195,
                "ec-ok-woman": 196,
                "ec-raising-hand-woman": 197,
                "ec-pouting-woman": 198,
                "ec-frowning-woman": 199,
                "ec-haircut-woman": 200,
                "ec-massage-woman": 201,
                "ec-couple-with-heart-woman-man": 202,
                "ec-couplekiss-man-woman": 203,
                "ec-family-man-woman-boy": 204,
                "ec-yarn": 205,
                "ec-thread": 206,
                "ec-coat": 207,
                "ec-labcoat": 208,
                "ec-womans-clothes": 209,
                "ec-tshirt": 210,
                "ec-jeans": 211,
                "ec-necktie": 212,
                "ec-dress": 213,
                "ec-bikini": 214,
                "ec-kimono": 215,
                "ec-lipstick": 216,
                "ec-kiss": 217,
                "ec-footprints": 218,
                "ec-flat-shoe": 219,
                "ec-high-heel": 220,
                "ec-sandal": 221,
                "ec-boot": 222,
                "ec-mans-shoe": 223,
                "ec-athletic-shoe": 224,
                "ec-hiking-boot": 225,
                "ec-socks": 226,
                "ec-gloves": 227,
                "ec-scarf": 228,
                "ec-womans-hat": 229,
                "ec-tophat": 230,
                "ec-billed-hat": 231,
                "ec-rescue-worker-helmet": 232,
                "ec-mortar-board": 233,
                "ec-crown": 234,
                "ec-school-satchel": 235,
                "ec-luggage": 236,
                "ec-pouch": 237,
                "ec-purse": 238,
                "ec-handbag": 239,
                "ec-briefcase": 240,
                "ec-eyeglasses": 241,
                "ec-dark-sunglasses": 242,
                "ec-goggles": 243,
                "ec-ring": 244,
                "ec-closed-umbrella": 245,
                "ec-dog": 246,
                "ec-cat": 247,
                "ec-mouse": 248,
                "ec-hamster": 249,
                "ec-rabbit": 250,
                "ec-fox-face": 251,
                "ec-bear": 252,
                "ec-panda-face": 253,
                "ec-koala": 254,
                "ec-tiger": 255,
                "ec-lion": 256,
                "ec-cow": 257,
                "ec-pig": 258,
                "ec-pig-nose": 259,
                "ec-frog": 260,
                "ec-squid": 261,
                "ec-octopus": 262,
                "ec-shrimp": 263,
                "ec-monkey-face": 264,
                "ec-gorilla": 265,
                "ec-see-no-evil": 266,
                "ec-hear-no-evil": 267,
                "ec-speak-no-evil": 268,
                "ec-monkey": 269,
                "ec-chicken": 270,
                "ec-penguin": 271,
                "ec-bird": 272,
                "ec-baby-chick": 273,
                "ec-hatching-chick": 274,
                "ec-hatched-chick": 275,
                "ec-duck": 276,
                "ec-eagle": 277,
                "ec-owl": 278,
                "ec-bat": 279,
                "ec-wolf": 280,
                "ec-boar": 281,
                "ec-horse": 282,
                "ec-unicorn": 283,
                "ec-honeybee": 284,
                "ec-bug": 285,
                "ec-butterfly": 286,
                "ec-snail": 287,
                "ec-beetle": 288,
                "ec-ant": 289,
                "ec-grasshopper": 290,
                "ec-spider": 291,
                "ec-scorpion": 292,
                "ec-crab": 293,
                "ec-snake": 294,
                "ec-lizard": 295,
                "ec-t-rex": 296,
                "ec-sauropod": 297,
                "ec-turtle": 298,
                "ec-tropical-fish": 299,
                "ec-fish": 300,
                "ec-blowfish": 301,
                "ec-dolphin": 302,
                "ec-shark": 303,
                "ec-whale": 304,
                "ec-whale2": 305,
                "ec-crocodile": 306,
                "ec-leopard": 307,
                "ec-zebra": 308,
                "ec-tiger2": 309,
                "ec-water-buffalo": 310,
                "ec-ox": 311,
                "ec-cow2": 312,
                "ec-deer": 313,
                "ec-dromedary-camel": 314,
                "ec-camel": 315,
                "ec-giraffe": 316,
                "ec-elephant": 317,
                "ec-rhinoceros": 318,
                "ec-goat": 319,
                "ec-ram": 320,
                "ec-sheep": 321,
                "ec-racehorse": 322,
                "ec-pig2": 323,
                "ec-rat": 324,
                "ec-mouse2": 325,
                "ec-rooster": 326,
                "ec-turkey": 327,
                "ec-dove": 328,
                "ec-dog2": 329,
                "ec-poodle": 330,
                "ec-cat2": 331,
                "ec-rabbit2": 332,
                "ec-chipmunk": 333,
                "ec-hedgehog": 334,
                "ec-raccoon": 335,
                "ec-llama": 336,
                "ec-hippopotamus": 337,
                "ec-kangaroo": 338,
                "ec-badger": 339,
                "ec-swan": 340,
                "ec-peacock": 341,
                "ec-parrot": 342,
                "ec-lobster": 343,
                "ec-mosquito": 344,
                "ec-paw-prints": 345,
                "ec-dragon": 346,
                "ec-dragon-face": 347,
                "ec-cactus": 348,
                "ec-christmas-tree": 349,
                "ec-evergreen-tree": 350,
                "ec-deciduous-tree": 351,
                "ec-palm-tree": 352,
                "ec-seedling": 353,
                "ec-herb": 354,
                "ec-shamrock": 355,
                "ec-four-leaf-clover": 356,
                "ec-bamboo": 357,
                "ec-tanabata-tree": 358,
                "ec-leaves": 359,
                "ec-fallen-leaf": 360,
                "ec-maple-leaf": 361,
                "ec-ear-of-rice": 362,
                "ec-hibiscus": 363,
                "ec-sunflower": 364,
                "ec-rose": 365,
                "ec-wilted-flower": 366,
                "ec-tulip": 367,
                "ec-blossom": 368,
                "ec-cherry-blossom": 369,
                "ec-bouquet": 370,
                "ec-mushroom": 371,
                "ec-chestnut": 372,
                "ec-jack-o-lantern": 373,
                "ec-shell": 374,
                "ec-spider-web": 375,
                "ec-earth-americas": 376,
                "ec-earth-africa": 377,
                "ec-earth-asia": 378,
                "ec-full-moon": 379,
                "ec-waning-gibbous-moon": 380,
                "ec-last-quarter-moon": 381,
                "ec-waning-crescent-moon": 382,
                "ec-new-moon": 383,
                "ec-waxing-crescent-moon": 384,
                "ec-first-quarter-moon": 385,
                "ec-waxing-gibbous-moon": 386,
                "ec-new-moon-with-face": 387,
                "ec-full-moon-with-face": 388,
                "ec-first-quarter-moon-with-face": 389,
                "ec-last-quarter-moon-with-face": 390,
                "ec-sun-with-face": 391,
                "ec-crescent-moon": 392,
                "ec-star": 393,
                "ec-star2": 394,
                "ec-dizzy": 395,
                "ec-sparkles": 396,
                "ec-comet": 397,
                "ec-sun-behind-small-cloud": 398,
                "ec-partly-sunny": 399,
                "ec-sun-behind-large-cloud": 400,
                "ec-sun-behind-rain-cloud": 401,
                "ec-cloud-with-rain": 402,
                "ec-cloud-with-lightning-and-rain": 403,
                "ec-cloud-with-lightning": 404,
                "ec-zap": 405,
                "ec-fire": 406,
                "ec-boom": 407,
                "ec-cloud-with-snow": 408,
                "ec-snowman": 409,
                "ec-snowman-with-snow": 410,
                "ec-wind-face": 411,
                "ec-dash": 412,
                "ec-tornado": 413,
                "ec-fog": 414,
                "ec-open-umbrella": 415,
                "ec-umbrella": 416,
                "ec-droplet": 417,
                "ec-sweat-drops": 418,
                "ec-ocean": 419,
                "ec-green-apple": 420,
                "ec-apple": 421,
                "ec-pear": 422,
                "ec-tangerine": 423,
                "ec-lemon": 424,
                "ec-banana": 425,
                "ec-watermelon": 426,
                "ec-grapes": 427,
                "ec-strawberry": 428,
                "ec-melon": 429,
                "ec-cherries": 430,
                "ec-peach": 431,
                "ec-pineapple": 432,
                "ec-coconut": 433,
                "ec-kiwi-fruit": 434,
                "ec-mango": 435,
                "ec-avocado": 436,
                "ec-broccoli": 437,
                "ec-tomato": 438,
                "ec-eggplant": 439,
                "ec-cucumber": 440,
                "ec-carrot": 441,
                "ec-hot-pepper": 442,
                "ec-potato": 443,
                "ec-corn": 444,
                "ec-leafy-greens": 445,
                "ec-sweet-potato": 446,
                "ec-peanuts": 447,
                "ec-honey-pot": 448,
                "ec-croissant": 449,
                "ec-bread": 450,
                "ec-baguette-bread": 451,
                "ec-bagel": 452,
                "ec-pretzel": 453,
                "ec-cheese": 454,
                "ec-egg": 455,
                "ec-bacon": 456,
                "ec-steak": 457,
                "ec-pancakes": 458,
                "ec-poultry-leg": 459,
                "ec-meat-on-bone": 460,
                "ec-bone": 461,
                "ec-fried-shrimp": 462,
                "ec-fried-egg": 463,
                "ec-hamburger": 464,
                "ec-fries": 465,
                "ec-stuffed-flatbread": 466,
                "ec-hotdog": 467,
                "ec-pizza": 468,
                "ec-sandwich": 469,
                "ec-canned-food": 470,
                "ec-spaghetti": 471,
                "ec-taco": 472,
                "ec-burrito": 473,
                "ec-green-salad": 474,
                "ec-shallow-pan-of-food": 475,
                "ec-ramen": 476,
                "ec-stew": 477,
                "ec-fish-cake": 478,
                "ec-fortune-cookie": 479,
                "ec-sushi": 480,
                "ec-bento": 481,
                "ec-curry": 482,
                "ec-rice-ball": 483,
                "ec-rice": 484,
                "ec-rice-cracker": 485,
                "ec-oden": 486,
                "ec-dango": 487,
                "ec-shaved-ice": 488,
                "ec-ice-cream": 489,
                "ec-icecream": 490,
                "ec-pie": 491,
                "ec-cake": 492,
                "ec-cupcake": 493,
                "ec-moon-cake": 494,
                "ec-birthday": 495,
                "ec-custard": 496,
                "ec-candy": 497,
                "ec-lollipop": 498,
                "ec-chocolate-bar": 499,
                "ec-popcorn": 500,
                "ec-dumpling": 501,
                "ec-doughnut": 502,
                "ec-cookie": 503,
                "ec-milk-glass": 504,
                "ec-beer": 505,
                "ec-beers": 506,
                "ec-clinking-glasses": 507,
                "ec-wine-glass": 508,
                "ec-tumbler-glass": 509,
                "ec-cocktail": 510,
                "ec-tropical-drink": 511,
                "ec-champagne": 512,
                "ec-sake": 513,
                "ec-tea": 514,
                "ec-cup-with-straw": 515,
                "ec-coffee": 516,
                "ec-baby-bottle": 517,
                "ec-salt": 518,
                "ec-spoon": 519,
                "ec-fork-and-knife": 520,
                "ec-plate-with-cutlery": 521,
                "ec-bowl-with-spoon": 522,
                "ec-takeout-box": 523,
                "ec-chopsticks": 524,
                "ec-soccer": 525,
                "ec-basketball": 526,
                "ec-football": 527,
                "ec-baseball": 528,
                "ec-softball": 529,
                "ec-tennis": 530,
                "ec-volleyball": 531,
                "ec-rugby-football": 532,
                "ec-flying-disc": 533,
                "ec-8ball": 534,
                "ec-golf": 535,
                "ec-golfing-man": 536,
                "ec-ping-pong": 537,
                "ec-badminton": 538,
                "ec-goal-net": 539,
                "ec-ice-hockey": 540,
                "ec-field-hockey": 541,
                "ec-lacrosse": 542,
                "ec-cricket": 543,
                "ec-ski": 544,
                "ec-skier": 545,
                "ec-snowboarder": 546,
                "ec-person-fencing": 547,
                "ec-ice-skate": 548,
                "ec-curling-stone": 549,
                "ec-skateboard": 550,
                "ec-sled": 551,
                "ec-bow-and-arrow": 552,
                "ec-fishing-pole-and-fish": 553,
                "ec-boxing-glove": 554,
                "ec-martial-arts-uniform": 555,
                "ec-rowing-man": 556,
                "ec-swimming-man": 557,
                "ec-surfing-man": 558,
                "ec-bath": 559,
                "ec-basketball-man": 560,
                "ec-weight-lifting-man": 561,
                "ec-biking-man": 562,
                "ec-mountain-biking-man": 563,
                "ec-horse-racing": 564,
                "ec-business-suit-levitating": 565,
                "ec-trophy": 566,
                "ec-running-shirt-with-sash": 567,
                "ec-medal-sports": 568,
                "ec-medal-military": 569,
                "ec-1st-place-medal": 570,
                "ec-2nd-place-medal": 571,
                "ec-3rd-place-medal": 572,
                "ec-reminder-ribbon": 573,
                "ec-rosette": 574,
                "ec-ticket": 575,
                "ec-tickets": 576,
                "ec-performing-arts": 577,
                "ec-art": 578,
                "ec-circus-tent": 579,
                "ec-microphone": 580,
                "ec-headphones": 581,
                "ec-musical-score": 582,
                "ec-musical-keyboard": 583,
                "ec-drum": 584,
                "ec-saxophone": 585,
                "ec-trumpet": 586,
                "ec-guitar": 587,
                "ec-violin": 588,
                "ec-clapper": 589,
                "ec-video-game": 590,
                "ec-space-invader": 591,
                "ec-dart": 592,
                "ec-game-die": 593,
                "ec-chess-pawn": 594,
                "ec-slot-machine": 595,
                "ec-jigsaw": 596,
                "ec-bowling": 597,
                "ec-red-car": 598,
                "ec-taxi": 599,
                "ec-blue-car": 600,
                "ec-bus": 601,
                "ec-trolleybus": 602,
                "ec-racing-car": 603,
                "ec-police-car": 604,
                "ec-ambulance": 605,
                "ec-fire-engine": 606,
                "ec-minibus": 607,
                "ec-truck": 608,
                "ec-articulated-lorry": 609,
                "ec-tractor": 610,
                "ec-kick-scooter": 611,
                "ec-motorcycle": 612,
                "ec-bike": 613,
                "ec-motor-scooter": 614,
                "ec-rotating-light": 615,
                "ec-oncoming-police-car": 616,
                "ec-oncoming-bus": 617,
                "ec-oncoming-automobile": 618,
                "ec-oncoming-taxi": 619,
                "ec-aerial-tramway": 620,
                "ec-mountain-cableway": 621,
                "ec-suspension-railway": 622,
                "ec-railway-car": 623,
                "ec-train": 624,
                "ec-monorail": 625,
                "ec-bullettrain-side": 626,
                "ec-bullettrain-front": 627,
                "ec-light-rail": 628,
                "ec-mountain-railway": 629,
                "ec-steam-locomotive": 630,
                "ec-train2": 631,
                "ec-metro": 632,
                "ec-tram": 633,
                "ec-station": 634,
                "ec-flying-saucer": 635,
                "ec-helicopter": 636,
                "ec-small-airplane": 637,
                "ec-flight-departure": 638,
                "ec-flight-arrival": 639,
                "ec-sailboat": 640,
                "ec-motor-boat": 641,
                "ec-speedboat": 642,
                "ec-ferry": 643,
                "ec-passenger-ship": 644,
                "ec-rocket": 645,
                "ec-artificial-satellite": 646,
                "ec-seat": 647,
                "ec-canoe": 648,
                "ec-anchor": 649,
                "ec-construction": 650,
                "ec-fuelpump": 651,
                "ec-busstop": 652,
                "ec-vertical-traffic-light": 653,
                "ec-traffic-light": 654,
                "ec-checkered-flag": 655,
                "ec-ship": 656,
                "ec-ferris-wheel": 657,
                "ec-roller-coaster": 658,
                "ec-carousel-horse": 659,
                "ec-building-construction": 660,
                "ec-foggy": 661,
                "ec-tokyo-tower": 662,
                "ec-factory": 663,
                "ec-fountain": 664,
                "ec-rice-scene": 665,
                "ec-mountain": 666,
                "ec-mountain-snow": 667,
                "ec-mount-fuji": 668,
                "ec-volcano": 669,
                "ec-japan": 670,
                "ec-camping": 671,
                "ec-tent": 672,
                "ec-national-park": 673,
                "ec-motorway": 674,
                "ec-railway-track": 675,
                "ec-sunrise": 676,
                "ec-sunrise-over-mountains": 677,
                "ec-desert": 678,
                "ec-beach-umbrella": 679,
                "ec-desert-island": 680,
                "ec-city-sunrise": 681,
                "ec-city-sunset": 682,
                "ec-cityscape": 683,
                "ec-night-with-stars": 684,
                "ec-bridge-at-night": 685,
                "ec-milky-way": 686,
                "ec-stars": 687,
                "ec-sparkler": 688,
                "ec-fireworks": 689,
                "ec-rainbow": 690,
                "ec-houses": 691,
                "ec-european-castle": 692,
                "ec-japanese-castle": 693,
                "ec-stadium": 694,
                "ec-statue-of-liberty": 695,
                "ec-house": 696,
                "ec-house-with-garden": 697,
                "ec-derelict-house": 698,
                "ec-office": 699,
                "ec-department-store": 700,
                "ec-post-office": 701,
                "ec-european-post-office": 702,
                "ec-hospital": 703,
                "ec-bank": 704,
                "ec-hotel": 705,
                "ec-convenience-store": 706,
                "ec-school": 707,
                "ec-love-hotel": 708,
                "ec-wedding": 709,
                "ec-classical-building": 710,
                "ec-church": 711,
                "ec-mosque": 712,
                "ec-synagogue": 713,
                "ec-kaaba": 714,
                "ec-shinto-shrine": 715,
                "ec-watch": 716,
                "ec-iphone": 717,
                "ec-calling": 718,
                "ec-computer": 719,
                "ec-keyboard": 720,
                "ec-desktop-computer": 721,
                "ec-printer": 722,
                "ec-computer-mouse": 723,
                "ec-trackball": 724,
                "ec-joystick": 725,
                "ec-clamp": 726,
                "ec-minidisc": 727,
                "ec-floppy-disk": 728,
                "ec-cd": 729,
                "ec-dvd": 730,
                "ec-vhs": 731,
                "ec-camera": 732,
                "ec-camera-flash": 733,
                "ec-video-camera": 734,
                "ec-movie-camera": 735,
                "ec-film-projector": 736,
                "ec-film-strip": 737,
                "ec-telephone-receiver": 738,
                "ec-pager": 739,
                "ec-fax": 740,
                "ec-tv": 741,
                "ec-radio": 742,
                "ec-studio-microphone": 743,
                "ec-level-slider": 744,
                "ec-control-knobs": 745,
                "ec-compass": 746,
                "ec-stopwatch": 747,
                "ec-timer-clock": 748,
                "ec-alarm-clock": 749,
                "ec-mantelpiece-clock": 750,
                "ec-hourglass-flowing-sand": 751,
                "ec-hourglass": 752,
                "ec-satellite": 753,
                "ec-battery": 754,
                "ec-electric-plug": 755,
                "ec-bulb": 756,
                "ec-flashlight": 757,
                "ec-candle": 758,
                "ec-fire-extinguisher": 759,
                "ec-wastebasket": 760,
                "ec-oil-drum": 761,
                "ec-money-with-wings": 762,
                "ec-dollar": 763,
                "ec-yen": 764,
                "ec-euro": 765,
                "ec-pound": 766,
                "ec-moneybag": 767,
                "ec-credit-card": 768,
                "ec-gem": 769,
                "ec-balance-scale": 770,
                "ec-toolbox": 771,
                "ec-wrench": 772,
                "ec-hammer": 773,
                "ec-hammer-and-pick": 774,
                "ec-hammer-and-wrench": 775,
                "ec-pick": 776,
                "ec-nut-and-bolt": 777,
                "ec-gear": 778,
                "ec-brick": 779,
                "ec-chains": 780,
                "ec-magnet": 781,
                "ec-gun": 782,
                "ec-bomb": 783,
                "ec-firecracker": 784,
                "ec-hocho": 785,
                "ec-dagger": 786,
                "ec-crossed-swords": 787,
                "ec-shield": 788,
                "ec-smoking": 789,
                "ec-skull-and-crossbones": 790,
                "ec-coffin": 791,
                "ec-funeral-urn": 792,
                "ec-amphora": 793,
                "ec-crystal-ball": 794,
                "ec-prayer-beads": 795,
                "ec-nazar-amulet": 796,
                "ec-barber": 797,
                "ec-alembic": 798,
                "ec-telescope": 799,
                "ec-microscope": 800,
                "ec-hole": 801,
                "ec-pill": 802,
                "ec-syringe": 803,
                "ec-dna": 804,
                "ec-microbe": 805,
                "ec-petri-dish": 806,
                "ec-test-tube": 807,
                "ec-thermometer": 808,
                "ec-broom": 809,
                "ec-basket": 810,
                "ec-toilet-paper": 811,
                "ec-label": 812,
                "ec-bookmark": 813,
                "ec-toilet": 814,
                "ec-shower": 815,
                "ec-bathtub": 816,
                "ec-soap": 817,
                "ec-sponge": 818,
                "ec-lotion-bottle": 819,
                "ec-key": 820,
                "ec-old-key": 821,
                "ec-couch-and-lamp": 822,
                "ec-sleeping-bed": 823,
                "ec-bed": 824,
                "ec-door": 825,
                "ec-bellhop-bell": 826,
                "ec-teddy-bear": 827,
                "ec-framed-picture": 828,
                "ec-world-map": 829,
                "ec-parasol-on-ground": 830,
                "ec-moyai": 831,
                "ec-shopping": 832,
                "ec-shopping-cart": 833,
                "ec-balloon": 834,
                "ec-flags": 835,
                "ec-ribbon": 836,
                "ec-gift": 837,
                "ec-confetti-ball": 838,
                "ec-tada": 839,
                "ec-dolls": 840,
                "ec-wind-chime": 841,
                "ec-crossed-flags": 842,
                "ec-izakaya-lantern": 843,
                "ec-red-envelope": 844,
                "ec-envelope-with-arrow": 845,
                "ec-incoming-envelope": 846,
                "ec-e-mail": 847,
                "ec-love-letter": 848,
                "ec-postbox": 849,
                "ec-mailbox-closed": 850,
                "ec-mailbox": 851,
                "ec-mailbox-with-mail": 852,
                "ec-mailbox-with-no-mail": 853,
                "ec-package": 854,
                "ec-postal-horn": 855,
                "ec-inbox-tray": 856,
                "ec-outbox-tray": 857,
                "ec-scroll": 858,
                "ec-page-with-curl": 859,
                "ec-bookmark-tabs": 860,
                "ec-receipt": 861,
                "ec-bar-chart": 862,
                "ec-chart-with-upwards-trend": 863,
                "ec-chart-with-downwards-trend": 864,
                "ec-page-facing-up": 865,
                "ec-date": 866,
                "ec-calendar": 867,
                "ec-spiral-calendar": 868,
                "ec-card-index": 869,
                "ec-card-file-box": 870,
                "ec-ballot-box": 871,
                "ec-file-cabinet": 872,
                "ec-clipboard": 873,
                "ec-spiral-notepad": 874,
                "ec-file-folder": 875,
                "ec-open-file-folder": 876,
                "ec-card-index-dividers": 877,
                "ec-newspaper-roll": 878,
                "ec-newspaper": 879,
                "ec-notebook": 880,
                "ec-closed-book": 881,
                "ec-green-book": 882,
                "ec-blue-book": 883,
                "ec-orange-book": 884,
                "ec-notebook-with-decorative-cover": 885,
                "ec-ledger": 886,
                "ec-books": 887,
                "ec-open-book": 888,
                "ec-safety-pin": 889,
                "ec-link": 890,
                "ec-paperclip": 891,
                "ec-paperclips": 892,
                "ec-triangular-ruler": 893,
                "ec-straight-ruler": 894,
                "ec-abacus": 895,
                "ec-pushpin": 896,
                "ec-round-pushpin": 897,
                "ec-triangular-flag-on-post": 898,
                "ec-white-flag": 899,
                "ec-black-flag": 900,
                "ec-closed-lock-with-key": 901,
                "ec-lock": 902,
                "ec-unlock": 903,
                "ec-lock-with-ink-pen": 904,
                "ec-pen": 905,
                "ec-fountain-pen": 906,
                "ec-memo": 907,
                "ec-crayon": 908,
                "ec-paintbrush": 909,
                "ec-mag": 910,
                "ec-mag-right": 911,
                "ec-orange-heart": 912,
                "ec-yellow-heart": 913,
                "ec-green-heart": 914,
                "ec-blue-heart": 915,
                "ec-purple-heart": 916,
                "ec-black-heart": 917,
                "ec-broken-heart": 918,
                "ec-heavy-heart-exclamation": 919,
                "ec-two-hearts": 920,
                "ec-revolving-hearts": 921,
                "ec-heartbeat": 922,
                "ec-heartpulse": 923,
                "ec-sparkling-heart": 924,
                "ec-cupid": 925,
                "ec-gift-heart": 926,
                "ec-heart-decoration": 927,
                "ec-peace-symbol": 928,
                "ec-latin-cross": 929,
                "ec-star-and-crescent": 930,
                "ec-om": 931,
                "ec-wheel-of-dharma": 932,
                "ec-star-of-david": 933,
                "ec-six-pointed-star": 934,
                "ec-menorah": 935,
                "ec-yin-yang": 936,
                "ec-orthodox-cross": 937,
                "ec-place-of-worship": 938,
                "ec-ophiuchus": 939,
                "ec-aries": 940,
                "ec-taurus": 941,
                "ec-gemini": 942,
                "ec-cancer": 943,
                "ec-leo": 944,
                "ec-virgo": 945,
                "ec-libra": 946,
                "ec-scorpius": 947,
                "ec-sagittarius": 948,
                "ec-capricorn": 949,
                "ec-aquarius": 950,
                "ec-pisces": 951,
                "ec-id": 952,
                "ec-atom-symbol": 953,
                "ec-u7a7a": 954,
                "ec-u5272": 955,
                "ec-radioactive": 956,
                "ec-biohazard": 957,
                "ec-mobile-phone-off": 958,
                "ec-vibration-mode": 959,
                "ec-u6709": 960,
                "ec-u7121": 961,
                "ec-u7533": 962,
                "ec-u55b6": 963,
                "ec-vs": 964,
                "ec-accept": 965,
                "ec-white-flower": 966,
                "ec-ideograph-advantage": 967,
                "ec-u5408": 968,
                "ec-u6e80": 969,
                "ec-u7981": 970,
                "ec-ab": 971,
                "ec-cl": 972,
                "ec-sos": 973,
                "ec-no-entry": 974,
                "ec-name-badge": 975,
                "ec-no-entry-sign": 976,
                "ec-x": 977,
                "ec-o": 978,
                "ec-stop-sign": 979,
                "ec-anger": 980,
                "ec-no-pedestrians": 981,
                "ec-do-not-litter": 982,
                "ec-no-bicycles": 983,
                "ec-non-potable-water": 984,
                "ec-underage": 985,
                "ec-no-mobile-phones": 986,
                "ec-exclamation": 987,
                "ec-grey-exclamation": 988,
                "ec-question": 989,
                "ec-grey-question": 990,
                "ec-low-brightness": 991,
                "ec-high-brightness": 992,
                "ec-trident": 993,
                "ec-fleur-de-lis": 994,
                "ec-children-crossing": 995,
                "ec-beginner": 996,
                "ec-u6307": 997,
                "ec-chart": 998,
                "ec-negative-squared-cross-mark": 999,
                "ec-white-check-mark": 1000,
                "ec-diamond-shape-with-a-dot-inside": 1001,
                "ec-cyclone": 1002,
                "ec-loop": 1003,
                "ec-globe-with-meridians": 1004,
                "ec-atm": 1005,
                "ec-passport-control": 1006,
                "ec-customs": 1007,
                "ec-baggage-claim": 1008,
                "ec-left-luggage": 1009,
                "ec-wheelchair": 1010,
                "ec-no-smoking": 1011,
                "ec-wc": 1012,
                "ec-potable-water": 1013,
                "ec-mens": 1014,
                "ec-womens": 1015,
                "ec-baby-symbol": 1016,
                "ec-restroom": 1017,
                "ec-put-litter-in-its-place": 1018,
                "ec-cinema": 1019,
                "ec-signal-strength": 1020,
                "ec-koko": 1021,
                "ec-ng": 1022,
                "ec-ok": 1023,
                "ec-up": 1024,
                "ec-cool": 1025,
                "ec-new": 1026,
                "ec-free": 1027,
                "ec-keycap-ten": 1028,
                "ec-pause-button": 1029,
                "ec-next-track-button": 1030,
                "ec-stop-button": 1031,
                "ec-record-button": 1032,
                "ec-play-or-pause-button": 1033,
                "ec-previous-track-button": 1034,
                "ec-fast-forward": 1035,
                "ec-rewind": 1036,
                "ec-twisted-rightwards-arrows": 1037,
                "ec-repeat": 1038,
                "ec-repeat-one": 1039,
                "ec-arrow-up-small": 1040,
                "ec-arrow-down-small": 1041,
                "ec-arrow-double-up": 1042,
                "ec-arrow-double-down": 1043,
                "ec-arrows-counterclockwise": 1044,
                "ec-abc": 1045,
                "ec-abcd": 1046,
                "ec-capital-abcd": 1047,
                "ec-symbols": 1048,
                "ec-musical-note": 1049,
                "ec-notes": 1050,
                "ec-curly-loop": 1051,
                "ec-arrows-clockwise": 1052,
                "ec-heavy-plus-sign": 1053,
                "ec-heavy-minus-sign": 1054,
                "ec-heavy-division-sign": 1055,
                "ec-infinity": 1056,
                "ec-heavy-dollar-sign": 1057,
                "ec-currency-exchange": 1058,
                "ec-end": 1059,
                "ec-back": 1060,
                "ec-on": 1061,
                "ec-top": 1062,
                "ec-soon": 1063,
                "ec-radio-button": 1064,
                "ec-white-circle": 1065,
                "ec-black-circle": 1066,
                "ec-red-circle": 1067,
                "ec-large-blue-circle": 1068,
                "ec-small-orange-diamond": 1069,
                "ec-small-blue-diamond": 1070,
                "ec-large-orange-diamond": 1071,
                "ec-large-blue-diamond": 1072,
                "ec-small-red-triangle": 1073,
                "ec-black-large-square": 1074,
                "ec-white-large-square": 1075,
                "ec-small-red-triangle-down": 1076,
                "ec-black-medium-small-square": 1077,
                "ec-white-medium-small-square": 1078,
                "ec-black-square-button": 1079,
                "ec-white-square-button": 1080,
                "ec-speaker": 1081,
                "ec-sound": 1082,
                "ec-loud-sound": 1083,
                "ec-mute": 1084,
                "ec-mega": 1085,
                "ec-loudspeaker": 1086,
                "ec-bell": 1087,
                "ec-no-bell": 1088,
                "ec-black-joker": 1089,
                "ec-mahjong": 1090,
                "ec-flower-playing-cards": 1091,
                "ec-thought-balloon": 1092,
                "ec-right-anger-bubble": 1093,
                "ec-speech-balloon": 1094,
                "ec-left-speech-bubble": 1095,
                "ec-clock1": 1096,
                "ec-clock2": 1097,
                "ec-clock3": 1098,
                "ec-clock4": 1099,
                "ec-clock5": 1100,
                "ec-clock6": 1101,
                "ec-clock7": 1102,
                "ec-clock8": 1103,
                "ec-clock9": 1104,
                "ec-clock10": 1105,
                "ec-clock11": 1106,
                "ec-clock12": 1107,
                "ec-clock130": 1108,
                "ec-clock230": 1109,
                "ec-clock330": 1110,
                "ec-clock430": 1111,
                "ec-clock530": 1112,
                "ec-clock630": 1113,
                "ec-clock730": 1114,
                "ec-clock830": 1115,
                "ec-clock930": 1116,
                "ec-clock1030": 1117,
                "ec-clock1130": 1118,
                "ec-clock1230": 1119
            }
        }
    });

    H5.define("tss.eeX", {
        statics: {
            methods: {
                InGroupsOf: function (T, source, groupSize) {
                    return System.Linq.Enumerable.from(source, T).select(function (item, index) {
                            return { Index: index, Item: item };
                        }).groupBy(function (item) {
                        return ((H5.Int.div(item.Index, groupSize)) | 0);
                    }).select(function (groupItem) {
                        return groupItem.select(function (item) {
                            return item.Item;
                        }).toList(T);
                    }).toList(System.Collections.Generic.List$1(T));
                }
            }
        }
    });

    H5.define("tss.Float.Position", {
        $kind: "nested enum",
        statics: {
            fields: {
                "tss-float-topleft": "tss-float-topleft",
                "tss-float-topmiddle": "tss-float-topmiddle",
                "tss-float-topright": "tss-float-topright",
                "tss-float-leftcenter": "tss-float-leftcenter",
                "tss-float-center": "tss-float-center",
                "tss-float-rightcenter": "tss-float-rightcenter",
                "tss-float-bottomleft": "tss-float-bottomleft",
                "tss-float-bottonmiddle": "tss-float-bottonmiddle",
                "tss-float-bottomright": "tss-float-bottomright"
            }
        },
        $utype: System.String
    });

    H5.define("tss.HorizontalSeparator.Align", {
        $kind: "nested enum",
        statics: {
            fields: {
                Left: 0,
                Center: 1,
                Right: 2
            }
        }
    });

    H5.define("tss.Hotkeys", {
        statics: {
            props: {
                Shift: {
                    get: function () {
                        return hotkeys.shift == true;
                    }
                },
                Ctrl: {
                    get: function () {
                        return hotkeys.ctrl == true;
                    }
                },
                Alt: {
                    get: function () {
                        return hotkeys.alt == true;
                    }
                },
                OptionKey: {
                    get: function () {
                        return hotkeys.option == true;
                    }
                },
                Control: {
                    get: function () {
                        return hotkeys.control == true;
                    }
                },
                Cmd: {
                    get: function () {
                        return hotkeys.cmd == true;
                    }
                },
                Command: {
                    get: function () {
                        return hotkeys.command == true;
                    }
                }
            },
            methods: {
                GetScope: function () {
                    return hotkeys.getScope();

                },
                SetScope: function (scope) {
hotkeys.setScope(                    scope);
                },
                DeleteScope: function (scope) {
                    if (H5.rE(tss.Hotkeys.GetScope(), scope)) {
                        tss.Hotkeys.ResetFilter();
                    }
hotkeys.deleteScope(                    scope);
                },
                Bind: function (keys, option, action) {
hotkeys(                    keys,option,action);
                },
                Unbind: function (keys, option, action) {
hotkeys.unbind(                    keys,option,action);
                },
                BindGlobal: function (keys, action) {
hotkeys(                    keys,action);
                },
                UnbindGlobal: function (keys, action) {
hotkeys.unbind(                    keys,action);
                },
                IsPressed$1: function (key) {
                    return hotkeys.isPressed(key);

                },
                IsPressed$2: function (key) {
                    return hotkeys.isPressed(key);

                },
                IsPressed: function (key) {
                    return hotkeys.isPressed(key);

                },
                GetPressedKeyCodes: function () {
                    return hotkeys.getPressedKeyCodes();

                },
                Filter: function (onFilter) {
hotkeys.filter =                     onFilter;
                },
                ResetFilter: function () {
                    tss.Hotkeys.Filter(function (e) {
                        var el = (H5.is(e.target, System.Object) ? e.target : e.srcElement);
                        return !(el.isContentEditable || H5.rE(el.tagName, "INPUT") || H5.rE(el.tagName, "SELECT") || H5.rE(el.tagName, "TEXTAREA"));
                    });
                }
            }
        }
    });

    H5.define("tss.HSLColor", {
        statics: {
            fields: {
                _scale: 0,
                _scaleHue: 0,
                _rng: null
            },
            ctors: {
                init: function () {
                    this._scale = 240.0;
                    this._scaleHue = 360.0;
                    this._rng = new System.Random.ctor();
                }
            },
            methods: {
                CheckRange: function (value) {
                    if (value < 0.0) {
                        value = 0.0;
                    } else {
                        if (value > 1.0) {
                            value = 1.0;
                        }
                    }
                    return value;
                },
                Random: function () {
                    return new tss.HSLColor.$ctor1(tss.HSLColor._rng.NextDouble() * tss.HSLColor._scaleHue, tss.HSLColor._rng.NextDouble() * tss.HSLColor._scale, 120.0);
                },
                GetColorComponent: function (temp1, temp2, temp3) {
                    temp3 = tss.HSLColor.MoveIntoRange(temp3);
                    if (temp3 < 0.16666666666666666) {
                        return temp1 + (temp2 - temp1) * 6.0 * temp3;
                    } else {
                        if (temp3 < 0.5) {
                            return temp2;
                        } else {
                            if (temp3 < 0.6666666666666666) {
                                return temp1 + ((temp2 - temp1) * ((0.6666666666666666) - temp3) * 6.0);
                            } else {
                                return temp1;
                            }
                        }
                    }
                },
                MoveIntoRange: function (temp3) {
                    if (temp3 < 0.0) {
                        temp3 += 1.0;
                    } else {
                        if (temp3 > 1.0) {
                            temp3 -= 1.0;
                        }
                    }
                    return temp3;
                },
                GetTemp2: function (hslColor) {
                    var temp2;
                    if (hslColor._luminosity < 0.5) {
                        temp2 = hslColor._luminosity * (1.0 + hslColor._saturation);
                    } else {
                        temp2 = hslColor._luminosity + hslColor._saturation - (hslColor._luminosity * hslColor._saturation);
                    }
                    return temp2;
                },
                op_Implicit: function (hslColor) {
                    var r = 0, g = 0, b = 0;
                    if (hslColor._luminosity !== 0) {
                        if (hslColor._saturation === 0) {
                            r = (g = (b = hslColor._luminosity));
                        } else {
                            var temp2 = tss.HSLColor.GetTemp2(hslColor);
                            var temp1 = 2.0 * hslColor._luminosity - temp2;

                            r = tss.HSLColor.GetColorComponent(temp1, temp2, hslColor._hue + 0.3333333333333333);
                            g = tss.HSLColor.GetColorComponent(temp1, temp2, hslColor._hue);
                            b = tss.HSLColor.GetColorComponent(temp1, temp2, hslColor._hue - 0.3333333333333333);
                        }
                    }
                    return tss.Color.FromArgb(H5.Int.clipu8(255 * r), H5.Int.clipu8(255 * g), H5.Int.clipu8(255 * b));
                },
                op_Implicit$1: function (color) {
                    var $t;
                    return ($t = new tss.HSLColor.ctor(), $t._hue = color.GetHue() / tss.HSLColor._scaleHue, $t._luminosity = color.GetBrightness(), $t._saturation = color.GetSaturation(), $t);
                }
            }
        },
        fields: {
            _hue: 0,
            _saturation: 0,
            _luminosity: 0
        },
        props: {
            Hue: {
                get: function () {
                    return this._hue * tss.HSLColor._scaleHue;
                },
                set: function (value) {
                    this._hue = tss.HSLColor.CheckRange(value / tss.HSLColor._scaleHue);
                }
            },
            Saturation: {
                get: function () {
                    return this._saturation * tss.HSLColor._scale;
                },
                set: function (value) {
                    this._saturation = tss.HSLColor.CheckRange(value / tss.HSLColor._scale);
                }
            },
            Luminosity: {
                get: function () {
                    return this._luminosity * tss.HSLColor._scale;
                },
                set: function (value) {
                    this._luminosity = tss.HSLColor.CheckRange(value / tss.HSLColor._scale);
                }
            }
        },
        ctors: {
            init: function () {
                this._hue = 1.0;
                this._saturation = 1.0;
                this._luminosity = 1.0;
            },
            ctor: function () {
                this.$initialize();
            },
            $ctor2: function (color) {
                this.$initialize();
                this._hue = color.GetHue() / tss.HSLColor._scaleHue;
                this._luminosity = color.GetBrightness();
                this._saturation = color.GetSaturation();
            },
            $ctor1: function (hue, saturation, luminosity) {
                this.$initialize();
                this.Hue = hue;
                this.Saturation = saturation;
                this.Luminosity = luminosity;
            }
        },
        methods: {
            toString: function () {
                return System.String.format("H: {0:#0.##} S: {1:#0.##} L: {2:#0.##}", H5.box(this.Hue, System.Double, System.Double.format, System.Double.getHashCode), H5.box(this.Saturation, System.Double, System.Double.format, System.Double.getHashCode), H5.box(this.Luminosity, System.Double, System.Double.format, System.Double.getHashCode));
            },
            ToRGB: function () {
                return tss.HSLColor.op_Implicit(this).ToRGB();
            },
            ToRGBA: function (opacity) {
                return tss.HSLColor.op_Implicit(this).ToRGBA(opacity);
            },
            ToRGBvar: function () {
                return tss.HSLColor.op_Implicit(this).ToRGBvar();
            },
            ToRGBAvar: function (opacity) {
                return tss.HSLColor.op_Implicit(this).ToRGBAvar(opacity);
            },
            ToHex: function () {
                var c = tss.HSLColor.op_Implicit(this);
                return System.String.format("#{0:X2}{1:X2}{2:X2}", H5.box(c.R, System.Byte), H5.box(c.G, System.Byte), H5.box(c.B, System.Byte));
            },
            SetRGB: function (red, green, blue) {
                var hslColor = tss.HSLColor.op_Implicit$1(tss.Color.FromArgb(red, green, blue));
                this._hue = hslColor._hue;
                this._saturation = hslColor._saturation;
                this._luminosity = hslColor._luminosity;
            }
        }
    });

    H5.define("tss.ICVX", {
        statics: {
            methods: {
                Error: function (T, component, error) {
                    component.tss$ICV$Error = error;
                    return component;
                },
                IsInvalid: function (T, component, isInvalid) {
                    if (isInvalid === void 0) { isInvalid = true; }
                    component.tss$ICV$IsInvalid = isInvalid;
                    return component;
                }
            }
        }
    });

    H5.define("tss.ICX", {
        statics: {
            methods: {
                WhenMounted: function (T, component, callback) {
                    tss.domObs.WhenMounted(component.tss$IC$Render(), callback);
                    return component;
                },
                WhenMountedDelayed: function (T, component, delay, callback, onlyIfStillMounted) {
                    if (onlyIfStillMounted === void 0) { onlyIfStillMounted = true; }
                    tss.domObs.WhenMounted(component.tss$IC$Render(), function () {
                        window.setTimeout(function (_) {
                            if (tss.UI.IsMounted$1(component)) {
                                callback();
                            }
                        }, delay.getTotalMilliseconds());
                    });
                    return component;
                },
                WhenRemoved: function (T, component, callback) {
                    tss.domObs.WhenRemoved(component.tss$IC$Render(), callback);
                    return component;
                },
                AlignAuto: function (T, component) {
                    tss.S.SetAlign(component, "auto");
                    return component;
                },
                AlignStretch: function (T, component) {
                    tss.S.SetAlign(component, "stretch");
                    return component;
                },
                AlignBaseline: function (T, component) {
                    tss.S.SetAlign(component, "baseline");
                    return component;
                },
                AlignStart: function (T, component) {
                    tss.S.SetAlign(component, "flex-start");
                    return component;
                },
                AlignCenter: function (T, component) {
                    tss.S.SetAlign(component, "center");
                    return component;
                },
                AlignEnd: function (T, component) {
                    tss.S.SetAlign(component, "flex-end");
                    return component;
                },
                Margin: function (T, component, unitSize) {
                    tss.S.SetMarginLeft(component, unitSize);
                    tss.S.SetMarginRight(component, unitSize);
                    tss.S.SetMarginTop(component, unitSize);
                    tss.S.SetMarginBottom(component, unitSize);
                    return component;
                },
                MarginLeft: function (T, component, unitSize) {
                    tss.S.SetMarginLeft(component, unitSize);
                    return component;
                },
                MarginRight: function (T, component, unitSize) {
                    tss.S.SetMarginRight(component, unitSize);
                    return component;
                },
                MarginTop: function (T, component, unitSize) {
                    tss.S.SetMarginTop(component, unitSize);
                    return component;
                },
                MarginBottom: function (T, component, unitSize) {
                    tss.S.SetMarginBottom(component, unitSize);
                    return component;
                },
                Padding: function (T, component, unitSize) {
                    tss.S.SetPaddingLeft(component, unitSize);
                    tss.S.SetPaddingRight(component, unitSize);
                    tss.S.SetPaddingTop(component, unitSize);
                    tss.S.SetPaddingBottom(component, unitSize);
                    return component;
                },
                PaddingLeft: function (T, component, unitSize) {
                    tss.S.SetPaddingLeft(component, unitSize);
                    return component;
                },
                PaddingRight: function (T, component, unitSize) {
                    tss.S.SetPaddingRight(component, unitSize);
                    return component;
                },
                PaddingTop: function (T, component, unitSize) {
                    tss.S.SetPaddingTop(component, unitSize);
                    return component;
                },
                PaddingBottom: function (T, component, unitSize) {
                    tss.S.SetPaddingBottom(component, unitSize);
                    return component;
                },
                WidthAuto: function (T, component) {
                    tss.S.SetWidth(component, tss.us.Auto());
                    return component;
                },
                Width: function (T, component, unitSize) {
                    tss.S.SetWidth(component, unitSize);
                    return component;
                },
                MinWidth: function (T, component, unitSize) {
                    tss.S.SetMinWidth(component, unitSize);
                    return component;
                },
                MaxWidth: function (T, component, unitSize) {
                    tss.S.SetMaxWidth(component, unitSize);
                    return component;
                },
                WidthStretch: function (T, component) {
                    tss.S.SetWidth(component, tss.usX.percent$1(100));
                    return component;
                },
                HeightAuto: function (T, component) {
                    tss.S.SetHeight(component, tss.us.Auto());
                    return component;
                },
                Height: function (T, component, unitSize) {
                    tss.S.SetHeight(component, unitSize);
                    return component;
                },
                MinHeight: function (T, component, unitSize) {
                    tss.S.SetMinHeight(component, unitSize);
                    return component;
                },
                MaxHeight: function (T, component, unitSize) {
                    tss.S.SetMaxHeight(component, unitSize);
                    return component;
                },
                HeightStretch: function (T, component) {
                    tss.S.SetHeight(component, tss.usX.percent$1(100));
                    return component;
                },
                MinHeightStretch: function (T, component) {
                    tss.S.SetMinHeight(component, tss.usX.percent$1(100));
                    return component;
                },
                Stretch: function (T, component) {
                    tss.S.SetWidth(component, tss.usX.percent$1(100));
                    tss.S.SetHeight(component, tss.usX.percent$1(100));
                    return component;
                },
                Grow: function (T, component, grow) {
                    if (grow === void 0) { grow = 1; }
                    tss.S.SetGrow(component, grow);
                    return component;
                },
                Shrink: function (T, component) {
                    tss.S.SetShrink(component, true);
                    return component;
                },
                NoShrink: function (T, component) {
                    tss.S.SetShrink(component, false);
                    return component;
                },
                GridColumn: function (T, component, start, end) {
                    tss.Grid.SetGridColumn(component, start, end);
                    return component;
                },
                GridColumnStretch: function (T, component) {
                    tss.Grid.SetGridColumn(component, 1, -1);
                    return component;
                },
                GridRow: function (T, component, start, end) {
                    tss.Grid.SetGridRow(component, start, end);
                    return component;
                },
                GridRowStretch: function (T, component) {
                    tss.Grid.SetGridRow(component, 1, -1);
                    return component;
                },
                Collapse: function (T, component) {
                    var el = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), el);
                    el.v = tss.ICX.TryGetParentStackItem(el.v);
                    el.v.classList.add("tss-collapse");
                    return component;
                },
                FadeThenCollapse: function (T, component) {
                    return tss.ICX.Fade$1(T, component, function () {
                        var $s = 0,
                            $t1, 
                            $jff, 
                            $tcs = new H5.TCS(), 
                            $rv, 
                            $ae, 
                            $ab = H5.fn.bind(this, function () {
                                try {
                                    for (;;) {
                                        $s = H5.STEP([0,1], $s);
                                        switch ($s) {
                                            case 0: {
                                                $t1 = System.Threading.Tasks.Task.delay(1000);
                                                $s = 1;
                                                if ($t1.isC()) {
                                                    continue;
                                                }
                                                $t1.c($ab);
                                                return;
                                            }
                                            case 1: {
                                                $t1.gAR();
                                                tss.ICX.Collapse(T, component);
                                                $tcs.sR(null);
                                                return;
                                            }
                                            default: {
                                                $tcs.sR(null);
                                                return;
                                            }
                                        }
                                    }
                                } catch($ae1) {
                                    $ae = System.Exception.create($ae1);
                                    $tcs.sE($ae);
                                }
                            }, arguments);

                        $ab();
                        return $tcs.task;
                    });
                },
                Fade$2: function (T, component) {
                    return tss.ICX.Fade(T, component, function () { });
                },
                Fade$1: function (T, component, andThen) {
                    if (andThen === void 0) { andThen = null; }
                    return tss.ICX.Fade(T, component, H5.is(andThen, System.Object) ? function () {
                        tss.tX.fireAndForget(andThen());
                    } : null);
                },
                Fade: function (T, component, andThen) {
                    if (andThen === void 0) { andThen = null; }
                    var el = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), el);
                    el.v = tss.ICX.TryGetParentStackItem(el.v);
                    el.v.classList.add("tss-fade");
                    el.v.classList.remove("tss-fade-light", "tss-show");
                    component.tss$IC$Render().classList.remove("tss-fade-light", "tss-show");
                    if (H5.is(andThen, System.Object)) {
                        setTimeout(function (_) {
                            andThen();
                        }, 150);
                    }
                    return component;
                },
                LightFade$2: function (T, component) {
                    return tss.ICX.LightFade(T, component, function () { });
                },
                LightFade$1: function (T, component, andThen) {
                    if (andThen === void 0) { andThen = null; }
                    return tss.ICX.LightFade(T, component, H5.is(andThen, System.Object) ? function () {
                        tss.tX.fireAndForget(andThen());
                    } : null);
                },
                LightFade: function (T, component, andThen) {
                    if (andThen === void 0) { andThen = null; }
                    var el = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), el);
                    el.v = tss.ICX.TryGetParentStackItem(el.v);
                    el.v.classList.add("tss-fade-light");
                    el.v.classList.remove("tss-fade", "tss-show");
                    component.tss$IC$Render().classList.remove("tss-fade", "tss-show");
                    if (H5.is(andThen, System.Object)) {
                        setTimeout(function (_) {
                            andThen();
                        }, 150);
                    }
                    return component;
                },
                Show: function (T, component) {
                    var el = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), el);
                    el.v = tss.ICX.TryGetParentStackItem(el.v);
                    el.v.classList.add("tss-fade", "tss-show");
                    el.v.classList.remove("tss-fade-light", "tss-collapse");
                    component.tss$IC$Render().classList.remove("tss-fade-light", "tss-collapse", "tss-fade");
                    return component;
                },
                TryGetParentStackItem: function (el) {
                    if (H5.is(el.parentElement, System.Object) && el.parentElement.classList.contains("tss-stack-item")) {
                        return el.parentElement;
                    }
                    return el;
                },
                Tooltip$1: function (T, component, tooltipHtml, animation, placement, delayShow, delayHide, followCursor, maxWidth, arrow) {
                    if (animation === void 0) { animation = "none"; }
                    if (placement === void 0) { placement = "top"; }
                    if (delayShow === void 0) { delayShow = 0; }
                    if (delayHide === void 0) { delayHide = 0; }
                    if (followCursor === void 0) { followCursor = false; }
                    if (maxWidth === void 0) { maxWidth = 350; }
                    if (arrow === void 0) { arrow = false; }
                    if (System.String.isNullOrWhiteSpace(tooltipHtml)) {
                        return component;
                    }

                    return tss.ICX.Tooltip(T, component, new tss.Raw.ctor(tss.UI.Raw(tooltipHtml)), false, animation, placement, delayShow, delayHide, true, followCursor, maxWidth, true, arrow);
                },
                Tooltip: function (T, component, tooltip, interactive, animation, placement, delayShow, delayHide, appendToBody, followCursor, maxWidth, hideOnClick, arrow) {
                    if (interactive === void 0) { interactive = false; }
                    if (animation === void 0) { animation = "none"; }
                    if (placement === void 0) { placement = "top"; }
                    if (delayShow === void 0) { delayShow = 0; }
                    if (delayHide === void 0) { delayHide = 0; }
                    if (appendToBody === void 0) { appendToBody = true; }
                    if (followCursor === void 0) { followCursor = false; }
                    if (maxWidth === void 0) { maxWidth = 350; }
                    if (hideOnClick === void 0) { hideOnClick = true; }
                    if (arrow === void 0) { arrow = false; }
                    var AttachTooltip = null;
                    if (tooltip == null) {
                        return component;
                    }

                    var rendered = component.tss$IC$Render();

                    var marker = { };

                    (rendered).tooltipMarker = H5.unbox(marker);
                    AttachTooltip = function (e) {
                        rendered.onmouseenter = H5.fn.remove(rendered.onmouseenter, AttachTooltip);
                        if (!H5.rE((rendered).tooltipMarker, marker)) {
                            return;
                        }
                        var renderedTooltip = tss.UI.DIV([tooltip.tss$IC$Render()]);
                        renderedTooltip.style.display = "block";
                        renderedTooltip.style.overflow = "hidden";
                        renderedTooltip.style.textOverflow = "ellipsis";
                        document.body.appendChild(renderedTooltip);
                        var element = { };
                        H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), element);
                        if (element.v.hasOwnProperty("_tippy")) {
                            element.v._tippy.destroy();
                        }

                        if (animation === "none") {
tippy(                            element.v, { content: renderedTooltip, interactive: interactive, placement: System.Enum.toString(tss.TooltipPlacement, placement), delay: [delayShow,delayHide], appendTo: H5.unbox(appendToBody ? document.body : "parent"), followCursor: followCursor, maxWidth: maxWidth, hideOnClick:hideOnClick, arrow: arrow });
                        } else {
tippy(                            element.v, { content: renderedTooltip, interactive: interactive, placement: System.Enum.toString(tss.TooltipPlacement, placement),  animation: System.Enum.toString(tss.TooltipAnimation, animation), delay: [delayShow,delayHide], appendTo: H5.unbox(appendToBody ? document.body : "parent"), followCursor: followCursor, maxWidth: maxWidth, hideOnClick: hideOnClick, arrow: arrow });
                        }

                        element.v._tippy.show();
                        var currentTippy = element.v._tippy;
                        tss.ICX.WhenRemoved(T, component, function () {
                            if (element.v.hasOwnProperty("_tippy")) {
                                if (H5.rE(currentTippy, element.v._tippy)) {
                                    element.v._tippy.destroy();
                                }
                            }
                        });
                    };

                    rendered.onmouseenter = H5.fn.combine(rendered.onmouseenter, AttachTooltip);


                    return component;
                },
                RemoveTooltip: function (T, component) {
                    var element = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), element);
                    if (element.v.hasOwnProperty("_tippy")) {
                        element.v._tippy.destroy();
                    }

                    var rendered = component.tss$IC$Render();
                    rendered.onmouseenter = null;

                    return component;
                },
                TabIndex: function (T, component, tabIndex) {
                    var hasTabIndex;
                    if (((hasTabIndex = H5.as(component, tss.ITAB))) != null) {
                        hasTabIndex.tss$ITAB$TabIndex = tabIndex;
                        return component;
                    } else {
                        var rendered = component.tss$IC$Render();
                        rendered.tabIndex = tabIndex;
                        return component;
                    }
                },
                SkipTab: function (T, component) {
                    return tss.ICX.TabIndex(T, component, -1);
                },
                /**
                 * Width
                 *
                 * @static
                 * @public
                 * @this tss.ICX
                 * @memberof tss.ICX
                 * @param   {Function}    T            
                 * @param   {T}           component    
                 * @param   {tss.us}      unitSize
                 * @return  {T}
                 */
                W$1: function (T, component, unitSize) {
                    return tss.ICX.Width(T, component, unitSize);
                },
                /**
                 * Width
                 *
                 * @static
                 * @public
                 * @this tss.ICX
                 * @memberof tss.ICX
                 * @param   {Function}    T            
                 * @param   {T}           component    
                 * @param   {number}      pixels
                 * @return  {T}
                 */
                W: function (T, component, pixels) {
                    return tss.ICX.Width(T, component, tss.usX.px$1(pixels));
                },
                /**
                 * Height
                 *
                 * @static
                 * @public
                 * @this tss.ICX
                 * @memberof tss.ICX
                 * @param   {Function}    T            
                 * @param   {T}           component    
                 * @param   {tss.us}      unitSize
                 * @return  {T}
                 */
                H$1: function (T, component, unitSize) {
                    return tss.ICX.Height(T, component, unitSize);
                },
                /**
                 * Height
                 *
                 * @static
                 * @public
                 * @this tss.ICX
                 * @memberof tss.ICX
                 * @param   {Function}    T            
                 * @param   {T}           component    
                 * @param   {number}      pixels
                 * @return  {T}
                 */
                H: function (T, component, pixels) {
                    return tss.ICX.Height(T, component, tss.usX.px$1(pixels));
                },
                /**
                 * Stretch
                 *
                 * @static
                 * @public
                 * @this tss.ICX
                 * @memberof tss.ICX
                 * @param   {Function}    T            
                 * @param   {T}           component
                 * @return  {T}
                 */
                S: function (T, component) {
                    return tss.ICX.Stretch(T, component);
                },
                /**
                 * WidthStretch
                 *
                 * @static
                 * @public
                 * @this tss.ICX
                 * @memberof tss.ICX
                 * @param   {Function}    T            
                 * @param   {T}           component
                 * @return  {T}
                 */
                WS: function (T, component) {
                    return tss.ICX.WidthStretch(T, component);
                },
                /**
                 * HeightStretch
                 *
                 * @static
                 * @public
                 * @this tss.ICX
                 * @memberof tss.ICX
                 * @param   {Function}    T            
                 * @param   {T}           component
                 * @return  {T}
                 */
                HS: function (T, component) {
                    return tss.ICX.HeightStretch(T, component);
                },
                /**
                 * MarginLeft
                 *
                 * @static
                 * @public
                 * @this tss.ICX
                 * @memberof tss.ICX
                 * @param   {Function}    T            
                 * @param   {T}           component    
                 * @param   {tss.us}      unitSize
                 * @return  {T}
                 */
                ML$1: function (T, component, unitSize) {
                    return tss.ICX.MarginLeft(T, component, unitSize);
                },
                ML: function (T, component, pixels) {
                    return tss.ICX.MarginLeft(T, component, tss.usX.px$1(pixels));
                },
                /**
                 * MarginRight
                 *
                 * @static
                 * @public
                 * @this tss.ICX
                 * @memberof tss.ICX
                 * @param   {Function}    T            
                 * @param   {T}           component    
                 * @param   {tss.us}      unitSize
                 * @return  {T}
                 */
                MR$1: function (T, component, unitSize) {
                    return tss.ICX.MarginRight(T, component, unitSize);
                },
                /**
                 * MarginRight
                 *
                 * @static
                 * @public
                 * @this tss.ICX
                 * @memberof tss.ICX
                 * @param   {Function}    T            
                 * @param   {T}           component    
                 * @param   {number}      pixels
                 * @return  {T}
                 */
                MR: function (T, component, pixels) {
                    return tss.ICX.MarginRight(T, component, tss.usX.px$1(pixels));
                },
                /**
                 * MarginTop
                 *
                 * @static
                 * @public
                 * @this tss.ICX
                 * @memberof tss.ICX
                 * @param   {Function}    T            
                 * @param   {T}           component    
                 * @param   {tss.us}      unitSize
                 * @return  {T}
                 */
                MT$1: function (T, component, unitSize) {
                    return tss.ICX.MarginTop(T, component, unitSize);
                },
                /**
                 * MarginTop
                 *
                 * @static
                 * @public
                 * @this tss.ICX
                 * @memberof tss.ICX
                 * @param   {Function}    T            
                 * @param   {T}           component    
                 * @param   {number}      pixels
                 * @return  {T}
                 */
                MT: function (T, component, pixels) {
                    return tss.ICX.MarginTop(T, component, tss.usX.px$1(pixels));
                },
                /**
                 * MarginBottom
                 *
                 * @static
                 * @public
                 * @this tss.ICX
                 * @memberof tss.ICX
                 * @param   {Function}    T            
                 * @param   {T}           component    
                 * @param   {tss.us}      unitSize
                 * @return  {T}
                 */
                MB$1: function (T, component, unitSize) {
                    return tss.ICX.MarginBottom(T, component, unitSize);
                },
                /**
                 * MarginBottom
                 *
                 * @static
                 * @public
                 * @this tss.ICX
                 * @memberof tss.ICX
                 * @param   {Function}    T            
                 * @param   {T}           component    
                 * @param   {number}      pixels
                 * @return  {T}
                 */
                MB: function (T, component, pixels) {
                    return tss.ICX.MarginBottom(T, component, tss.usX.px$1(pixels));
                },
                /**
                 * PaddingLeft
                 *
                 * @static
                 * @public
                 * @this tss.ICX
                 * @memberof tss.ICX
                 * @param   {Function}    T            
                 * @param   {T}           component    
                 * @param   {tss.us}      unitSize
                 * @return  {T}
                 */
                PL$1: function (T, component, unitSize) {
                    return tss.ICX.PaddingLeft(T, component, unitSize);
                },
                /**
                 * PaddingLeft
                 *
                 * @static
                 * @public
                 * @this tss.ICX
                 * @memberof tss.ICX
                 * @param   {Function}    T            
                 * @param   {T}           component    
                 * @param   {number}      pixels
                 * @return  {T}
                 */
                PL: function (T, component, pixels) {
                    return tss.ICX.PaddingLeft(T, component, tss.usX.px$1(pixels));
                },
                /**
                 * PaddingRight
                 *
                 * @static
                 * @public
                 * @this tss.ICX
                 * @memberof tss.ICX
                 * @param   {Function}    T            
                 * @param   {T}           component    
                 * @param   {tss.us}      unitSize
                 * @return  {T}
                 */
                PR$1: function (T, component, unitSize) {
                    return tss.ICX.PaddingRight(T, component, unitSize);
                },
                /**
                 * PaddingRight
                 *
                 * @static
                 * @public
                 * @this tss.ICX
                 * @memberof tss.ICX
                 * @param   {Function}    T            
                 * @param   {T}           component    
                 * @param   {number}      pixels
                 * @return  {T}
                 */
                PR: function (T, component, pixels) {
                    return tss.ICX.PaddingRight(T, component, tss.usX.px$1(pixels));
                },
                /**
                 * PaddingTop
                 *
                 * @static
                 * @public
                 * @this tss.ICX
                 * @memberof tss.ICX
                 * @param   {Function}    T            
                 * @param   {T}           component    
                 * @param   {tss.us}      unitSize
                 * @return  {T}
                 */
                PT$1: function (T, component, unitSize) {
                    return tss.ICX.PaddingTop(T, component, unitSize);
                },
                /**
                 * PaddingTop
                 *
                 * @static
                 * @public
                 * @this tss.ICX
                 * @memberof tss.ICX
                 * @param   {Function}    T            
                 * @param   {T}           component    
                 * @param   {number}      pixels
                 * @return  {T}
                 */
                PT: function (T, component, pixels) {
                    return tss.ICX.PaddingTop(T, component, tss.usX.px$1(pixels));
                },
                /**
                 * PaddingBottom
                 *
                 * @static
                 * @public
                 * @this tss.ICX
                 * @memberof tss.ICX
                 * @param   {Function}    T            
                 * @param   {T}           component    
                 * @param   {tss.us}      unitSize
                 * @return  {T}
                 */
                PB$1: function (T, component, unitSize) {
                    return tss.ICX.PaddingBottom(T, component, unitSize);
                },
                /**
                 * PaddingBottom
                 *
                 * @static
                 * @public
                 * @this tss.ICX
                 * @memberof tss.ICX
                 * @param   {Function}    T            
                 * @param   {T}           component    
                 * @param   {number}      pixels
                 * @return  {T}
                 */
                PB: function (T, component, pixels) {
                    return tss.ICX.PaddingBottom(T, component, tss.usX.px$1(pixels));
                }
            }
        }
    });

    H5.define("tss.ICTX", {
        statics: {
            methods: {
                Children$4: function (T, container, first, children) {
                    var $t;
                    container.tss$ICBT$tss$IC$Clear();
                    container.tss$ICBT$tss$IC$Add(first);
                    $t = H5.getEnumerator(children, tss.IC);
                    try {
                        while ($t.moveNext()) {
                            var x = $t.Current;
                            container.tss$ICBT$tss$IC$Add(x);
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return container;
                },
                Children$1: function (T, container, children, last) {
                    var $t;
                    if (last === void 0) { last = null; }
                    container.tss$ICBT$tss$IC$Clear();
                    $t = H5.getEnumerator(children, tss.IC);
                    try {
                        while ($t.moveNext()) {
                            var x = $t.Current;
                            container.tss$ICBT$tss$IC$Add(x);
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    if (H5.is(last, System.Object)) {
                        container.tss$ICBT$tss$IC$Add(last);
                    }

                    return container;
                },
                Children$3: function (T, container, first, children, last) {
                    var $t;
                    container.tss$ICBT$tss$IC$Clear();

                    if (H5.is(first, System.Object)) {
                        container.tss$ICBT$tss$IC$Add(first);
                    }

                    $t = H5.getEnumerator(children, tss.IC);
                    try {
                        while ($t.moveNext()) {
                            var x = $t.Current;
                            container.tss$ICBT$tss$IC$Add(x);
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    if (H5.is(last, System.Object)) {
                        container.tss$ICBT$tss$IC$Add(last);
                    }
                    return container;
                },
                Children$6: function (T, container, children) {
                    if (children === void 0) { children = []; }
                    container.tss$ICBT$tss$IC$Clear();
                    children.forEach(function (x) {
                            container.tss$ICBT$tss$IC$Add(x);
                        });
                    return container;
                },
                Children$2: function (T, container, children) {
                    var $t;
                    container.tss$ICBT$tss$Nav$NavLink$Clear();
                    $t = H5.getEnumerator(children, tss.Nav.NavLink);
                    try {
                        while ($t.moveNext()) {
                            var x = $t.Current;
                            container.tss$ICBT$tss$Nav$NavLink$Add(x);
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return container;
                },
                Children$7: function (T, container, children) {
                    if (children === void 0) { children = []; }
                    container.tss$ICBT$tss$Nav$NavLink$Clear();
                    children.forEach(function (x) {
                            container.tss$ICBT$tss$Nav$NavLink$Add(x);
                        });
                    return container;
                },
                Children: function (T, container, children) {
                    var $t;
                    container.tss$ICBT$tss$ChoiceGroup$Choice$Clear();
                    $t = H5.getEnumerator(children, tss.ChoiceGroup.Choice);
                    try {
                        while ($t.moveNext()) {
                            var x = $t.Current;
                            container.tss$ICBT$tss$ChoiceGroup$Choice$Add(x);
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return container;
                },
                Children$5: function (T, container, children) {
                    if (children === void 0) { children = []; }
                    container.tss$ICBT$tss$ChoiceGroup$Choice$Clear();
                    children.forEach(function (x) {
                            container.tss$ICBT$tss$ChoiceGroup$Choice$Add(x);
                        });
                    return container;
                }
            }
        }
    });

    H5.define("tss.IHTWOX", {
        statics: {
            methods: {
                SetCanWrap: function (T, component, canWrap) {
                    component.tss$ICW$CanWrap = canWrap;
                    return component;
                }
            }
        }
    });

    H5.define("tss.IPickerItem", {
        $kind: "interface"
    });

    H5.define("tss.IPickerItemX", {
        statics: {
            methods: {
                SelectedIf: function (T, source, shouldSelect) {
                    if (shouldSelect) {
                        source.tss$IPickerItem$IsSelected = true;
                    }
                    return source;
                }
            }
        }
    });

    H5.define("tss.ISearchableItem", {
        $kind: "interface"
    });

    H5.define("Tesserae.ISidebarItem", {
        $kind: "interface"
    });

    H5.define("tss.ItemAlign", {
        $kind: "enum",
        statics: {
            fields: {
                auto: "auto",
                stretch: "stretch",
                baseline: "baseline",
                "flex-start": "flex-start",
                center: "center",
                "flex-end": "flex-end"
            }
        },
        $utype: System.String
    });

    H5.define("tss.ItemJustify", {
        $kind: "enum",
        statics: {
            fields: {
                "space-between": "space-between",
                "space-around": "space-around",
                "space-evenly": "space-evenly",
                "flex-start": "flex-start",
                center: "center",
                "flex-end": "flex-end"
            }
        },
        $utype: System.String
    });

    H5.define("tss.ITFX", {
        statics: {
            methods: {
                SetTextSize: function (T, hasTextSize, textSize) {
                    hasTextSize.tss$ITF$Size = textSize;
                    return hasTextSize;
                },
                SetTextWeight: function (T, hasTextSize, textWeight) {
                    hasTextSize.tss$ITF$Weight = textWeight;
                    return hasTextSize;
                },
                SetTextAlign: function (T, hasTextSize, textAlign) {
                    hasTextSize.tss$ITF$TextAlign = textAlign;
                    return hasTextSize;
                },
                Tiny: function (T, hasTextSize) {
                    hasTextSize.tss$ITF$Size = "tss-fontsize-tiny";
                    return hasTextSize;
                },
                XSmall: function (T, hasTextSize) {
                    hasTextSize.tss$ITF$Size = "tss-fontsize-xsmall";
                    return hasTextSize;
                },
                Small: function (T, hasTextSize) {
                    hasTextSize.tss$ITF$Size = "tss-fontsize-small";
                    return hasTextSize;
                },
                SmallPlus: function (T, hasTextSize) {
                    hasTextSize.tss$ITF$Size = "tss-fontsize-smallplus";
                    return hasTextSize;
                },
                Medium: function (T, hasTextSize) {
                    hasTextSize.tss$ITF$Size = "tss-fontsize-medium";
                    return hasTextSize;
                },
                MediumPlus: function (T, hasTextSize) {
                    hasTextSize.tss$ITF$Size = "tss-fontsize-mediumplus";
                    return hasTextSize;
                },
                Large: function (T, hasTextSize) {
                    hasTextSize.tss$ITF$Size = "tss-fontsize-large";
                    return hasTextSize;
                },
                XLarge: function (T, hasTextSize) {
                    hasTextSize.tss$ITF$Size = "tss-fontsize-xlarge";
                    return hasTextSize;
                },
                XXLarge: function (T, hasTextSize) {
                    hasTextSize.tss$ITF$Size = "tss-fontsize-xxlarge";
                    return hasTextSize;
                },
                Mega: function (T, hasTextSize) {
                    hasTextSize.tss$ITF$Size = "tss-fontsize-mega";
                    return hasTextSize;
                },
                Regular: function (T, hasTextSize) {
                    hasTextSize.tss$ITF$Weight = "tss-fontweight-regular";
                    return hasTextSize;
                },
                SemiBold: function (T, hasTextSize) {
                    hasTextSize.tss$ITF$Weight = "tss-fontweight-semibold";
                    return hasTextSize;
                },
                Bold: function (T, hasTextSize) {
                    hasTextSize.tss$ITF$Weight = "tss-fontweight-bold";
                    return hasTextSize;
                },
                TextLeft: function (T, hasTextSize) {
                    hasTextSize.tss$ITF$TextAlign = "tss-textalign-left";
                    return hasTextSize;
                },
                TextCenter: function (T, hasTextSize) {
                    hasTextSize.tss$ITF$TextAlign = "tss-textalign-center";
                    return hasTextSize;
                },
                TextRight: function (T, hasTextSize) {
                    hasTextSize.tss$ITF$TextAlign = "tss-textalign-right";
                    return hasTextSize;
                },
                FromClassList$1: function (element, defaultValue) {
                    var curFontSize = System.Linq.Enumerable.from(element.classList, System.String).firstOrDefault(function (t) {
                            return System.String.startsWith(t, "tss-fontsize-");
                        }, null);
                    if (System.String.isNullOrEmpty(curFontSize)) {
                        return defaultValue;
                    }
                    return curFontSize;

                },
                FromClassList: function (element, defaultValue) {
                    var curTextAlign = System.Linq.Enumerable.from(element.classList, System.String).firstOrDefault(function (t) {
                            return System.String.startsWith(t, "tss-textalign-");
                        }, null);
                    if (System.String.isNullOrEmpty(curTextAlign)) {
                        return defaultValue;
                    }
                    return curTextAlign;

                },
                FromClassList$2: function (element, defaultValue) {
                    var curWeight = System.Linq.Enumerable.from(element.classList, System.String).firstOrDefault(function (t) {
                            return System.String.startsWith(t, "tss-fontweight-");
                        }, null);
                    if (System.String.isNullOrEmpty(curWeight)) {
                        return defaultValue;
                    }
                    return curWeight;

                }
            }
        }
    });

    H5.define("tss.LayerExtensions", {
        statics: {
            methods: {
                Content: function (T, layer, content) {
                    var modal;
                    if (((modal = H5.as(layer, tss.Modal))) != null) {
                        modal.Content = content;
                    } else {
                        layer.Content = content;
                    }
                    return layer;
                },
                Visible: function (T, layer, visible) {
                    layer.IsVisible = visible;
                    return layer;
                },
                Host: function (T, layer, host) {
                    layer.Host = host;
                    return layer;
                }
            }
        }
    });

    H5.define("tss.Layers", {
        statics: {
            fields: {
                BaseZIndex: 0
            },
            ctors: {
                init: function () {
                    this.BaseZIndex = 1000;
                }
            },
            methods: {
                PushLayer: function (element) {
                    return H5.toString((((tss.Layers.CurrentZIndex() + 10) | 0)));
                },
                CurrentZIndex: function () {
                    var $t;
                    var maxIndex = tss.Layers.BaseZIndex;

                    $t = H5.getEnumerator(document.querySelectorAll(".tss-layer"), Node);
                    try {
                        while ($t.moveNext()) {
                            var htmlElement = H5.cast($t.Current, HTMLElement);
                            var zIndex = { };
                            if (System.Int32.tryParse(htmlElement.style.zIndex, zIndex) && zIndex.v > maxIndex) {
                                maxIndex = zIndex.v;
                            }
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return maxIndex;
                },
                AboveCurrent: function () {
                    return H5.toString((((tss.Layers.CurrentZIndex() + 5) | 0)));
                }
            }
        }
    });

    H5.define("Tesserae.LineAwesome", {
        $kind: "enum",
        statics: {
            fields: {
                "la-500px": 0,
                "la-accessible-icon": 1,
                "la-accusoft": 2,
                "la-acquisitions-incorporated": 3,
                "la-ad": 4,
                "la-address-book": 5,
                "la-address-card": 6,
                "la-adjust": 7,
                "la-adn": 8,
                "la-adobe": 9,
                "la-adversal": 10,
                "la-affiliatetheme": 11,
                "la-air-freshener": 12,
                "la-airbnb": 13,
                "la-algolia": 14,
                "la-align-center": 15,
                "la-align-justify": 16,
                "la-align-left": 17,
                "la-align-right": 18,
                "la-alipay": 19,
                "la-allergies": 20,
                "la-amazon": 21,
                "la-amazon-pay": 22,
                "la-ambulance": 23,
                "la-american-sign-language-interpreting": 24,
                "la-amilia": 25,
                "la-anchor": 26,
                "la-android": 27,
                "la-angellist": 28,
                "la-angle-double-down": 29,
                "la-angle-double-left": 30,
                "la-angle-double-right": 31,
                "la-angle-double-up": 32,
                "la-angle-down": 33,
                "la-angle-left": 34,
                "la-angle-right": 35,
                "la-angle-up": 36,
                "la-angry": 37,
                "la-angrycreative": 38,
                "la-angular": 39,
                "la-ankh": 40,
                "la-app-store": 41,
                "la-app-store-ios": 42,
                "la-apper": 43,
                "la-apple": 44,
                "la-apple-alt": 45,
                "la-apple-pay": 46,
                "la-archive": 47,
                "la-archway": 48,
                "la-arrow-alt-circle-down": 49,
                "la-arrow-alt-circle-left": 50,
                "la-arrow-alt-circle-right": 51,
                "la-arrow-alt-circle-up": 52,
                "la-arrow-circle-down": 53,
                "la-arrow-circle-left": 54,
                "la-arrow-circle-right": 55,
                "la-arrow-circle-up": 56,
                "la-arrow-down": 57,
                "la-arrow-left": 58,
                "la-arrow-right": 59,
                "la-arrow-up": 60,
                "la-arrows-alt": 61,
                "la-arrows-alt-h": 62,
                "la-arrows-alt-v": 63,
                "la-artstation": 64,
                "la-assistive-listening-systems": 65,
                "la-asterisk": 66,
                "la-asymmetrik": 67,
                "la-at": 68,
                "la-atlas": 69,
                "la-atlassian": 70,
                "la-atom": 71,
                "la-audible": 72,
                "la-audio-description": 73,
                "la-autoprefixer": 74,
                "la-avianex": 75,
                "la-aviato": 76,
                "la-award": 77,
                "la-aws": 78,
                "la-baby": 79,
                "la-baby-carriage": 80,
                "la-backspace": 81,
                "la-backward": 82,
                "la-bacon": 83,
                "la-balance-scale": 84,
                "la-balance-scale-left": 85,
                "la-balance-scale-right": 86,
                "la-ban": 87,
                "la-band-aid": 88,
                "la-bandcamp": 89,
                "la-barcode": 90,
                "la-bars": 91,
                "la-baseball-ball": 92,
                "la-basketball-ball": 93,
                "la-bath": 94,
                "la-battery-empty": 95,
                "la-battery-full": 96,
                "la-battery-half": 97,
                "la-battery-quarter": 98,
                "la-battery-three-quarters": 99,
                "la-battle-net": 100,
                "la-bed": 101,
                "la-beer": 102,
                "la-behance": 103,
                "la-behance-square": 104,
                "la-bell": 105,
                "la-bell-slash": 106,
                "la-bezier-curve": 107,
                "la-bible": 108,
                "la-bicycle": 109,
                "la-biking": 110,
                "la-bimobject": 111,
                "la-binoculars": 112,
                "la-biohazard": 113,
                "la-birthday-cake": 114,
                "la-bitbucket": 115,
                "la-bitcoin": 116,
                "la-bity": 117,
                "la-black-tie": 118,
                "la-blackberry": 119,
                "la-blender": 120,
                "la-blender-phone": 121,
                "la-blind": 122,
                "la-blog": 123,
                "la-blogger": 124,
                "la-blogger-b": 125,
                "la-bluetooth": 126,
                "la-bluetooth-b": 127,
                "la-bold": 128,
                "la-bolt": 129,
                "la-bomb": 130,
                "la-bone": 131,
                "la-bong": 132,
                "la-book": 133,
                "la-book-dead": 134,
                "la-book-medical": 135,
                "la-book-open": 136,
                "la-book-reader": 137,
                "la-bookmark": 138,
                "la-bootstrap": 139,
                "la-border-all": 140,
                "la-border-none": 141,
                "la-border-style": 142,
                "la-bowling-ball": 143,
                "la-box": 144,
                "la-box-open": 145,
                "la-boxes": 146,
                "la-braille": 147,
                "la-brain": 148,
                "la-bread-slice": 149,
                "la-briefcase": 150,
                "la-briefcase-medical": 151,
                "la-broadcast-tower": 152,
                "la-broom": 153,
                "la-brush": 154,
                "la-btc": 155,
                "la-buffer": 156,
                "la-bug": 157,
                "la-building": 158,
                "la-bullhorn": 159,
                "la-bullseye": 160,
                "la-burn": 161,
                "la-buromobelexperte": 162,
                "la-bus": 163,
                "la-bus-alt": 164,
                "la-business-time": 165,
                "la-buy-n-large": 166,
                "la-buysellads": 167,
                "la-calculator": 168,
                "la-calendar": 169,
                "la-calendar-alt": 170,
                "la-calendar-check": 171,
                "la-calendar-day": 172,
                "la-calendar-minus": 173,
                "la-calendar-plus": 174,
                "la-calendar-times": 175,
                "la-calendar-week": 176,
                "la-camera": 177,
                "la-camera-retro": 178,
                "la-campground": 179,
                "la-canadian-maple-leaf": 180,
                "la-candy-cane": 181,
                "la-cannabis": 182,
                "la-capsules": 183,
                "la-car": 184,
                "la-car-alt": 185,
                "la-car-battery": 186,
                "la-car-crash": 187,
                "la-car-side": 188,
                "la-caret-down": 189,
                "la-caret-left": 190,
                "la-caret-right": 191,
                "la-caret-square-down": 192,
                "la-caret-square-left": 193,
                "la-caret-square-right": 194,
                "la-caret-square-up": 195,
                "la-caret-up": 196,
                "la-carrot": 197,
                "la-cart-arrow-down": 198,
                "la-cart-plus": 199,
                "la-cash-register": 200,
                "la-cat": 201,
                "la-cc-amazon-pay": 202,
                "la-cc-amex": 203,
                "la-cc-apple-pay": 204,
                "la-cc-diners-club": 205,
                "la-cc-discover": 206,
                "la-cc-jcb": 207,
                "la-cc-mastercard": 208,
                "la-cc-paypal": 209,
                "la-cc-stripe": 210,
                "la-cc-visa": 211,
                "la-centercode": 212,
                "la-centos": 213,
                "la-certificate": 214,
                "la-chair": 215,
                "la-chalkboard": 216,
                "la-chalkboard-teacher": 217,
                "la-charging-station": 218,
                "la-chart-area": 219,
                "la-chart-bar": 220,
                "la-chart-line": 221,
                "la-chart-pie": 222,
                "la-check": 223,
                "la-check-circle": 224,
                "la-check-double": 225,
                "la-check-square": 226,
                "la-cheese": 227,
                "la-chess": 228,
                "la-chess-bishop": 229,
                "la-chess-board": 230,
                "la-chess-king": 231,
                "la-chess-knight": 232,
                "la-chess-pawn": 233,
                "la-chess-queen": 234,
                "la-chess-rook": 235,
                "la-chevron-circle-down": 236,
                "la-chevron-circle-left": 237,
                "la-chevron-circle-right": 238,
                "la-chevron-circle-up": 239,
                "la-chevron-down": 240,
                "la-chevron-left": 241,
                "la-chevron-right": 242,
                "la-chevron-up": 243,
                "la-child": 244,
                "la-chrome": 245,
                "la-chromecast": 246,
                "la-church": 247,
                "la-circle": 248,
                "la-circle-notch": 249,
                "la-city": 250,
                "la-clinic-medical": 251,
                "la-clipboard": 252,
                "la-clipboard-check": 253,
                "la-clipboard-list": 254,
                "la-clock": 255,
                "la-clone": 256,
                "la-closed-captioning": 257,
                "la-cloud": 258,
                "la-cloud-download-alt": 259,
                "la-cloud-meatball": 260,
                "la-cloud-moon": 261,
                "la-cloud-moon-rain": 262,
                "la-cloud-rain": 263,
                "la-cloud-showers-heavy": 264,
                "la-cloud-sun": 265,
                "la-cloud-sun-rain": 266,
                "la-cloud-upload-alt": 267,
                "la-cloudscale": 268,
                "la-cloudsmith": 269,
                "la-cloudversify": 270,
                "la-cocktail": 271,
                "la-code": 272,
                "la-code-branch": 273,
                "la-codepen": 274,
                "la-codiepie": 275,
                "la-coffee": 276,
                "la-cog": 277,
                "la-cogs": 278,
                "la-coins": 279,
                "la-columns": 280,
                "la-comment": 281,
                "la-comment-alt": 282,
                "la-comment-dollar": 283,
                "la-comment-dots": 284,
                "la-comment-medical": 285,
                "la-comment-slash": 286,
                "la-comments": 287,
                "la-comments-dollar": 288,
                "la-compact-disc": 289,
                "la-compass": 290,
                "la-compress": 291,
                "la-compress-arrows-alt": 292,
                "la-concierge-bell": 293,
                "la-confluence": 294,
                "la-connectdevelop": 295,
                "la-contao": 296,
                "la-cookie": 297,
                "la-cookie-bite": 298,
                "la-copy": 299,
                "la-copyright": 300,
                "la-cotton-bureau": 301,
                "la-couch": 302,
                "la-cpanel": 303,
                "la-creative-commons": 304,
                "la-creative-commons-by": 305,
                "la-creative-commons-nc": 306,
                "la-creative-commons-nc-eu": 307,
                "la-creative-commons-nc-jp": 308,
                "la-creative-commons-nd": 309,
                "la-creative-commons-pd": 310,
                "la-creative-commons-pd-alt": 311,
                "la-creative-commons-remix": 312,
                "la-creative-commons-sa": 313,
                "la-creative-commons-sampling": 314,
                "la-creative-commons-sampling-plus": 315,
                "la-creative-commons-share": 316,
                "la-creative-commons-zero": 317,
                "la-credit-card": 318,
                "la-critical-role": 319,
                "la-crop": 320,
                "la-crop-alt": 321,
                "la-cross": 322,
                "la-crosshairs": 323,
                "la-crow": 324,
                "la-crown": 325,
                "la-crutch": 326,
                "la-css3": 327,
                "la-css3-alt": 328,
                "la-cube": 329,
                "la-cubes": 330,
                "la-cut": 331,
                "la-cuttlefish": 332,
                "la-d-and-d": 333,
                "la-d-and-d-beyond": 334,
                "la-dashcube": 335,
                "la-database": 336,
                "la-deaf": 337,
                "la-delicious": 338,
                "la-democrat": 339,
                "la-deploydog": 340,
                "la-deskpro": 341,
                "la-desktop": 342,
                "la-dev": 343,
                "la-deviantart": 344,
                "la-dharmachakra": 345,
                "la-dhl": 346,
                "la-diagnoses": 347,
                "la-diaspora": 348,
                "la-dice": 349,
                "la-dice-d20": 350,
                "la-dice-d6": 351,
                "la-dice-five": 352,
                "la-dice-four": 353,
                "la-dice-one": 354,
                "la-dice-six": 355,
                "la-dice-three": 356,
                "la-dice-two": 357,
                "la-digg": 358,
                "la-digital-ocean": 359,
                "la-digital-tachograph": 360,
                "la-directions": 361,
                "la-discord": 362,
                "la-discourse": 363,
                "la-divide": 364,
                "la-dizzy": 365,
                "la-dna": 366,
                "la-dochub": 367,
                "la-docker": 368,
                "la-dog": 369,
                "la-dollar-sign": 370,
                "la-dolly": 371,
                "la-dolly-flatbed": 372,
                "la-donate": 373,
                "la-door-closed": 374,
                "la-door-open": 375,
                "la-dot-circle": 376,
                "la-dove": 377,
                "la-download": 378,
                "la-draft2digital": 379,
                "la-drafting-compass": 380,
                "la-dragon": 381,
                "la-draw-polygon": 382,
                "la-dribbble": 383,
                "la-dribbble-square": 384,
                "la-dropbox": 385,
                "la-drum": 386,
                "la-drum-steelpan": 387,
                "la-drumstick-bite": 388,
                "la-drupal": 389,
                "la-dumbbell": 390,
                "la-dumpster": 391,
                "la-dumpster-fire": 392,
                "la-dungeon": 393,
                "la-dyalog": 394,
                "la-earlybirds": 395,
                "la-ebay": 396,
                "la-edge": 397,
                "la-edit": 398,
                "la-egg": 399,
                "la-eject": 400,
                "la-elementor": 401,
                "la-ellipsis-h": 402,
                "la-ellipsis-v": 403,
                "la-ello": 404,
                "la-ember": 405,
                "la-empire": 406,
                "la-envelope": 407,
                "la-envelope-open": 408,
                "la-envelope-open-text": 409,
                "la-envelope-square": 410,
                "la-envira": 411,
                "la-equals": 412,
                "la-eraser": 413,
                "la-erlang": 414,
                "la-ethereum": 415,
                "la-ethernet": 416,
                "la-etsy": 417,
                "la-euro-sign": 418,
                "la-evernote": 419,
                "la-exchange-alt": 420,
                "la-exclamation": 421,
                "la-exclamation-circle": 422,
                "la-exclamation-triangle": 423,
                "la-expand": 424,
                "la-expand-arrows-alt": 425,
                "la-expeditedssl": 426,
                "la-external-link-alt": 427,
                "la-external-link-square-alt": 428,
                "la-eye": 429,
                "la-eye-dropper": 430,
                "la-eye-slash": 431,
                "la-facebook": 432,
                "la-facebook-f": 433,
                "la-facebook-messenger": 434,
                "la-facebook-square": 435,
                "la-fan": 436,
                "la-fantasy-flight-games": 437,
                "la-fast-backward": 438,
                "la-fast-forward": 439,
                "la-fax": 440,
                "la-feather": 441,
                "la-feather-alt": 442,
                "la-fedex": 443,
                "la-fedora": 444,
                "la-female": 445,
                "la-fighter-jet": 446,
                "la-figma": 447,
                "la-file": 448,
                "la-file-alt": 449,
                "la-file-archive": 450,
                "la-file-audio": 451,
                "la-file-code": 452,
                "la-file-contract": 453,
                "la-file-csv": 454,
                "la-file-download": 455,
                "la-file-excel": 456,
                "la-file-export": 457,
                "la-file-image": 458,
                "la-file-import": 459,
                "la-file-invoice": 460,
                "la-file-invoice-dollar": 461,
                "la-file-medical": 462,
                "la-file-medical-alt": 463,
                "la-file-pdf": 464,
                "la-file-powerpoint": 465,
                "la-file-prescription": 466,
                "la-file-signature": 467,
                "la-file-upload": 468,
                "la-file-video": 469,
                "la-file-word": 470,
                "la-fill": 471,
                "la-fill-drip": 472,
                "la-film": 473,
                "la-filter": 474,
                "la-fingerprint": 475,
                "la-fire": 476,
                "la-fire-alt": 477,
                "la-fire-extinguisher": 478,
                "la-firefox": 479,
                "la-first-aid": 480,
                "la-first-order": 481,
                "la-first-order-alt": 482,
                "la-firstdraft": 483,
                "la-fish": 484,
                "la-fist-raised": 485,
                "la-flag": 486,
                "la-flag-checkered": 487,
                "la-flag-usa": 488,
                "la-flask": 489,
                "la-flickr": 490,
                "la-flipboard": 491,
                "la-flushed": 492,
                "la-fly": 493,
                "la-folder": 494,
                "la-folder-minus": 495,
                "la-folder-open": 496,
                "la-folder-plus": 497,
                "la-font": 498,
                "la-font-awesome": 499,
                "la-font-awesome-alt": 500,
                "la-font-awesome-flag": 501,
                "la-font-awesome-logo-full": 502,
                "la-fonticons": 503,
                "la-fonticons-fi": 504,
                "la-football-ball": 505,
                "la-fort-awesome": 506,
                "la-fort-awesome-alt": 507,
                "la-forumbee": 508,
                "la-forward": 509,
                "la-foursquare": 510,
                "la-free-code-camp": 511,
                "la-freebsd": 512,
                "la-frog": 513,
                "la-frown": 514,
                "la-frown-open": 515,
                "la-fulcrum": 516,
                "la-funnel-dollar": 517,
                "la-futbol": 518,
                "la-galactic-republic": 519,
                "la-galactic-senate": 520,
                "la-gamepad": 521,
                "la-gas-pump": 522,
                "la-gavel": 523,
                "la-gem": 524,
                "la-genderless": 525,
                "la-get-pocket": 526,
                "la-gg": 527,
                "la-gg-circle": 528,
                "la-ghost": 529,
                "la-gift": 530,
                "la-gifts": 531,
                "la-git": 532,
                "la-git-alt": 533,
                "la-git-square": 534,
                "la-github": 535,
                "la-github-alt": 536,
                "la-github-square": 537,
                "la-gitkraken": 538,
                "la-gitlab": 539,
                "la-gitter": 540,
                "la-glass-cheers": 541,
                "la-glass-martini": 542,
                "la-glass-martini-alt": 543,
                "la-glass-whiskey": 544,
                "la-glasses": 545,
                "la-glide": 546,
                "la-glide-g": 547,
                "la-globe": 548,
                "la-globe-africa": 549,
                "la-globe-americas": 550,
                "la-globe-asia": 551,
                "la-globe-europe": 552,
                "la-gofore": 553,
                "la-golf-ball": 554,
                "la-goodreads": 555,
                "la-goodreads-g": 556,
                "la-google": 557,
                "la-google-drive": 558,
                "la-google-play": 559,
                "la-google-plus": 560,
                "la-google-plus-g": 561,
                "la-google-plus-square": 562,
                "la-google-wallet": 563,
                "la-gopuram": 564,
                "la-graduation-cap": 565,
                "la-gratipay": 566,
                "la-grav": 567,
                "la-greater-than": 568,
                "la-greater-than-equal": 569,
                "la-grimace": 570,
                "la-grin": 571,
                "la-grin-alt": 572,
                "la-grin-beam": 573,
                "la-grin-beam-sweat": 574,
                "la-grin-hearts": 575,
                "la-grin-squint": 576,
                "la-grin-squint-tears": 577,
                "la-grin-stars": 578,
                "la-grin-tears": 579,
                "la-grin-tongue": 580,
                "la-grin-tongue-squint": 581,
                "la-grin-tongue-wink": 582,
                "la-grin-wink": 583,
                "la-grip-horizontal": 584,
                "la-grip-lines": 585,
                "la-grip-lines-vertical": 586,
                "la-grip-vertical": 587,
                "la-gripfire": 588,
                "la-grunt": 589,
                "la-guitar": 590,
                "la-gulp": 591,
                "la-h-square": 592,
                "la-hacker-news": 593,
                "la-hacker-news-square": 594,
                "la-hackerrank": 595,
                "la-hamburger": 596,
                "la-hammer": 597,
                "la-hamsa": 598,
                "la-hand-holding": 599,
                "la-hand-holding-heart": 600,
                "la-hand-holding-usd": 601,
                "la-hand-lizard": 602,
                "la-hand-middle-finger": 603,
                "la-hand-paper": 604,
                "la-hand-peace": 605,
                "la-hand-point-down": 606,
                "la-hand-point-left": 607,
                "la-hand-point-right": 608,
                "la-hand-point-up": 609,
                "la-hand-pointer": 610,
                "la-hand-rock": 611,
                "la-hand-scissors": 612,
                "la-hand-spock": 613,
                "la-hands": 614,
                "la-hands-helping": 615,
                "la-handshake": 616,
                "la-hanukiah": 617,
                "la-hard-hat": 618,
                "la-hashtag": 619,
                "la-hat-cowboy": 620,
                "la-hat-cowboy-side": 621,
                "la-hat-wizard": 622,
                "la-haykal": 623,
                "la-hdd": 624,
                "la-heading": 625,
                "la-headphones": 626,
                "la-headphones-alt": 627,
                "la-headset": 628,
                "la-heart": 629,
                "la-heart-broken": 630,
                "la-heartbeat": 631,
                "la-helicopter": 632,
                "la-highlighter": 633,
                "la-hiking": 634,
                "la-hippo": 635,
                "la-hips": 636,
                "la-hire-a-helper": 637,
                "la-history": 638,
                "la-hockey-puck": 639,
                "la-holly-berry": 640,
                "la-home": 641,
                "la-hooli": 642,
                "la-hornbill": 643,
                "la-horse": 644,
                "la-horse-head": 645,
                "la-hospital": 646,
                "la-hospital-alt": 647,
                "la-hospital-symbol": 648,
                "la-hot-tub": 649,
                "la-hotdog": 650,
                "la-hotel": 651,
                "la-hotjar": 652,
                "la-hourglass": 653,
                "la-hourglass-end": 654,
                "la-hourglass-half": 655,
                "la-hourglass-start": 656,
                "la-house-damage": 657,
                "la-houzz": 658,
                "la-hryvnia": 659,
                "la-html5": 660,
                "la-hubspot": 661,
                "la-i-cursor": 662,
                "la-ice-cream": 663,
                "la-icicles": 664,
                "la-icons": 665,
                "la-id-badge": 666,
                "la-id-card": 667,
                "la-id-card-alt": 668,
                "la-igloo": 669,
                "la-image": 670,
                "la-images": 671,
                "la-imdb": 672,
                "la-inbox": 673,
                "la-indent": 674,
                "la-industry": 675,
                "la-infinity": 676,
                "la-info": 677,
                "la-info-circle": 678,
                "la-instagram": 679,
                "la-intercom": 680,
                "la-internet-explorer": 681,
                "la-invision": 682,
                "la-ioxhost": 683,
                "la-italic": 684,
                "la-itch-io": 685,
                "la-itunes": 686,
                "la-itunes-note": 687,
                "la-java": 688,
                "la-jedi": 689,
                "la-jedi-order": 690,
                "la-jenkins": 691,
                "la-jira": 692,
                "la-joget": 693,
                "la-joint": 694,
                "la-joomla": 695,
                "la-journal-whills": 696,
                "la-js": 697,
                "la-js-square": 698,
                "la-jsfiddle": 699,
                "la-kaaba": 700,
                "la-kaggle": 701,
                "la-key": 702,
                "la-keybase": 703,
                "la-keyboard": 704,
                "la-keycdn": 705,
                "la-khanda": 706,
                "la-kickstarter": 707,
                "la-kickstarter-k": 708,
                "la-kiss": 709,
                "la-kiss-beam": 710,
                "la-kiss-wink-heart": 711,
                "la-kiwi-bird": 712,
                "la-korvue": 713,
                "la-landmark": 714,
                "la-language": 715,
                "la-laptop": 716,
                "la-laptop-code": 717,
                "la-laptop-medical": 718,
                "la-laravel": 719,
                "la-lastfm": 720,
                "la-lastfm-square": 721,
                "la-laugh": 722,
                "la-laugh-beam": 723,
                "la-laugh-squint": 724,
                "la-laugh-wink": 725,
                "la-layer-group": 726,
                "la-leaf": 727,
                "la-leanpub": 728,
                "la-lemon": 729,
                "la-less": 730,
                "la-less-than": 731,
                "la-less-than-equal": 732,
                "la-level-down-alt": 733,
                "la-level-up-alt": 734,
                "la-life-ring": 735,
                "la-lightbulb": 736,
                "la-line": 737,
                "la-link": 738,
                "la-linkedin": 739,
                "la-linkedin-in": 740,
                "la-linode": 741,
                "la-linux": 742,
                "la-lira-sign": 743,
                "la-list": 744,
                "la-list-alt": 745,
                "la-list-ol": 746,
                "la-list-ul": 747,
                "la-location-arrow": 748,
                "la-lock": 749,
                "la-lock-open": 750,
                "la-long-arrow-alt-down": 751,
                "la-long-arrow-alt-left": 752,
                "la-long-arrow-alt-right": 753,
                "la-long-arrow-alt-up": 754,
                "la-low-vision": 755,
                "la-luggage-cart": 756,
                "la-lyft": 757,
                "la-magento": 758,
                "la-magic": 759,
                "la-magnet": 760,
                "la-mail-bulk": 761,
                "la-mailchimp": 762,
                "la-male": 763,
                "la-mandalorian": 764,
                "la-map": 765,
                "la-map-marked": 766,
                "la-map-marked-alt": 767,
                "la-map-marker": 768,
                "la-map-marker-alt": 769,
                "la-map-pin": 770,
                "la-map-signs": 771,
                "la-markdown": 772,
                "la-marker": 773,
                "la-mars": 774,
                "la-mars-double": 775,
                "la-mars-stroke": 776,
                "la-mars-stroke-h": 777,
                "la-mars-stroke-v": 778,
                "la-mask": 779,
                "la-mastodon": 780,
                "la-maxcdn": 781,
                "la-mdb": 782,
                "la-medal": 783,
                "la-medapps": 784,
                "la-medium": 785,
                "la-medium-m": 786,
                "la-medkit": 787,
                "la-medrt": 788,
                "la-meetup": 789,
                "la-megaport": 790,
                "la-meh": 791,
                "la-meh-blank": 792,
                "la-meh-rolling-eyes": 793,
                "la-memory": 794,
                "la-mendeley": 795,
                "la-menorah": 796,
                "la-mercury": 797,
                "la-meteor": 798,
                "la-microchip": 799,
                "la-microphone": 800,
                "la-microphone-alt": 801,
                "la-microphone-alt-slash": 802,
                "la-microphone-slash": 803,
                "la-microscope": 804,
                "la-microsoft": 805,
                "la-minus": 806,
                "la-minus-circle": 807,
                "la-minus-square": 808,
                "la-mitten": 809,
                "la-mix": 810,
                "la-mixcloud": 811,
                "la-mizuni": 812,
                "la-mobile": 813,
                "la-mobile-alt": 814,
                "la-modx": 815,
                "la-monero": 816,
                "la-money-bill": 817,
                "la-money-bill-alt": 818,
                "la-money-bill-wave": 819,
                "la-money-bill-wave-alt": 820,
                "la-money-check": 821,
                "la-money-check-alt": 822,
                "la-monument": 823,
                "la-moon": 824,
                "la-mortar-pestle": 825,
                "la-mosque": 826,
                "la-motorcycle": 827,
                "la-mountain": 828,
                "la-mouse": 829,
                "la-mouse-pointer": 830,
                "la-mug-hot": 831,
                "la-music": 832,
                "la-napster": 833,
                "la-neos": 834,
                "la-network-wired": 835,
                "la-neuter": 836,
                "la-newspaper": 837,
                "la-nimblr": 838,
                "la-node": 839,
                "la-node-js": 840,
                "la-not-equal": 841,
                "la-notes-medical": 842,
                "la-npm": 843,
                "la-ns8": 844,
                "la-nutritionix": 845,
                "la-object-group": 846,
                "la-object-ungroup": 847,
                "la-odnoklassniki": 848,
                "la-odnoklassniki-square": 849,
                "la-oil-can": 850,
                "la-old-republic": 851,
                "la-om": 852,
                "la-opencart": 853,
                "la-openid": 854,
                "la-opera": 855,
                "la-optin-monster": 856,
                "la-orcid": 857,
                "la-osi": 858,
                "la-otter": 859,
                "la-outdent": 860,
                "la-page4": 861,
                "la-pagelines": 862,
                "la-pager": 863,
                "la-paint-brush": 864,
                "la-paint-roller": 865,
                "la-palette": 866,
                "la-palfed": 867,
                "la-pallet": 868,
                "la-paper-plane": 869,
                "la-paperclip": 870,
                "la-parachute-box": 871,
                "la-paragraph": 872,
                "la-parking": 873,
                "la-passport": 874,
                "la-pastafarianism": 875,
                "la-paste": 876,
                "la-patreon": 877,
                "la-pause": 878,
                "la-pause-circle": 879,
                "la-paw": 880,
                "la-paypal": 881,
                "la-peace": 882,
                "la-pen": 883,
                "la-pen-alt": 884,
                "la-pen-fancy": 885,
                "la-pen-nib": 886,
                "la-pen-square": 887,
                "la-pencil-alt": 888,
                "la-pencil-ruler": 889,
                "la-penny-arcade": 890,
                "la-people-carry": 891,
                "la-pepper-hot": 892,
                "la-percent": 893,
                "la-percentage": 894,
                "la-periscope": 895,
                "la-person-booth": 896,
                "la-phabricator": 897,
                "la-phoenix-framework": 898,
                "la-phoenix-squadron": 899,
                "la-phone": 900,
                "la-phone-alt": 901,
                "la-phone-slash": 902,
                "la-phone-square": 903,
                "la-phone-square-alt": 904,
                "la-phone-volume": 905,
                "la-photo-video": 906,
                "la-php": 907,
                "la-pied-piper": 908,
                "la-pied-piper-alt": 909,
                "la-pied-piper-hat": 910,
                "la-pied-piper-pp": 911,
                "la-piggy-bank": 912,
                "la-pills": 913,
                "la-pinterest": 914,
                "la-pinterest-p": 915,
                "la-pinterest-square": 916,
                "la-pizza-slice": 917,
                "la-place-of-worship": 918,
                "la-plane": 919,
                "la-plane-arrival": 920,
                "la-plane-departure": 921,
                "la-play": 922,
                "la-play-circle": 923,
                "la-playstation": 924,
                "la-plug": 925,
                "la-plus": 926,
                "la-plus-circle": 927,
                "la-plus-square": 928,
                "la-podcast": 929,
                "la-poll": 930,
                "la-poll-h": 931,
                "la-poo": 932,
                "la-poo-storm": 933,
                "la-poop": 934,
                "la-portrait": 935,
                "la-pound-sign": 936,
                "la-power-off": 937,
                "la-pray": 938,
                "la-praying-hands": 939,
                "la-prescription": 940,
                "la-prescription-bottle": 941,
                "la-prescription-bottle-alt": 942,
                "la-print": 943,
                "la-procedures": 944,
                "la-product-hunt": 945,
                "la-project-diagram": 946,
                "la-pushed": 947,
                "la-puzzle-piece": 948,
                "la-python": 949,
                "la-qq": 950,
                "la-qrcode": 951,
                "la-question": 952,
                "la-question-circle": 953,
                "la-quidditch": 954,
                "la-quinscape": 955,
                "la-quora": 956,
                "la-quote-left": 957,
                "la-quote-right": 958,
                "la-quran": 959,
                "la-r-project": 960,
                "la-radiation": 961,
                "la-radiation-alt": 962,
                "la-rainbow": 963,
                "la-random": 964,
                "la-raspberry-pi": 965,
                "la-ravelry": 966,
                "la-react": 967,
                "la-reacteurope": 968,
                "la-readme": 969,
                "la-rebel": 970,
                "la-receipt": 971,
                "la-record-vinyl": 972,
                "la-recycle": 973,
                "la-red-river": 974,
                "la-reddit": 975,
                "la-reddit-alien": 976,
                "la-reddit-square": 977,
                "la-redhat": 978,
                "la-redo": 979,
                "la-redo-alt": 980,
                "la-registered": 981,
                "la-remove-format": 982,
                "la-renren": 983,
                "la-reply": 984,
                "la-reply-all": 985,
                "la-replyd": 986,
                "la-republican": 987,
                "la-researchgate": 988,
                "la-resolving": 989,
                "la-restroom": 990,
                "la-retweet": 991,
                "la-rev": 992,
                "la-ribbon": 993,
                "la-ring": 994,
                "la-road": 995,
                "la-robot": 996,
                "la-rocket": 997,
                "la-rocketchat": 998,
                "la-rockrms": 999,
                "la-route": 1000,
                "la-rss": 1001,
                "la-rss-square": 1002,
                "la-ruble-sign": 1003,
                "la-ruler": 1004,
                "la-ruler-combined": 1005,
                "la-ruler-horizontal": 1006,
                "la-ruler-vertical": 1007,
                "la-running": 1008,
                "la-rupee-sign": 1009,
                "la-sad-cry": 1010,
                "la-sad-tear": 1011,
                "la-safari": 1012,
                "la-salesforce": 1013,
                "la-sass": 1014,
                "la-satellite": 1015,
                "la-satellite-dish": 1016,
                "la-save": 1017,
                "la-schlix": 1018,
                "la-school": 1019,
                "la-screwdriver": 1020,
                "la-scribd": 1021,
                "la-scroll": 1022,
                "la-sd-card": 1023,
                "la-search": 1024,
                "la-search-dollar": 1025,
                "la-search-location": 1026,
                "la-search-minus": 1027,
                "la-search-plus": 1028,
                "la-searchengin": 1029,
                "la-seedling": 1030,
                "la-sellcast": 1031,
                "la-sellsy": 1032,
                "la-server": 1033,
                "la-servicestack": 1034,
                "la-shapes": 1035,
                "la-share": 1036,
                "la-share-alt": 1037,
                "la-share-alt-square": 1038,
                "la-share-square": 1039,
                "la-shekel-sign": 1040,
                "la-shield-alt": 1041,
                "la-ship": 1042,
                "la-shipping-fast": 1043,
                "la-shirtsinbulk": 1044,
                "la-shoe-prints": 1045,
                "la-shopping-bag": 1046,
                "la-shopping-basket": 1047,
                "la-shopping-cart": 1048,
                "la-shopware": 1049,
                "la-shower": 1050,
                "la-shuttle-van": 1051,
                "la-sign": 1052,
                "la-sign-in-alt": 1053,
                "la-sign-language": 1054,
                "la-sign-out-alt": 1055,
                "la-signal": 1056,
                "la-signature": 1057,
                "la-sim-card": 1058,
                "la-simplybuilt": 1059,
                "la-sistrix": 1060,
                "la-sitemap": 1061,
                "la-sith": 1062,
                "la-skating": 1063,
                "la-sketch": 1064,
                "la-skiing": 1065,
                "la-skiing-nordic": 1066,
                "la-skull": 1067,
                "la-skull-crossbones": 1068,
                "la-skyatlas": 1069,
                "la-skype": 1070,
                "la-slack": 1071,
                "la-slack-hash": 1072,
                "la-slash": 1073,
                "la-sleigh": 1074,
                "la-sliders-h": 1075,
                "la-slideshare": 1076,
                "la-smile": 1077,
                "la-smile-beam": 1078,
                "la-smile-wink": 1079,
                "la-smog": 1080,
                "la-smoking": 1081,
                "la-smoking-ban": 1082,
                "la-sms": 1083,
                "la-snapchat": 1084,
                "la-snapchat-ghost": 1085,
                "la-snapchat-square": 1086,
                "la-snowboarding": 1087,
                "la-snowflake": 1088,
                "la-snowman": 1089,
                "la-snowplow": 1090,
                "la-socks": 1091,
                "la-solar-panel": 1092,
                "la-sort": 1093,
                "la-sort-alpha-down": 1094,
                "la-sort-alpha-down-alt": 1095,
                "la-sort-alpha-up": 1096,
                "la-sort-alpha-up-alt": 1097,
                "la-sort-amount-down": 1098,
                "la-sort-amount-down-alt": 1099,
                "la-sort-amount-up": 1100,
                "la-sort-amount-up-alt": 1101,
                "la-sort-down": 1102,
                "la-sort-numeric-down": 1103,
                "la-sort-numeric-down-alt": 1104,
                "la-sort-numeric-up": 1105,
                "la-sort-numeric-up-alt": 1106,
                "la-sort-up": 1107,
                "la-soundcloud": 1108,
                "la-sourcetree": 1109,
                "la-spa": 1110,
                "la-space-shuttle": 1111,
                "la-speakap": 1112,
                "la-speaker-deck": 1113,
                "la-spell-check": 1114,
                "la-spider": 1115,
                "la-spinner": 1116,
                "la-splotch": 1117,
                "la-spotify": 1118,
                "la-spray-can": 1119,
                "la-square": 1120,
                "la-square-full": 1121,
                "la-square-root-alt": 1122,
                "la-squarespace": 1123,
                "la-stack-exchange": 1124,
                "la-stack-overflow": 1125,
                "la-stackpath": 1126,
                "la-stamp": 1127,
                "la-star": 1128,
                "la-star-and-crescent": 1129,
                "la-star-half": 1130,
                "la-star-half-alt": 1131,
                "la-star-of-david": 1132,
                "la-star-of-life": 1133,
                "la-staylinked": 1134,
                "la-steam": 1135,
                "la-steam-square": 1136,
                "la-steam-symbol": 1137,
                "la-step-backward": 1138,
                "la-step-forward": 1139,
                "la-stethoscope": 1140,
                "la-sticker-mule": 1141,
                "la-sticky-note": 1142,
                "la-stop": 1143,
                "la-stop-circle": 1144,
                "la-stopwatch": 1145,
                "la-store": 1146,
                "la-store-alt": 1147,
                "la-strava": 1148,
                "la-stream": 1149,
                "la-street-view": 1150,
                "la-strikethrough": 1151,
                "la-stripe": 1152,
                "la-stripe-s": 1153,
                "la-stroopwafel": 1154,
                "la-studiovinari": 1155,
                "la-stumbleupon": 1156,
                "la-stumbleupon-circle": 1157,
                "la-subscript": 1158,
                "la-subway": 1159,
                "la-suitcase": 1160,
                "la-suitcase-rolling": 1161,
                "la-sun": 1162,
                "la-superpowers": 1163,
                "la-superscript": 1164,
                "la-supple": 1165,
                "la-surprise": 1166,
                "la-suse": 1167,
                "la-swatchbook": 1168,
                "la-swift": 1169,
                "la-swimmer": 1170,
                "la-swimming-pool": 1171,
                "la-symfony": 1172,
                "la-synagogue": 1173,
                "la-sync": 1174,
                "la-sync-alt": 1175,
                "la-syringe": 1176,
                "la-table": 1177,
                "la-table-tennis": 1178,
                "la-tablet": 1179,
                "la-tablet-alt": 1180,
                "la-tablets": 1181,
                "la-tachometer-alt": 1182,
                "la-tag": 1183,
                "la-tags": 1184,
                "la-tape": 1185,
                "la-tasks": 1186,
                "la-taxi": 1187,
                "la-teamspeak": 1188,
                "la-teeth": 1189,
                "la-teeth-open": 1190,
                "la-telegram": 1191,
                "la-telegram-plane": 1192,
                "la-temperature-high": 1193,
                "la-temperature-low": 1194,
                "la-tencent-weibo": 1195,
                "la-tenge": 1196,
                "la-terminal": 1197,
                "la-text-height": 1198,
                "la-text-width": 1199,
                "la-th": 1200,
                "la-th-large": 1201,
                "la-th-list": 1202,
                "la-the-red-yeti": 1203,
                "la-theater-masks": 1204,
                "la-themeco": 1205,
                "la-themeisle": 1206,
                "la-thermometer": 1207,
                "la-thermometer-empty": 1208,
                "la-thermometer-full": 1209,
                "la-thermometer-half": 1210,
                "la-thermometer-quarter": 1211,
                "la-thermometer-three-quarters": 1212,
                "la-think-peaks": 1213,
                "la-thumbs-down": 1214,
                "la-thumbs-up": 1215,
                "la-thumbtack": 1216,
                "la-ticket-alt": 1217,
                "la-times": 1218,
                "la-times-circle": 1219,
                "la-tint": 1220,
                "la-tint-slash": 1221,
                "la-tired": 1222,
                "la-toggle-off": 1223,
                "la-toggle-on": 1224,
                "la-toilet": 1225,
                "la-toilet-paper": 1226,
                "la-toolbox": 1227,
                "la-tools": 1228,
                "la-tooth": 1229,
                "la-torah": 1230,
                "la-torii-gate": 1231,
                "la-tractor": 1232,
                "la-trade-federation": 1233,
                "la-trademark": 1234,
                "la-traffic-light": 1235,
                "la-train": 1236,
                "la-tram": 1237,
                "la-transgender": 1238,
                "la-transgender-alt": 1239,
                "la-trash": 1240,
                "la-trash-alt": 1241,
                "la-trash-restore": 1242,
                "la-trash-restore-alt": 1243,
                "la-tree": 1244,
                "la-trello": 1245,
                "la-tripadvisor": 1246,
                "la-trophy": 1247,
                "la-truck": 1248,
                "la-truck-loading": 1249,
                "la-truck-monster": 1250,
                "la-truck-moving": 1251,
                "la-truck-pickup": 1252,
                "la-tshirt": 1253,
                "la-tty": 1254,
                "la-tumblr": 1255,
                "la-tumblr-square": 1256,
                "la-tv": 1257,
                "la-twitch": 1258,
                "la-twitter": 1259,
                "la-twitter-square": 1260,
                "la-typo3": 1261,
                "la-uber": 1262,
                "la-ubuntu": 1263,
                "la-uikit": 1264,
                "la-umbraco": 1265,
                "la-umbrella": 1266,
                "la-umbrella-beach": 1267,
                "la-underline": 1268,
                "la-undo": 1269,
                "la-undo-alt": 1270,
                "la-uniregistry": 1271,
                "la-universal-access": 1272,
                "la-university": 1273,
                "la-unlink": 1274,
                "la-unlock": 1275,
                "la-unlock-alt": 1276,
                "la-untappd": 1277,
                "la-upload": 1278,
                "la-ups": 1279,
                "la-usb": 1280,
                "la-user": 1281,
                "la-user-alt": 1282,
                "la-user-alt-slash": 1283,
                "la-user-astronaut": 1284,
                "la-user-check": 1285,
                "la-user-circle": 1286,
                "la-user-clock": 1287,
                "la-user-cog": 1288,
                "la-user-edit": 1289,
                "la-user-friends": 1290,
                "la-user-graduate": 1291,
                "la-user-injured": 1292,
                "la-user-lock": 1293,
                "la-user-md": 1294,
                "la-user-minus": 1295,
                "la-user-ninja": 1296,
                "la-user-nurse": 1297,
                "la-user-plus": 1298,
                "la-user-secret": 1299,
                "la-user-shield": 1300,
                "la-user-slash": 1301,
                "la-user-tag": 1302,
                "la-user-tie": 1303,
                "la-user-times": 1304,
                "la-users": 1305,
                "la-users-cog": 1306,
                "la-usps": 1307,
                "la-ussunnah": 1308,
                "la-utensil-spoon": 1309,
                "la-utensils": 1310,
                "la-vaadin": 1311,
                "la-vector-square": 1312,
                "la-venus": 1313,
                "la-venus-double": 1314,
                "la-venus-mars": 1315,
                "la-viacoin": 1316,
                "la-viadeo": 1317,
                "la-viadeo-square": 1318,
                "la-vial": 1319,
                "la-vials": 1320,
                "la-viber": 1321,
                "la-video": 1322,
                "la-video-slash": 1323,
                "la-vihara": 1324,
                "la-vimeo": 1325,
                "la-vimeo-square": 1326,
                "la-vimeo-v": 1327,
                "la-vine": 1328,
                "la-vk": 1329,
                "la-vnv": 1330,
                "la-voicemail": 1331,
                "la-volleyball-ball": 1332,
                "la-volume-down": 1333,
                "la-volume-mute": 1334,
                "la-volume-off": 1335,
                "la-volume-up": 1336,
                "la-vote-yea": 1337,
                "la-vr-cardboard": 1338,
                "la-vuejs": 1339,
                "la-walking": 1340,
                "la-wallet": 1341,
                "la-warehouse": 1342,
                "la-water": 1343,
                "la-wave-square": 1344,
                "la-waze": 1345,
                "la-weebly": 1346,
                "la-weibo": 1347,
                "la-weight": 1348,
                "la-weight-hanging": 1349,
                "la-weixin": 1350,
                "la-whatsapp": 1351,
                "la-whatsapp-square": 1352,
                "la-wheelchair": 1353,
                "la-whmcs": 1354,
                "la-wifi": 1355,
                "la-wikipedia-w": 1356,
                "la-wind": 1357,
                "la-window-close": 1358,
                "la-window-maximize": 1359,
                "la-window-minimize": 1360,
                "la-window-restore": 1361,
                "la-windows": 1362,
                "la-wine-bottle": 1363,
                "la-wine-glass": 1364,
                "la-wine-glass-alt": 1365,
                "la-wix": 1366,
                "la-wizards-of-the-coast": 1367,
                "la-wolf-pack-battalion": 1368,
                "la-won-sign": 1369,
                "la-wordpress": 1370,
                "la-wordpress-simple": 1371,
                "la-wpbeginner": 1372,
                "la-wpexplorer": 1373,
                "la-wpforms": 1374,
                "la-wpressr": 1375,
                "la-wrench": 1376,
                "la-x-ray": 1377,
                "la-xbox": 1378,
                "la-xing": 1379,
                "la-xing-square": 1380,
                "la-y-combinator": 1381,
                "la-yahoo": 1382,
                "la-yammer": 1383,
                "la-yandex": 1384,
                "la-yandex-international": 1385,
                "la-yarn": 1386,
                "la-yelp": 1387,
                "la-yen-sign": 1388,
                "la-yin-yang": 1389,
                "la-yoast": 1390,
                "la-youtube": 1391,
                "la-youtube-square": 1392,
                "la-zhihu": 1393
            }
        }
    });

    H5.define("tss.LineAwesomeWeight", {
        $kind: "enum",
        statics: {
            fields: {
                la: "la",
                lal: "lal",
                lar: "lar",
                las: "las",
                lab: "lab"
            }
        },
        $utype: System.String
    });

    H5.define("tss.Modal.TranslationPoint", {
        $kind: "nested class",
        statics: {
            fields: {
                regex: null,
                regexShort: null
            },
            ctors: {
                init: function () {
                    this.regex = new System.Text.RegularExpressions.Regex.ctor("translate\\(([-0-9.].*?)px,\\s?([-0-9.].*?)px\\)");
                    this.regexShort = new System.Text.RegularExpressions.Regex.ctor("translate\\(([-0-9.].*?)px\\)");
                }
            },
            methods: {
                From: function (translation) {
                    try {
                        var m = tss.Modal.TranslationPoint.regex.match(translation);
                        return new tss.Modal.TranslationPoint(System.Double.parse(m.getGroups().get(1).getValue()), System.Double.parse(m.getGroups().get(2).getValue()));
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        var m1 = tss.Modal.TranslationPoint.regexShort.match(translation);
                        return new tss.Modal.TranslationPoint(System.Double.parse(m1.getGroups().get(1).getValue()), System.Double.parse(m1.getGroups().get(1).getValue()));
                    }
                }
            }
        },
        fields: {
            X: 0,
            Y: 0
        },
        ctors: {
            ctor: function (x, y) {
                if (x === void 0) { x = 0.0; }
                if (y === void 0) { y = 0.0; }

                this.$initialize();
                this.X = x;
                this.Y = y;
            }
        },
        methods: {
            To: function () {
                return System.String.format("translate({0}px,{1}px)", H5.box(this.X, System.Double, System.Double.format, System.Double.getHashCode), H5.box(this.Y, System.Double, System.Double.format, System.Double.getHashCode));
            }
        }
    });

    H5.define("tss.ObservableEvent");

    H5.define("tss.Panel.PanelSide", {
        $kind: "nested enum",
        statics: {
            fields: {
                Far: 0,
                Near: 1
            }
        }
    });

    H5.define("tss.Panel.PanelSize", {
        $kind: "nested enum",
        statics: {
            fields: {
                "tss-panelSize-small": "tss-panelSize-small",
                "tss-panelSize-medium": "tss-panelSize-medium",
                "tss-panelSize-large": "tss-panelSize-large",
                "tss-panelSize-largefixed": "tss-panelSize-largefixed",
                "tss-panelSize-extralarge": "tss-panelSize-extralarge",
                "tss-panelSize-fullwidth": "tss-panelSize-fullwidth"
            }
        },
        $utype: System.String
    });

    H5.define("tss.Parameters", {
        fields: {
            _parameters: null
        },
        props: {
            Keys: {
                get: function () {
                    return this._parameters.Keys;
                }
            },
            Values: {
                get: function () {
                    return this._parameters.Values;
                }
            },
            Count: {
                get: function () {
                    return this._parameters.Count;
                }
            }
        },
        ctors: {
            ctor: function (parameters) {
                this.$initialize();
                this._parameters = parameters;
            }
        },
        methods: {
            getItem: function (key) {
                return this._parameters.getItem(key);
            },
            ContainsKey: function (key) {
                return this._parameters.containsKey(key);
            },
            TryGetValue: function (key, value) {
                return this._parameters.tryGetValue(key, value);
            },
            SameAs: function (other) {
                var $t, $t1;
                if (other == null) {
                    return this._parameters.Count > 0;
                }
                if (other._parameters.Count !== this._parameters.Count) {
                    return false;
                }
                if (other._parameters.Count === 0 && this._parameters.Count === 0) {
                    return true;
                } else {
                    $t = H5.getEnumerator(this._parameters);
                    try {
                        while ($t.moveNext()) {
                            var key = $t.Current;
                            var val = { };
                            if (!other._parameters.tryGetValue(key.key, val) || !H5.rE(val.v, key.value)) {
                                return false;
                            }
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    $t1 = H5.getEnumerator(other._parameters);
                    try {
                        while ($t1.moveNext()) {
                            var key1 = $t1.Current;
                            var val1 = { };
                            if (!this._parameters.tryGetValue(key1.key, val1) || !H5.rE(val1.v, key1.value)) {
                                return false;
                            }
                        }
                    } finally {
                        if (H5.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                }

                return true;
            },
            GetEnumerator: function () {
                return this._parameters.GetEnumerator().$clone();
            },
            With: function (key, value) {
                this._parameters.setItem(key, value);
                return this;
            },
            Remove: function (key) {
                this._parameters.remove(key);
                return this;
            },
            ToQueryString: function () {
                return System.Linq.Enumerable.from(this._parameters, System.Collections.Generic.KeyValuePair$2(System.String,System.String)).any() ? "?" + (H5.toArray(System.Linq.Enumerable.from(this._parameters, System.Collections.Generic.KeyValuePair$2(System.String,System.String)).select(function (p) {
                            return (p.key || "") + "=" + (encodeURIComponent(p.value) || "");
                        })).join("&") || "") : "";
            },
            Clone: function () {
                return new tss.Parameters(System.Linq.Enumerable.from(this._parameters, System.Collections.Generic.KeyValuePair$2(System.String,System.String)).toDictionary(function (kv) {
                        return kv.key;
                    }, function (kv) {
                        return kv.value;
                    }, System.String, System.String));
            }
        }
    });

    H5.define("tss.Pivot.PivotEvent", {
        $kind: "nested class",
        fields: {
            CurrentPivot: null,
            TargetPivot: null
        },
        ctors: {
            ctor: function (currentPivot, targetPivot) {
                this.$initialize();
                this.CurrentPivot = currentPivot;
                this.TargetPivot = targetPivot;
            }
        }
    });

    H5.define("tss.Pivot.Tab", {
        $kind: "nested class",
        fields: {
            Id: null,
            TitleCreator: null,
            ContentCreator: null,
            Content: null,
            CanCacheContent: false
        },
        ctors: {
            ctor: function (id, titleCreator, contentCreator, cached) {
                if (cached === void 0) { cached = false; }

                this.$initialize();
                this.Id = id;
                this.CanCacheContent = cached;
                this.ContentCreator = contentCreator;
                this.TitleCreator = titleCreator;
            }
        },
        methods: {
            RenderContent: function () {
                if (this.CanCacheContent && H5.is(this.Content, System.Object)) {
                    return this.Content;
                } else {
                    this.Content = this.ContentCreator().tss$IC$Render();
                    return this.Content;
                }
            },
            RenderTitle: function () {
                return this.TitleCreator().tss$IC$Render();
            }
        }
    });

    H5.define("tss.PivotX", {
        statics: {
            methods: {
                Pivot: function (pivot, id, titleCreator, contentCreator, cached) {
                    if (cached === void 0) { cached = false; }
                    return pivot.Add(new tss.Pivot.Tab(id, titleCreator, contentCreator, cached));
                }
            }
        }
    });

    H5.define("tss.PossibleObservableHelpers", {
        statics: {
            methods: {
                /**
                 * Is this type one that either is directly an IObservable&lt;T&gt; or one that is derived from one?
                 *
                 * @static
                 * @public
                 * @this tss.PossibleObservableHelpers
                 * @memberof tss.PossibleObservableHelpers
                 * @param   {System.Type}    type
                 * @return  {boolean}
                 */
                IsObservable: function (type) {
                    return H5.is(tss.PossibleObservableHelpers.TryToGetFirstWrappedValueFromAnIsObservable(type), System.Object);
                },
                /**
                 * If the specified 'source' object implements any IObservable&lt;T&gt; interface then the 'receiver' Action will be registered with it via ObserveFutureChanges - this will be a no-op for a null
                 'source' but the 'receiver' delegate must not be null
                 *
                 * @static
                 * @public
                 * @this tss.PossibleObservableHelpers
                 * @memberof tss.PossibleObservableHelpers
                 * @param   {System.Object}    source      
                 * @param   {System.Action}    receiver
                 * @return  {boolean}
                 */
                ObserveFutureChangesIfObservable: function (source, receiver) {
                    return tss.PossibleObservableHelpers.UpdateObservingStatusIfObservable(source, receiver, true);
                },
                /**
                 * If the specified 'source' object implements any IObservable&lt;T&gt; interface then the 'receiver' Action will be unregistered with it via StopObserving - this will be a no-op for a null
                 'source' but the 'receiver' delegate must not be null
                 *
                 * @static
                 * @public
                 * @this tss.PossibleObservableHelpers
                 * @memberof tss.PossibleObservableHelpers
                 * @param   {System.Object}    source      
                 * @param   {System.Action}    receiver
                 * @return  {boolean}
                 */
                StopObservingIfObservable: function (source, receiver) {
                    return tss.PossibleObservableHelpers.UpdateObservingStatusIfObservable(source, receiver, false);
                },
                TryToGetFirstWrappedValueFromAnIsObservable: function (type) {
                    var $t;
                    if (type == null) {
                        throw new System.ArgumentNullException.$ctor1("type");
                    }
                    var wrappedValueType = { };

                    if (tss.PossibleObservableHelpers.IsAnIObservableInterface(type, wrappedValueType)) {
                        return wrappedValueType.v;
                    }

                    $t = H5.getEnumerator(H5.Reflection.getInterfaces(type));
                    try {
                        while ($t.moveNext()) {
                            var i = $t.Current;
                            if (tss.PossibleObservableHelpers.IsAnIObservableInterface(i, wrappedValueType)) {
                                return wrappedValueType.v;
                            }
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return null;
                },
                IsAnIObservableInterface: function (type, wrappedValueType) {
                    var $t;
                    if (type == null) {
                        throw new System.ArgumentNullException.$ctor1("type");
                    }

                    if (H5.Reflection.isGenericType(type) && (H5.rE(H5.Reflection.getGenericTypeDefinition(type), tss.IOBS))) {
                        wrappedValueType.v = ($t = H5.Reflection.getGenericArguments(type))[System.Array.index(0, $t)];
                        return true;
                    }
                    wrappedValueType.v = null;
                    return false;
                },
                UpdateObservingStatusIfObservable: function (source, receiver, listenForFutureChanges) {
                    if (H5.staticEquals(receiver, null)) {
                        throw new System.ArgumentNullException.$ctor1("receiver");
                    }

                    if (source == null) {
                        return false;
                    }

                    var wrappedValueTypeIfSourceIsAnObserverable = tss.PossibleObservableHelpers.TryToGetFirstWrappedValueFromAnIsObservable(H5.getType(source));
                    if (wrappedValueTypeIfSourceIsAnObserverable == null) {
                        return false;
                    }

                    var methodName = listenForFutureChanges ? "HookCallbackForFutureChanges" : "UnhookCallbackForFutureChanges";
                    var unboundMethod = H5.Reflection.getMembers(tss.PossibleObservableHelpers, 8, 40 | 256, methodName);
                    var boundMethod = H5.Reflection.midel(H5.Reflection.makeGenericMethod(unboundMethod, [wrappedValueTypeIfSourceIsAnObserverable]), null)(H5.unbox(source), receiver);
                    return true;
                },
                HookCallbackForFutureChanges: function (T, observable, receiver) {
                    observable["tss$IOBS$" + H5.getTypeAlias(T) + "$ObserveFutureChanges"](receiver);
                },
                UnhookCallbackForFutureChanges: function (T, observable, receiver) {
                    observable["tss$IOBS$" + H5.getTypeAlias(T) + "$StopObserving"](receiver);
                }
            }
        }
    });

    H5.define("tss.ProgressModal", {
        fields: {
            _modalHost: null,
            _titleHost: null,
            _messageHost: null,
            _progressHost: null,
            _footerHost: null,
            _progressIndicator: null,
            _spinner: null,
            _isSpinner: false
        },
        ctors: {
            init: function () {
                this._isSpinner = true;
            },
            ctor: function () {
                this.$initialize();
                this._titleHost = tss.ICX.WidthStretch(tss.Raw, tss.UI.Raw$1());
                this._messageHost = tss.ICX.WidthStretch(tss.Raw, tss.UI.Raw$1());
                this._footerHost = tss.ICX.WidthStretch(tss.Raw, tss.UI.Raw$1());
                this._progressHost = tss.UI.Raw$1();
                this._spinner = tss.ICX.Margin(tss.Spinner, tss.UI.Spinner().Large(), tss.usX.px$1(8));
                this._progressHost.Content$1(this._spinner);
                this._progressIndicator = tss.UI.ProgressIndicator();
                this._isSpinner = true;
                this._modalHost = tss.LayerExtensions.Content(tss.Modal, tss.UI.Modal$1().Blocking().NoLightDismiss().HideCloseButton().CenterContent(), tss.ICTX.Children$6(tss.S, tss.ICX.WidthStretch(tss.S, tss.ICX.AlignCenter(tss.S, tss.UI.Stack())), [this._titleHost, this._progressHost, this._messageHost, this._footerHost]));

            }
        },
        methods: {
            Show: function () {
                this._modalHost.Show();
                return this;
            },
            ShowEmbedded: function () {
                return this._modalHost.ShowEmbedded();
            },
            Hide: function () {
                this._modalHost.Hide();
                return this;
            },
            Message: function (message) {
                this._messageHost.Content$1(tss.UI.TextBlock(message));
                return this;
            },
            Message$1: function (message) {
                this._messageHost.Content$1(message);
                return this;
            },
            Title: function (title) {
                this._titleHost.Content$1(tss.ICX.PaddingBottom(tss.txt, tss.ICX.PaddingTop(tss.txt, tss.txtX.Primary(tss.txt, tss.ITFX.SemiBold(tss.txt, tss.UI.TextBlock(title))), tss.usX.px$1(16)), tss.usX.px$1(8)));
                return this;
            },
            Title$1: function (title) {
                this._titleHost.Content$1(title);
                return this;
            },
            Progress$1: function (percent) {
                if (this._isSpinner) {
                    this._progressHost.Content$1(this._progressIndicator);
                    this._isSpinner = false;
                }
                this._progressIndicator.Progress$1(percent);
                return this;
            },
            Progress: function (position, total) {
                return this.Progress$1(100.0 * position / total);
            },
            ProgressIndeterminated: function () {
                if (this._isSpinner) {
                    this._progressHost.Content$1(this._progressIndicator);
                    this._isSpinner = false;
                }
                this._progressIndicator.Indeterminated();
                return this;
            },
            ProgressSpin: function () {
                if (!this._isSpinner) {
                    this._progressHost.Content$1(this._spinner);
                    this._isSpinner = true;
                }
                return this;
            },
            WithCancel: function (onCancel, btnCancel) {
                if (btnCancel === void 0) { btnCancel = null; }
                var button = tss.UI.Button$1().SetText("Cancel").SetIcon$2(1218).Danger();
                !H5.staticEquals(btnCancel, null) ? btnCancel(button) : null;
                button.OnClick(function (b, __) {
                    onCancel(b);
                });
                tss.ICX.PaddingTop(tss.Raw, this._footerHost, tss.usX.px$1(16)).Content$1(tss.ICX.AlignCenter(tss.Button, button));
                return this;
            }
        }
    });

    /** @namespace Tesserae */

    /**
     * This is essentially a type alias for a typed array that may be present on method parameters to specify that the method will not mutate the data. It only exists at compile time, at runtime the reference
     will be the underlying array. This means that there is no cost to casting to this type from an array (so even very large arrays may be cast to it without there being any worries regarding performance
     and whether every element will be visited and copied during the translation).
     It is somewhat similar to the ReadOnlyCollection return when AsReadOnly() is called on a List - it may only be used to indicate that the receiver of the read only reference will not change the data, it
     does not guarantee that the data itself is immutable (if something still holds a reference to the mutable array then changing that content will result in those changes appearing through the read only
     wrapper).
     *
     * @public
     * @class tss.ROA
     * @implements  System.Collections.Generic.IEnumerable$1
     */
    H5.define("tss.ROA", function (T) { return {
        inherits: [System.Collections.Generic.IEnumerable$1(T)],
        statics: {
            methods: {
                op_Implicit: function (data) {
                    return data;
                }
            }
        },
        fields: {
            Length: 0
        },
        alias: ["GetEnumerator", ["System$Collections$Generic$IEnumerable$1$" + H5.getTypeAlias(T) + "$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"]],
        methods: {
            System$Collections$IEnumerable$GetEnumerator: function () {
                return null;
            }
        }
    }; });

    H5.define("tss.Require", {
        statics: {
            fields: {
                singleCall: null
            },
            ctors: {
                init: function () {
                    this.singleCall = new tss.SingleSemaphoreSlim();
                }
            },
            methods: {
                LoadStyleAsync: function (styles) {
                    if (styles === void 0) { styles = []; }
                    for (var i = 0; i < styles.length; i = (i + 1) | 0) {
                        var url = styles[System.Array.index(i, styles)];
                        var existingStyle = document.querySelector(System.String.format("link[href^='{0}']", [url]));
                        if (existingStyle == null) {
                            var l = document.createElement("link");
                            l.rel = "stylesheet";
                            l.href = url;
                            document.head.appendChild(l);
                        }
                    }
                },
                LoadScriptAsync: function (libraries) {
                    var $s = 0,
                        $t1, 
                        $t2, 
                        $tr2, 
                        $jff, 
                        $tcs = new H5.TCS(), 
                        $rv, 
                        tcs, 
                        $ae, 
                        $ae1, 
                        $ab = H5.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $s = H5.STEP([0,1,2,3,4,5], $s);
                                    switch ($s) {
                                        case 0: {
                                            if (libraries === void 0) { libraries = []; }
                                            $t1 = tss.Require.singleCall.WaitAsync();
                                            $s = 1;
                                            if ($t1.isC()) {
                                                continue;
                                            }
                                            $t1.c($ab);
                                            return;
                                        }
                                        case 1: {
                                            $t1.gAR();
                                            $s = 2;
                                            continue;
                                        }
                                        case 2: {
                                            tcs = new System.Threading.Tasks.TaskCompletionSource();
                                            tss.Require.LoadScriptAsync$1(function () {
                                                tcs.setResult(true);
                                            }, function (err) {
                                                tcs.setException(new System.Exception(err));
                                            }, false, libraries);
                                            $t2 = tcs.task;
                                            $s = 3;
                                            if ($t2.isC()) {
                                                continue;
                                            }
                                            $t2.c($ab);
                                            return;
                                        }
                                        case 3: {
                                            $tr2 = $t2.gAR();
                                            $s = 4;
                                            continue;
                                        }
                                        case 4: {
                                            tss.Require.singleCall.Release();

                                            if ($jff > -1) {
                                                $s = $jff;
                                                $jff = null;
                                            } else if ($ae) {
                                                $tcs.sE($ae);
                                                return;
                                            } else if (H5.isDefined($rv)) {
                                                $tcs.sR($rv);
                                                return;
                                            }
                                            $s = 5;
                                            continue;
                                        }
                                        case 5: {
                                            $tcs.sR(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.sR(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($ae1) {
                                $ae = System.Exception.create($ae1);
                                if ($s >= 2 && $s <= 3) {
                                    $s = 4;
                                    $ab();
                                    return;
                                }
                                $tcs.sE($ae);
                            }
                        }, arguments);

                    $ab();
                    return $tcs.task;
                },
                LoadScriptAsync$1: function (onComplete, onFail, isModule, libraries) {
                    var $t;
                    if (libraries === void 0) { libraries = []; }
                    var OnScriptLoaded = null;
                    var loadedCount = 0;
                    OnScriptLoaded = function (e) {
                        loadedCount = (loadedCount + 1) | 0;
                        if (loadedCount === libraries.length) {
                            !H5.staticEquals(onComplete, null) ? onComplete() : null;
                        }
                    };
                    for (var i = 0; i < libraries.length; i = (i + 1) | 0) {
                        var url = { v : libraries[System.Array.index(i, libraries)] };
                        var existingLib = document.querySelector(System.String.format("script[src^='{0}']", [url.v]));
                        if (existingLib != null) {
                            loadedCount = (loadedCount + 1) | 0;
                        } else {
                            var script = ($t = document.createElement("script"), $t.type = isModule ? "module" : "text/javascript", $t.src = url.v, $t.async = true, $t.onerror = (function ($me, url) {
                                return function (e) {
                                    !H5.staticEquals(onFail, null) ? onFail(url.v) : null;
                                    loadedCount = (loadedCount + 1) | 0;
                                    if (loadedCount === libraries.length) {
                                        !H5.staticEquals(onComplete, null) ? onComplete() : null;
                                    }
                                };
                            })(this, url), $t.onload = OnScriptLoaded, $t);
                            try {
                                document.head.appendChild(script);
                            } catch ($e1) {
                                $e1 = System.Exception.create($e1);
                                !H5.staticEquals(onFail, null) ? onFail(url.v) : null;
                                loadedCount = (loadedCount + 1) | 0;
                            }
                        }
                    }
                    if (loadedCount === libraries.length) {
                        !H5.staticEquals(onComplete, null) ? onComplete() : null;
                    }


                },
                LoadModuleAsync: function (libraries) {
                    var $s = 0,
                        $t1, 
                        $t2, 
                        $tr2, 
                        $jff, 
                        $tcs = new H5.TCS(), 
                        $rv, 
                        tcs, 
                        $ae, 
                        $ae1, 
                        $ab = H5.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $s = H5.STEP([0,1,2,3,4,5], $s);
                                    switch ($s) {
                                        case 0: {
                                            if (libraries === void 0) { libraries = []; }
                                            $t1 = tss.Require.singleCall.WaitAsync();
                                            $s = 1;
                                            if ($t1.isC()) {
                                                continue;
                                            }
                                            $t1.c($ab);
                                            return;
                                        }
                                        case 1: {
                                            $t1.gAR();
                                            $s = 2;
                                            continue;
                                        }
                                        case 2: {
                                            tcs = new System.Threading.Tasks.TaskCompletionSource();
                                            tss.Require.LoadScriptAsync$1(function () {
                                                tcs.setResult(true);
                                            }, function (err) {
                                                tcs.setException(new System.Exception(err));
                                            }, true, libraries);
                                            $t2 = tcs.task;
                                            $s = 3;
                                            if ($t2.isC()) {
                                                continue;
                                            }
                                            $t2.c($ab);
                                            return;
                                        }
                                        case 3: {
                                            $tr2 = $t2.gAR();
                                            $s = 4;
                                            continue;
                                        }
                                        case 4: {
                                            tss.Require.singleCall.Release();

                                            if ($jff > -1) {
                                                $s = $jff;
                                                $jff = null;
                                            } else if ($ae) {
                                                $tcs.sE($ae);
                                                return;
                                            } else if (H5.isDefined($rv)) {
                                                $tcs.sR($rv);
                                                return;
                                            }
                                            $s = 5;
                                            continue;
                                        }
                                        case 5: {
                                            $tcs.sR(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.sR(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($ae1) {
                                $ae = System.Exception.create($ae1);
                                if ($s >= 2 && $s <= 3) {
                                    $s = 4;
                                    $ab();
                                    return;
                                }
                                $tcs.sE($ae);
                            }
                        }, arguments);

                    $ab();
                    return $tcs.task;
                }
            }
        }
    });

    H5.define("tss.ResizeObserver", {
        statics: {
            methods: {
                GetHeight: function (element) {
                    var height = window.getComputedStyle(element).height;
                    if (System.String.isNullOrEmpty(height)) {
                        return 0;
                    }
                    return System.Single.parse(System.String.replaceAll(height, "px", ""));
                },
                GetWidth: function (element) {
                    var width = window.getComputedStyle(element).width;
                    if (System.String.isNullOrEmpty(width)) {
                        return 0;
                    }
                    return System.Single.parse(System.String.replaceAll(width, "px", ""));
                }
            }
        },
        fields: {
            OnResizeElement: null,
            OnResize: null,
            resizeObserver: null,
            pending: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                try {
                    this.CreateRO();
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    this.pending = H5.fn.bind(this, function (_o1) {
                            _o1.add(H5.fn.cacheBind(this, this.CreateRO));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(Function)).ctor());
                    tss.tX.fireAndForget(tss.Require.LoadScriptAsync(["./assets/js/resizeobserver.js"]).continueWith(H5.fn.bind(this, function (t) {
                        var $t;
                        if (t.isCompleted()) {
                            var p = this.pending;
                            this.pending = null;
                            $t = H5.getEnumerator(p);
                            try {
                                while ($t.moveNext()) {
                                    var a = $t.Current;
                                    a();
                                }
                            } finally {
                                if (H5.is($t, System.IDisposable)) {
                                    $t.System$IDisposable$Dispose();
                                }
                            }
                        }
                    })));
                }
            }
        },
        methods: {
            CreateRO: function () {
                var resize = H5.fn.cacheBind(this, this.DoResize);
                this.resizeObserver = new ResizeObserver(entries => resize(entries));
            },
            Observe: function (element) {
                if (this.pending == null) {
                    H5.unbox(this.resizeObserver).observe(element);
                } else {
                    this.pending.add(H5.fn.bind(this, function () {
                        this.Observe(element);
                    }));
                }
            },
            StopObserving: function (element) {
                if (this.pending == null) {
                    H5.unbox(this.resizeObserver).unobserve(element);
                } else {
                    this.pending.add(H5.fn.bind(this, function () {
                        this.StopObserving(element);
                    }));
                }
            },
            Disconnect: function () {
                if (this.pending == null) {
                    H5.unbox(this.resizeObserver).disconnect();
                } else {
                    this.pending.add(H5.fn.cacheBind(this, this.Disconnect));
                }
            },
            DoResize: function (entries) {
                var $t;
                if (!H5.staticEquals(this.OnResizeElement, null)) {
                    for (var i = 0; i < entries.length; i = (i + 1) | 0) {
                        var entry = entries[System.Array.index(i, entries)];
                        this.OnResizeElement(entry);
                    }
                }

                !H5.staticEquals(($t = this.OnResize), null) ? $t() : null;
            }
        }
    });

    H5.define("tss.Router", {
        statics: {
            fields: {
                _currentState: null,
                _beforeNavigate: null,
                _onWillNavigate: null,
                _transformRoute: null,
                _initialized: false,
                _registedRoutesMappedToActions: null,
                _paths: null,
                _routesToTryMatchingOnLocationChanged: null
            },
            events: {
                Navigated: null,
                NotMatched: null
            },
            ctors: {
                init: function () {
                    this._transformRoute = function (s) {
                        return s;
                    };
                    this._initialized = false;
                    this._registedRoutesMappedToActions = new (System.Collections.Generic.Dictionary$2(System.String,Function)).ctor();
                    this._paths = new (System.Collections.Generic.Dictionary$2(System.String,System.String)).ctor();
                }
            },
            methods: {
                OnBeforeNavigate: function (onBeforeNavigate) {
                    tss.Router._beforeNavigate = onBeforeNavigate;
                },
                OnTransformRoutes: function (transformRoute) {
                    tss.Router._transformRoute = transformRoute;
                },
                OnWíllNavigate: function (onWillNavigate) {
                    tss.Router._onWillNavigate = onWillNavigate;
                },
                OnNavigated: function (onNavigated) {
                    tss.Router.addNavigated(onNavigated);
                },
                OnNotMatched: function (notMatched) {
                    tss.Router.addNotMatched(notMatched);
                },
                Initialize: function () {
                    if (!tss.Router._initialized) {
                        
    window.history.pushState = ( f => function pushState(){
        var ret = f.apply(this, arguments);
        window.dispatchEvent(new Event('pushstate'));
        window.dispatchEvent(new Event('locationchange'));
        return ret;
    })(window.history.pushState);

    window.history.replaceState = ( f => function replaceState(){
        var ret = f.apply(this, arguments);
        window.dispatchEvent(new Event('replacestate'));
        return ret;
    })(window.history.replaceState);

    window.addEventListener('popstate',()=>{
        window.dispatchEvent(new Event('locationchange'))
    });

                        window.addEventListener("locationchange", function (_) {
                            tss.Router.LocationChanged(false);
                        });
                    }
                    tss.Router._initialized = true;
                },
                Push: function (path) {
                    if (tss.Router.AlreadyThere(path)) {
                        return;
                    }

                    if (tss.Router._currentState == null) {
                        tss.Router._currentState = new tss.Router.State.ctor(path);
                    } else {
                        tss.Router._currentState = tss.Router._currentState.WithFullPath(path);
                    }

                    window.history.pushState(null, "", path);
                },
                Replace: function (path) {
                    if (tss.Router.AlreadyThere(path)) {
                        return;
                    }

                    if (tss.Router._currentState == null) {
                        tss.Router._currentState = new tss.Router.State.ctor(path);
                    } else {
                        tss.Router._currentState = tss.Router._currentState.WithFullPath(path);
                    }

                    window.history.replaceState(null, "", path);
                },
                GetQueryParameters: function () {
                    return tss.Router._currentState.Parameters;
                },
                SetQueryParameters: function (parameters) {
                    var url = tss.Router._currentState.FullPath;

                    var queryStart = System.String.indexOf(url, "?");
                    if (queryStart > 0) {
                        url = url.substr(0, queryStart);
                    }
                    tss.Router._currentState = new tss.Router.State.$ctor1(parameters, tss.Router._currentState.RouteName, tss.Router._currentState.Path, (url || "") + (parameters.ToQueryString() || ""));
                    window.history.replaceState(null, "", tss.Router._currentState.FullPath);

                },
                ReplaceQueryParameters: function (updateFn) {
                    var newParameters = updateFn(tss.Router._currentState.Parameters.Clone());

                    if (newParameters.SameAs(tss.Router._currentState.Parameters)) {
                        return;
                    }
                    tss.Router.SetQueryParameters(newParameters);
                },
                /**
                 * Sometimes it is desirable to forcibly rematch the current path as if it was a new location, even if it hasn't changed - depending upon how routing is configured and how views are rendererd according to those routes, this can be useful after
                 all of the routes have been configured as the callback from the 'Refresh' method. It can also useful if you have a path that you would like to replace with another without performing a redirect that will appear in the browser history; in that
                 case, call Replace and then this. Note: This is equivalent to calling the Navigate method and with the current window.location.hash value and specifying reload as true.
                 *
                 * @static
                 * @public
                 * @this tss.Router
                 * @memberof tss.Router
                 * @return  {void}
                 */
                ForceMatchCurrent: function () {
                    tss.Router.Navigate(window.location.hash, true);
                },
                /**
                 * This will navigate the User to the specified path (pushing a new entry in the navigation history stack, so the current page / URL will appear in the browser's back button history) unless the path is that which the browser is already at - this
                 behaviour may be overridden by setting the optional <b /> to true (this does not force a reload of the page, it forces a reload of the current view by firing an OnNavigated event whether the specified path is 'new' or not)
                 *
                 * @static
                 * @public
                 * @this tss.Router
                 * @memberof tss.Router
                 * @param   {string}     path      
                 * @param   {boolean}    reload
                 * @return  {void}
                 */
                Navigate: function (path, reload) {
                    if (reload === void 0) { reload = false; }
                    var ExecuteTheNavigation = null;
                    if (H5.is(tss.Router._onWillNavigate, System.Object)) {
                        if (!tss.Router._onWillNavigate(path)) {
                            return;
                        }
                    }

                    var windowLocationSaysAlreadyThere = tss.Router.AlreadyThere(path);
                    ExecuteTheNavigation = function () {
                        if (!windowLocationSaysAlreadyThere) {
                            window.location.href = path;
                            return;
                        }

                        tss.Router.LocationChanged(reload);
                    };

                    if (reload) {
                        ExecuteTheNavigation();
                        return;
                    }

                    var currentStateSaysAlreadyThere = tss.Router.AlreadyThere$1(tss.Router._currentState != null ? tss.Router._currentState.FullPath : null, path);

                    if (windowLocationSaysAlreadyThere || currentStateSaysAlreadyThere) {
                        return;
                    }

                    ExecuteTheNavigation();


                },
                AlreadyThere: function (path) {
                    return H5.rE(window.location.href, path) || H5.rE(window.location.hash, path);
                },
                AlreadyThere$1: function (candidatePath, hashOrPath) {
                    if (System.String.isNullOrEmpty(candidatePath)) {
                        return false;
                    }

                    if (H5.rE(candidatePath, hashOrPath)) {
                        return true;
                    }

                    if (System.String.startsWith(hashOrPath, "#") || System.String.startsWith(candidatePath, "#")) {
                        var ix1 = System.String.indexOf(candidatePath, String.fromCharCode(35));
                        var ix2 = System.String.indexOf(hashOrPath, String.fromCharCode(35));

                        if (ix1 < 0 && ix2 < 0) {
                            return false;
                        }

                        return H5.rE(candidatePath.substr(ix1), hashOrPath.substr(ix2));
                    }

                    return false;
                },
                LowerCasePath: function (path) {
                    var $t;
                    var sb = new System.Text.StringBuilder();
                    var inParameter = false;
                    $t = H5.getEnumerator(path);
                    try {
                        while ($t.moveNext()) {
                            var c = $t.Current;
                            if (c === 58) {
                                inParameter = true;
                                sb.append(String.fromCharCode(58));
                            } else if (c === 47) {
                                inParameter = false;
                                sb.append(String.fromCharCode(47));
                            } else {
                                if (inParameter) {
                                    sb.append(String.fromCharCode(c));
                                } else {
                                    sb.append(String.fromCharCode(String.fromCharCode(c).toLowerCase().charCodeAt(0)));
                                }
                            }
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return sb.toString();
                },
                Register$5: function (uniqueIdentifier, path, actionTask) {
                    tss.Router.Register$3(uniqueIdentifier, path, function (p) {
                        tss.tX.fireAndForget(actionTask(p));
                    });
                },
                Register: function (uniquePath, action) {
                    tss.Router.Register$3(uniquePath, uniquePath, action);
                },
                Register$1: function (uniquePath, action) {
                    tss.Router.Register$4(uniquePath, uniquePath, action, false);
                },
                Register$2: function (uniquePath, actionTask) {
                    tss.Router.Register$3(uniquePath, uniquePath, function (p) {
                        tss.tX.fireAndForget(actionTask(p));
                    });
                },
                Register$3: function (uniqueIdentifier, path, action, replace) {
                    if (replace === void 0) { replace = false; }
                    tss.Router.Register$4(uniqueIdentifier, path, function (p) {
                        action(p);
                        return true;
                    }, replace);
                },
                Register$4: function (uniqueIdentifier, path, action, replace) {
                    if (replace === void 0) { replace = false; }
                    if (System.String.startsWith(path, "#")) {
                        path = System.String.trimStart(path, [35]);
                    }
                    if (!System.String.startsWith(path, "/")) {
                        path = "/" + (path || "");
                    }

                    uniqueIdentifier = uniqueIdentifier.toLowerCase();

                    if (tss.Router._registedRoutesMappedToActions.containsKey(uniqueIdentifier) && !replace) {
                        return;
                    }

                    var lowerCaseID = System.String.format("path-{0}", [uniqueIdentifier]);
                    var upperCaseID = System.String.format("PATH-{0}", [uniqueIdentifier.toUpperCase()]);

                    tss.Router._paths.remove(uniqueIdentifier);
                    tss.Router._paths.remove(lowerCaseID);
                    tss.Router._paths.remove(upperCaseID);
                    tss.Router._registedRoutesMappedToActions.remove(uniqueIdentifier);
                    tss.Router._registedRoutesMappedToActions.remove(lowerCaseID);
                    tss.Router._registedRoutesMappedToActions.remove(upperCaseID);

                    var lowerCasePath = tss.Router.LowerCasePath(path);

                    if (!H5.rE(path, lowerCasePath)) {
                        tss.Router._registedRoutesMappedToActions.setItem(lowerCaseID, action);
                        tss.Router._paths.setItem(lowerCaseID, lowerCasePath);
                    }

                    tss.Router._registedRoutesMappedToActions.setItem(uniqueIdentifier, action);
                    tss.Router._paths.setItem(uniqueIdentifier, path);

                    tss.Router.Refresh();
                },
                Refresh: function (onDone) {
                    var $t;
                    if (onDone === void 0) { onDone = null; }
                    if (!tss.Router._initialized) {
                        return;
                    }

                    tss.Router._routesToTryMatchingOnLocationChanged = new (System.Collections.Generic.List$1(tss.Router.Route)).ctor();
                    $t = H5.getEnumerator(tss.Router._paths);
                    try {
                        while ($t.moveNext()) {
                            var kv = $t.Current;
                            tss.Router._routesToTryMatchingOnLocationChanged.add(new tss.Router.Route(kv.key, kv.value, tss.Router._registedRoutesMappedToActions.getItem(kv.key)));
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    !H5.staticEquals(onDone, null) ? onDone() : null;
                },
                Exists: function (hashRoute) {
                    hashRoute = System.Linq.Enumerable.from(System.String.split(hashRoute, System.Array.init([63], System.Char).map(function (i) {{ return String.fromCharCode(i); }}), 2), System.String).first();
                    return System.Linq.Enumerable.from(tss.Router._paths.Values, System.String).contains(hashRoute);
                },
                LocationChanged: function (allowCallbackEvenIfLocationUnchanged) {
                    var $t, $t1, $t2;
                    var currentPathFromHash = (($t = window.location.hash, $t != null ? $t : ""));

                    if (H5.is(tss.Router._transformRoute, System.Object)) {
                        currentPathFromHash = tss.Router._transformRoute(currentPathFromHash);
                    }

                    if (!allowCallbackEvenIfLocationUnchanged && (H5.is(tss.Router._currentState, System.Object))) {
                        if (tss.Router.AlreadyThere$1(tss.Router._currentState.FullPath, currentPathFromHash)) {
                            return;
                        }
                    }

                    currentPathFromHash = System.String.trimStart(currentPathFromHash, [35]);

                    var p = System.String.split(currentPathFromHash, System.Array.init([63], System.Char).map(function (i) {{ return String.fromCharCode(i); }}), 2);

                    var hash = (p.length === 0) ? "" : p[System.Array.index(0, p)];

                    var par = new (System.Collections.Generic.Dictionary$2(System.String,System.String)).ctor();
                    var parts = System.String.split(hash, System.Array.init([47], System.Char).map(function (i) {{ return String.fromCharCode(i); }}), null, 1);

                    $t1 = H5.getEnumerator(tss.Router._routesToTryMatchingOnLocationChanged);
                    try {
                        while ($t1.moveNext()) {
                            var r = $t1.Current;
                            par.clear();
                            if (!r.IsMatch(parts, par)) {
                                continue;
                            }

                            if (p.length > 1) {
                                var query = p[System.Array.index(1, p)];
                                var queryParts = System.String.split(query, System.Array.init([38], System.Char).map(function (i) {{ return String.fromCharCode(i); }}), null, 1);
                                $t2 = H5.getEnumerator(queryParts);
                                try {
                                    while ($t2.moveNext()) {
                                        var qp = $t2.Current;
                                        var qpp = System.String.split(qp, System.Array.init([61], System.Char).map(function (i) {{ return String.fromCharCode(i); }}), null, 1);
                                        if (qpp.length === 1) {
                                            par.setItem(decodeURIComponent(qpp[System.Array.index(0, qpp)]), "");
                                        } else {
                                            par.setItem(decodeURIComponent(qpp[System.Array.index(0, qpp)]), decodeURIComponent(qpp[System.Array.index(1, qpp)]));
                                        }
                                    }
                                } finally {
                                    if (H5.is($t2, System.IDisposable)) {
                                        $t2.System$IDisposable$Dispose();
                                    }
                                }
                            }

                            var toState = { v : new tss.Router.State.$ctor1(new tss.Parameters(par), r.Name, hash, window.location.href) };

                            if ((H5.staticEquals(tss.Router._beforeNavigate, null)) || tss.Router._beforeNavigate(toState.v, tss.Router._currentState)) {
                                var oldState = { v : tss.Router._currentState };
                                tss.Router._currentState = toState.v;
                                if (r.Activate(toState.v.Parameters)) {
                                    !H5.staticEquals(tss.Router.Navigated, null) ? tss.Router.Navigated(toState.v, oldState.v) : null;
                                } else {
                                    tss.Router._currentState = oldState.v;
                                    if ((H5.is(tss.Router._currentState, System.Object)) && !System.String.isNullOrEmpty(tss.Router._currentState.FullPath)) {
                                        window.location.href = tss.Router._currentState.FullPath;
                                    }
                                }
                            } else {
                                if ((H5.is(tss.Router._currentState, System.Object)) && !System.String.isNullOrEmpty(tss.Router._currentState.FullPath)) {
                                    window.location.href = tss.Router._currentState.FullPath;
                                }
                            }
                            return;
                        }
                    } finally {
                        if (H5.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }

                    !H5.staticEquals(tss.Router.NotMatched, null) ? tss.Router.NotMatched(tss.ROA(System.String).op_Implicit(parts)) : null;
                }
            }
        }
    });

    H5.define("tss.Router.Route", {
        $kind: "nested class",
        fields: {
            _parts: null,
            _action: null,
            Name: null,
            Path: null
        },
        ctors: {
            ctor: function (name, path, action) {
                this.$initialize();
                this.Name = name;
                this.Path = path;

                this._parts = System.Linq.Enumerable.from(System.String.split(path, System.Array.init([47], System.Char).map(function (i) {{ return String.fromCharCode(i); }}), null, 1), System.String).select(function (p) {
                        return new tss.Router.RoutePart(p);
                    }).ToArray(tss.Router.RoutePart);
                this._action = action;
            }
        },
        methods: {
            IsMatch: function (parts, parameters) {
                if (parts.length === this._parts.length) {
                    var isMatch = true;
                    for (var i = 0; i < this._parts.length; i = (i + 1) | 0) {
                        var variable = { };
                        isMatch = !!(isMatch & this._parts[System.Array.index(i, this._parts)].IsMatch(parts[System.Array.index(i, parts)], variable));
                        if (isMatch && this._parts[System.Array.index(i, this._parts)].IsVariable) {
                            parameters.add(this._parts[System.Array.index(i, this._parts)].VariableName, variable.v);
                        }
                        if (!isMatch) {
                            return false;
                        }
                    }

                    return isMatch;
                } else {
                    return false;
                }
            },
            Activate: function (parameters) {
                return this._action(parameters);
            }
        }
    });

    H5.define("tss.Router.RoutePart", {
        $kind: "nested class",
        fields: {
            Path: null,
            IsVariable: false,
            VariableName: null
        },
        ctors: {
            ctor: function (path) {
                this.$initialize();
                this.Path = path;
                this.IsVariable = System.String.startsWith(path, ":");
                this.VariableName = this.IsVariable ? System.String.trimStart(path, [58]) : "";
            }
        },
        methods: {
            IsMatch: function (pathPart, capturedVariable) {
                if (this.IsVariable) {
                    capturedVariable.v = pathPart;
                    return true;
                } else {
                    capturedVariable.v = null;
                    return System.String.equals(pathPart, this.Path, 3);
                }
            }
        }
    });

    H5.define("tss.Router.State", {
        $kind: "nested class",
        fields: {
            Parameters: null,
            RouteName: null,
            Path: null,
            FullPath: null
        },
        ctors: {
            ctor: function (fullPath) {
                tss.Router.State.$ctor1.call(this, null, null, null, fullPath);
            },
            $ctor1: function (parameters, routeName, path, fullPath) {
                this.$initialize();
                this.Parameters = parameters;
                this.RouteName = routeName;
                this.Path = path;
                this.FullPath = fullPath;
            }
        },
        methods: {
            WithFullPath: function (fullPath) {
                return new tss.Router.State.$ctor1(this.Parameters, this.RouteName, this.Path, fullPath);
            }
        }
    });

    H5.define("tss.ScrollBar", {
        statics: {
            fields: {
                LiveHandles: null
            },
            ctors: {
                init: function () {
                    this.LiveHandles = new (System.Collections.Generic.List$1(tss.ScrollBar.Handle)).ctor();
                }
            },
            methods: {
                GetCorrectContainer: function (element) {
                    if (element.classList.contains("tss-invisible-scrollbar")) {
                        var sbc = element.getElementsByClassName("simplebar-content");
                        if (sbc.length > 0) {
                            return sbc[0];
                        } else {
                            return element;
                        }
                    } else {
                        return element;
                    }
                },
                EnableInvisibleScroll: function (element, horizontal) {
                    if (horizontal === void 0) { horizontal = false; }
                    var h = new tss.ScrollBar.Handle(element, horizontal);
                    tss.ScrollBar.LiveHandles.add(h);
                    return h;
                },
                DisableInvisibleScroll: function (element) {
                    var previous = System.Linq.Enumerable.from(tss.ScrollBar.LiveHandles, tss.ScrollBar.Handle).where(function (i) {
                            return H5.rE(i._element, element);
                        }).firstOrDefault(null, null);

                    if (H5.is(previous, System.Object)) {
                        previous.Disable();
                    }

                    tss.ScrollBar.LiveHandles.RemoveAll(function (i) {
                        return H5.rE(i._element, element);
                    });
                },
                InvisibleScroll: function (T, component, horizontal) {
                    if (horizontal === void 0) { horizontal = false; }
                    var element = component.tss$IC$Render();

                    tss.domObs.WhenMounted(element, function () {
                        var targetElement = tss.S.GetItem(component);
                        tss.ScrollBar.EnableInvisibleScroll(targetElement, horizontal);
                    });

                    return component;
                },
                InvisibleScroll$2: function (element) {
                    tss.ScrollBar.EnableInvisibleScroll(element);
                    return element;
                },
                InvisibleScroll$1: function (element) {
                    tss.ScrollBar.EnableInvisibleScroll(element);
                    return element;
                },
                Scroll: function (T, component) {
                    var element = component.tss$IC$Render();

                    tss.domObs.WhenMounted(element, function () {
                        var targetElement = tss.S.GetItem(component);
                        targetElement.style.overflowY = "auto";
                    });

                    return component;
                },
                ScrollY: function (T, component) {
                    var element = component.tss$IC$Render();

                    tss.domObs.WhenMounted(element, function () {
                        var targetElement = tss.S.GetItem(component);
                        targetElement.style.overflowY = "auto";
                        targetElement.style.overflowX = "hidden";
                    });

                    return component;
                },
                ScrollX: function (T, component) {
                    var element = component.tss$IC$Render();

                    tss.domObs.WhenMounted(element, function () {
                        var targetElement = tss.S.GetItem(component);
                        targetElement.style.overflowY = "hidden";
                        targetElement.style.overflowX = "auto";
                    });

                    return component;
                },
                ScrollBoth: function (T, component) {
                    var element = component.tss$IC$Render();

                    tss.domObs.WhenMounted(element, function () {
                        var targetElement = tss.S.GetItem(component);
                        targetElement.style.overflowY = "auto";
                        targetElement.style.overflowX = "auto";
                    });

                    return component;
                },
                RemoveInvisibleScroll: function (element) {
                    tss.ScrollBar.DisableInvisibleScroll(element);
                    return element;
                },
                ForceRecalculateAll: function () {
                    tss.ScrollBar.LiveHandles.RemoveAll(function (h) {
                        return !h.IsAlive();
                    });
                    tss.ScrollBar.LiveHandles.ForEach(function (h) {
                        h.Recalculate();
                    });
                }
            }
        }
    });

    H5.define("tss.ScrollBar.Handle", {
        $kind: "nested class",
        fields: {
            scrollbar: null,
            _element: null
        },
        ctors: {
            ctor: function (element, horizontal) {
                this.$initialize();
                if (horizontal) {
                    element.style.setProperty("overflow-x", "none", "important");
                } else {
                    element.style.setProperty("overflow-y", "none", "important");
                }

                element.classList.add("tss-invisible-scrollbar");
                this._element = element;
                this.scrollbar = new SimpleBar(element);
            }
        },
        methods: {
            Recalculate: function () {
                try {
                    H5.unbox(this.scrollbar).recalculate();
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }
            },
            IsAlive: function () {
                return document.body.contains(H5.unbox(this.scrollbar).el);
            },
            Disable: function () {
                try {
                    H5.unbox(this.scrollbar).unMount();
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }
            }
        }
    });

    H5.define("tss.SectionStackX", {
        statics: {
            methods: {
                Section: function (stack, component, grow, customPadding) {
                    if (grow === void 0) { grow = false; }
                    if (customPadding === void 0) { customPadding = ""; }
                    stack.AddAnimated(component, grow, customPadding);
                    return stack;
                },
                Title: function (stack, component) {
                    stack.AddAnimatedTitle(component);
                    return stack;
                },
                Children: function (stack, children) {
                    if (children === void 0) { children = []; }
                    children.forEach(function (x) {
                            tss.SectionStackX.Section(stack, x);
                        });
                    return stack;
                }
            }
        }
    });

    H5.define("tss.SettableObservable", {
        statics: {
            methods: {
                /**
                 * This is a static factory method that lets us leverage type inference (so you can create a SettableObservable from an item without having to repeat the type name of the item when creating the instance)
                 *
                 * @static
                 * @public
                 * @this tss.SettableObservable
                 * @memberof tss.SettableObservable
                 * @param   {Function}                                          T           
                 * @param   {T}                                                 value       
                 * @param   {System.Collections.Generic.IEqualityComparer$1}    comparer
                 * @return  {tss.SettableObservableT}
                 */
                For: function (T, value, comparer) {
                    if (comparer === void 0) { comparer = null; }
                    return new (tss.SettableObservableT(T))(value, comparer);
                }
            }
        }
    });

    H5.define("tss.SingleSemaphoreSlim", {
        fields: {
            _queue: null
        },
        props: {
            IsPending: {
                get: function () {
                    return this._queue.Count > 0;
                }
            }
        },
        ctors: {
            init: function () {
                this._queue = new (System.Collections.Generic.Queue$1(System.Threading.Tasks.TaskCompletionSource)).ctor();
            },
            ctor: function () {
                this.$initialize();

            }
        },
        methods: {
            WaitAsync: function () {
                var completion = new System.Threading.Tasks.TaskCompletionSource();

                this._queue.Enqueue(completion);

                if (this._queue.Count === 1) {
                    completion.setResult(true);
                }

                return completion.task;
            },
            Release: function () {
                if (this._queue.Count === 0) {
                    throw new System.InvalidOperationException.$ctor1("Nothing to release");
                }

                var completion = this._queue.Dequeue();

                if (!completion.task.isCompleted() && !completion.task.isCanceled() && !completion.task.isFaulted()) {
                    throw new System.InvalidOperationException.$ctor1("Released wrong semaphore");
                }

                if (this._queue.Count > 0) {
                    this._queue.Peek().setResult(true);
                }
            }
        }
    });

    H5.define("tss.sz", {
        $kind: "enum",
        statics: {
            fields: {
                Pixels: 0,
                Percent: 1
            }
        }
    });

    H5.define("tss.Slider.SliderOrientation", {
        $kind: "nested enum",
        statics: {
            fields: {
                Vertical: 0,
                Horizontal: 1
            }
        }
    });

    H5.define("tss.Spinner.CircleSize", {
        $kind: "nested enum",
        statics: {
            fields: {
                XSmall: 0,
                Small: 1,
                Medium: 2,
                Large: 3
            }
        }
    });

    H5.define("tss.Spinner.LabelPosition", {
        $kind: "nested enum",
        statics: {
            fields: {
                Above: 0,
                Below: 1,
                Left: 2,
                Right: 3
            }
        }
    });

    H5.define("tss.S.ItemSize", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new tss.S.ItemSize(); }
            }
        },
        fields: {
            Type: "default",
            Value: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = H5.addHash([3537886620, this.Type, this.Value]);
                return h;
            },
            equals: function (o) {
                if (!H5.is(o, tss.S.ItemSize)) {
                    return false;
                }
                return H5.equals(this.Type, o.Type) && H5.equals(this.Value, o.Value);
            },
            $clone: function (to) {
                var s = to || new tss.S.ItemSize();
                s.Type = this.Type;
                s.Value = this.Value;
                return s;
            }
        }
    });

    H5.define("tss.S.Orientation", {
        $kind: "nested enum",
        statics: {
            fields: {
                Vertical: 0,
                Horizontal: 1,
                VerticalReverse: 2,
                HorizontalReverse: 3
            }
        }
    });

    H5.define("tss.ISX", {
        statics: {
            methods: {
                Background: function (T, element, color) {
                    var $t;
                    element.tss$IHBG$Background = ($t = color, $t != null ? $t : "");
                    return element;
                },
                Foreground: function (T, element, color) {
                    var $t;
                    element.tss$IHFG$Foreground = ($t = color, $t != null ? $t : "");
                    return element;
                },
                Padding: function (T, element, padding) {
                    var $t;
                    element.tss$IHMP$Padding = ($t = padding, $t != null ? $t : "");
                    return element;
                },
                Margin: function (T, element, margin) {
                    var $t;
                    element.tss$IHMP$Margin = ($t = margin, $t != null ? $t : "");
                    return element;
                }
            }
        }
    });

    H5.define("tss.tX", {
        statics: {
            fields: {
                /**
                 * Bridge doesn't support Task.Completed, so we'll fill in something similar
                 *
                 * @static
                 * @public
                 * @memberof tss.tX
                 * @function Completed
                 * @type System.Threading.Tasks.Task
                 */
                Completed: null
            },
            ctors: {
                init: function () {
                    this.Completed = tss.tX.BuildCompletedTask();
                }
            },
            methods: {
                /**
                 * Sometimes you want to start a Task and not await its results but there is an analyzer that presumes that code that creates Tasks and doesn't await them is incorrect
                 (and, often, it is right) but sometimes you don't want to await and you don't want the analyzer telling you about it - in that case, use this extensions method
                 *
                 * @static
                 * @public
                 * @this tss.tX
                 * @memberof tss.tX
                 * @param   {System.Threading.Tasks.Task}    task
                 * @return  {void}
                 */
                fireAndForget: function (task) {
                    if (task == null) {
                        return;
                    }
                    System.Threading.Tasks.Task.run(function () {
                        var $s = 0,
                            $t1, 
                            $jff, 
                            $tcs = new H5.TCS(), 
                            $rv, 
                            age, 
                            exception, 
                            first, 
                            $t, 
                            inner, 
                            E, 
                            $ae, 
                            $ae1, 
                            $ab = H5.fn.bind(this, function () {
                                try {
                                    for (;;) {
                                        $s = H5.STEP([1,2,3,4,5,6], $s);
                                        switch ($s) {

                                            case 1: {
                                                $t1 = task;
                                                $s = 2;
                                                if ($t1.isC()) {
                                                    continue;
                                                }
                                                $t1.c($ab);
                                                return;
                                            }
                                            case 2: {
                                                $t1.gAR();
                                                $s = 6;
                                                continue;
                                            }
                                            case 3: {
                                                $ae = null;
                                                $s = 6;
                                                continue;
                                            }
                                            case 4: {
                                                if (age.innerExceptions.Count === 1) {
                                                    exception = System.Linq.Enumerable.from(age.innerExceptions, System.Exception).single();
                                                    if (!H5.rE(H5.getType(exception), System.OperationCanceledException)) {
                                                        console.error("Error running FireAndForget Task\n" + (H5.toString(exception) || ""));
                                                        console.error(exception);
                                                    }
                                                } else {
                                                    first = true;
                                                    $t = H5.getEnumerator(age.innerExceptions);
                                                    try {
                                                        while ($t.moveNext()) {
                                                            inner = $t.Current;
                                                            if (!H5.rE(H5.getType(inner), System.OperationCanceledException)) {
                                                                if (first) {
                                                                    console.error("Multiple errors running FireAndForget Task:");
                                                                    first = false;
                                                                }
                                                                console.error("\t\tInner exception\n" + (H5.toString(inner) || ""));
                                                                console.error(inner);
                                                            }
                                                        }
                                                    } finally {
                                                        if (H5.is($t, System.IDisposable)) {
                                                            $t.System$IDisposable$Dispose();
                                                        }
                                                    }
                                                }
                                                $ae = null;
                                                $s = 6;
                                                continue;
                                            }
                                            case 5: {
                                                console.error("Error running FireAndForget Task\n" + (H5.toString(E) || ""));
                                                console.error(E);
                                                $ae = null;
                                                $s = 6;
                                                continue;
                                            }
                                            case 6: {
                                                $tcs.sR(null);
                                                return;
                                            }
                                            default: {
                                                $tcs.sR(null);
                                                return;
                                            }
                                        }
                                    }
                                } catch($ae1) {
                                    $ae = System.Exception.create($ae1);
                                    if ( $s >= 1 && $s <= 2 ) {
                                        if (H5.is($ae, System.OperationCanceledException)) {
                                            $s = 3;
                                            $ab();
                                            return;
                                        } else if (H5.is($ae, System.AggregateException)) {
                                            age = $ae;
                                            $s = 4;
                                            $ab();
                                            return;
                                        } else {
                                            E = $ae;
                                            $s = 5;
                                            $ab();
                                            return;
                                        }
                                    }
                                    $tcs.sE($ae);
                                }
                            }, arguments);

                        $ab();
                        return $tcs.task;
                    });
                },
                Unwrap: function (T, task) {
                    var $s = 0,
                        $t1, 
                        $tr1, 
                        $t2, 
                        $tr2, 
                        $jff, 
                        $tcs = new H5.TCS(), 
                        $rv, 
                        onceUnwrappedTask, 
                        $ae, 
                        $ab = H5.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $s = H5.STEP([0,1,2], $s);
                                    switch ($s) {
                                        case 0: {
                                            $t1 = task;
                                            $s = 1;
                                            if ($t1.isC()) {
                                                continue;
                                            }
                                            $t1.c($ab);
                                            return;
                                        }
                                        case 1: {
                                            $tr1 = $t1.gAR();
                                            onceUnwrappedTask = $tr1;
                                            $t2 = onceUnwrappedTask;
                                            $s = 2;
                                            if ($t2.isC()) {
                                                continue;
                                            }
                                            $t2.c($ab);
                                            return;
                                        }
                                        case 2: {
                                            $tr2 = $t2.gAR();
                                            $tcs.sR($tr2);
                                            return;
                                        }
                                        default: {
                                            $tcs.sR(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($ae1) {
                                $ae = System.Exception.create($ae1);
                                $tcs.sE($ae);
                            }
                        }, arguments);

                    $ab();
                    return $tcs.task;
                },
                /**
                 * Given multiple tasks that return values, wait for them all to complete and then return a tuple that contains the results (in the order in which the tasks are specified as method arguments).
                 If any of the tasks fail then an exception will be raised.
                 *
                 * @static
                 * @public
                 * @this tss.tX
                 * @memberof tss.tX
                 * @param   {Function}                         T1    
                 * @param   {Function}                         T2    
                 * @param   {System.Threading.Tasks.Task$1}    t1    
                 * @param   {System.Threading.Tasks.Task$1}    t2
                 * @return  {System.Threading.Tasks.Task$1}
                 */
                WhenAll: function (T1, T2, t1, t2) {
                    var $s = 0,
                        $t1, 
                        $jff, 
                        $tcs = new H5.TCS(), 
                        $rv, 
                        $ae, 
                        $ab = H5.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $s = H5.STEP([0,1], $s);
                                    switch ($s) {
                                        case 0: {
                                            $t1 = System.Threading.Tasks.Task.whenAll(t1, t2);
                                            $s = 1;
                                            if ($t1.isC()) {
                                                continue;
                                            }
                                            $t1.c($ab);
                                            return;
                                        }
                                        case 1: {
                                            $t1.gAR();
                                            $tcs.sR(new (System.ValueTuple$2(T1,T2)).$ctor1(t1.getResult(), t2.getResult()));
                                            return;
                                        }
                                        default: {
                                            $tcs.sR(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($ae1) {
                                $ae = System.Exception.create($ae1);
                                $tcs.sE($ae);
                            }
                        }, arguments);

                    $ab();
                    return $tcs.task;
                },
                /**
                 * Given multiple tasks that return values, wait for them all to complete and then return a tuple that contains the results (in the order in which the tasks are specified as method arguments).
                 If any of the tasks fail then an exception will be raised.
                 *
                 * @static
                 * @public
                 * @this tss.tX
                 * @memberof tss.tX
                 * @param   {Function}                         T1    
                 * @param   {Function}                         T2    
                 * @param   {Function}                         T3    
                 * @param   {System.Threading.Tasks.Task$1}    t1    
                 * @param   {System.Threading.Tasks.Task$1}    t2    
                 * @param   {System.Threading.Tasks.Task$1}    t3
                 * @return  {System.Threading.Tasks.Task$1}
                 */
                WhenAll$1: function (T1, T2, T3, t1, t2, t3) {
                    var $s = 0,
                        $t1, 
                        $jff, 
                        $tcs = new H5.TCS(), 
                        $rv, 
                        $ae, 
                        $ab = H5.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $s = H5.STEP([0,1], $s);
                                    switch ($s) {
                                        case 0: {
                                            $t1 = System.Threading.Tasks.Task.whenAll(t1, t2, t3);
                                            $s = 1;
                                            if ($t1.isC()) {
                                                continue;
                                            }
                                            $t1.c($ab);
                                            return;
                                        }
                                        case 1: {
                                            $t1.gAR();
                                            $tcs.sR(new (System.ValueTuple$3(T1,T2,T3)).$ctor1(t1.getResult(), t2.getResult(), t3.getResult()));
                                            return;
                                        }
                                        default: {
                                            $tcs.sR(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($ae1) {
                                $ae = System.Exception.create($ae1);
                                $tcs.sE($ae);
                            }
                        }, arguments);

                    $ab();
                    return $tcs.task;
                },
                /**
                 * Given multiple tasks that return values, wait for them all to complete and then return a tuple that contains the results (in the order in which the tasks are specified as method arguments).
                 If any of the tasks fail then an exception will be raised.
                 *
                 * @static
                 * @public
                 * @this tss.tX
                 * @memberof tss.tX
                 * @param   {Function}                         T1    
                 * @param   {Function}                         T2    
                 * @param   {Function}                         T3    
                 * @param   {Function}                         T4    
                 * @param   {System.Threading.Tasks.Task$1}    t1    
                 * @param   {System.Threading.Tasks.Task$1}    t2    
                 * @param   {System.Threading.Tasks.Task$1}    t3    
                 * @param   {System.Threading.Tasks.Task$1}    t4
                 * @return  {System.Threading.Tasks.Task$1}
                 */
                WhenAll$2: function (T1, T2, T3, T4, t1, t2, t3, t4) {
                    var $s = 0,
                        $t1, 
                        $jff, 
                        $tcs = new H5.TCS(), 
                        $rv, 
                        $ae, 
                        $ab = H5.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $s = H5.STEP([0,1], $s);
                                    switch ($s) {
                                        case 0: {
                                            $t1 = System.Threading.Tasks.Task.whenAll(t1, t2, t3, t4);
                                            $s = 1;
                                            if ($t1.isC()) {
                                                continue;
                                            }
                                            $t1.c($ab);
                                            return;
                                        }
                                        case 1: {
                                            $t1.gAR();
                                            $tcs.sR(new (System.ValueTuple$4(T1,T2,T3,T4)).$ctor1(t1.getResult(), t2.getResult(), t3.getResult(), t4.getResult()));
                                            return;
                                        }
                                        default: {
                                            $tcs.sR(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($ae1) {
                                $ae = System.Exception.create($ae1);
                                $tcs.sE($ae);
                            }
                        }, arguments);

                    $ab();
                    return $tcs.task;
                },
                /**
                 * Given multiple tasks that return values, wait for them all to complete and then return a tuple that contains the results (in the order in which the tasks are specified as method arguments).
                 If any of the tasks fail then an exception will be raised.
                 *
                 * @static
                 * @public
                 * @this tss.tX
                 * @memberof tss.tX
                 * @param   {Function}                         T1    
                 * @param   {Function}                         T2    
                 * @param   {Function}                         T3    
                 * @param   {Function}                         T4    
                 * @param   {Function}                         T5    
                 * @param   {System.Threading.Tasks.Task$1}    t1    
                 * @param   {System.Threading.Tasks.Task$1}    t2    
                 * @param   {System.Threading.Tasks.Task$1}    t3    
                 * @param   {System.Threading.Tasks.Task$1}    t4    
                 * @param   {System.Threading.Tasks.Task$1}    t5
                 * @return  {System.Threading.Tasks.Task$1}
                 */
                WhenAll$3: function (T1, T2, T3, T4, T5, t1, t2, t3, t4, t5) {
                    var $s = 0,
                        $t1, 
                        $jff, 
                        $tcs = new H5.TCS(), 
                        $rv, 
                        $ae, 
                        $ab = H5.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $s = H5.STEP([0,1], $s);
                                    switch ($s) {
                                        case 0: {
                                            $t1 = System.Threading.Tasks.Task.whenAll(t1, t2, t3, t4, t5);
                                            $s = 1;
                                            if ($t1.isC()) {
                                                continue;
                                            }
                                            $t1.c($ab);
                                            return;
                                        }
                                        case 1: {
                                            $t1.gAR();
                                            $tcs.sR(new (System.ValueTuple$5(T1,T2,T3,T4,T5)).$ctor1(t1.getResult(), t2.getResult(), t3.getResult(), t4.getResult(), t5.getResult()));
                                            return;
                                        }
                                        default: {
                                            $tcs.sR(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($ae1) {
                                $ae = System.Exception.create($ae1);
                                $tcs.sE($ae);
                            }
                        }, arguments);

                    $ab();
                    return $tcs.task;
                },
                /**
                 * Given multiple tasks that return values, wait for them all to complete and then return a tuple that contains the results (in the order in which the tasks are specified as method arguments).
                 If any of the tasks fail then an exception will be raised.
                 *
                 * @static
                 * @public
                 * @this tss.tX
                 * @memberof tss.tX
                 * @param   {Function}                         T1    
                 * @param   {Function}                         T2    
                 * @param   {Function}                         T3    
                 * @param   {Function}                         T4    
                 * @param   {Function}                         T5    
                 * @param   {Function}                         T6    
                 * @param   {System.Threading.Tasks.Task$1}    t1    
                 * @param   {System.Threading.Tasks.Task$1}    t2    
                 * @param   {System.Threading.Tasks.Task$1}    t3    
                 * @param   {System.Threading.Tasks.Task$1}    t4    
                 * @param   {System.Threading.Tasks.Task$1}    t5    
                 * @param   {System.Threading.Tasks.Task$1}    t6
                 * @return  {System.Threading.Tasks.Task$1}
                 */
                WhenAll$4: function (T1, T2, T3, T4, T5, T6, t1, t2, t3, t4, t5, t6) {
                    var $s = 0,
                        $t1, 
                        $jff, 
                        $tcs = new H5.TCS(), 
                        $rv, 
                        $ae, 
                        $ab = H5.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $s = H5.STEP([0,1], $s);
                                    switch ($s) {
                                        case 0: {
                                            $t1 = System.Threading.Tasks.Task.whenAll(t1, t2, t3, t4, t5, t6);
                                            $s = 1;
                                            if ($t1.isC()) {
                                                continue;
                                            }
                                            $t1.c($ab);
                                            return;
                                        }
                                        case 1: {
                                            $t1.gAR();
                                            $tcs.sR(new (System.ValueTuple$6(T1,T2,T3,T4,T5,T6)).$ctor1(t1.getResult(), t2.getResult(), t3.getResult(), t4.getResult(), t5.getResult(), t6.getResult()));
                                            return;
                                        }
                                        default: {
                                            $tcs.sR(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($ae1) {
                                $ae = System.Exception.create($ae1);
                                $tcs.sE($ae);
                            }
                        }, arguments);

                    $ab();
                    return $tcs.task;
                },
                /**
                 * Given multiple tasks that return values, wait for them all to complete and then return a tuple that contains the results (in the order in which the tasks are specified as method arguments).
                 If any of the tasks fail then an exception will be raised.
                 *
                 * @static
                 * @public
                 * @this tss.tX
                 * @memberof tss.tX
                 * @param   {Function}                         T1    
                 * @param   {Function}                         T2    
                 * @param   {Function}                         T3    
                 * @param   {Function}                         T4    
                 * @param   {Function}                         T5    
                 * @param   {Function}                         T6    
                 * @param   {Function}                         T7    
                 * @param   {System.Threading.Tasks.Task$1}    t1    
                 * @param   {System.Threading.Tasks.Task$1}    t2    
                 * @param   {System.Threading.Tasks.Task$1}    t3    
                 * @param   {System.Threading.Tasks.Task$1}    t4    
                 * @param   {System.Threading.Tasks.Task$1}    t5    
                 * @param   {System.Threading.Tasks.Task$1}    t6    
                 * @param   {System.Threading.Tasks.Task$1}    t7
                 * @return  {System.Threading.Tasks.Task$1}
                 */
                WhenAll$5: function (T1, T2, T3, T4, T5, T6, T7, t1, t2, t3, t4, t5, t6, t7) {
                    var $s = 0,
                        $t1, 
                        $jff, 
                        $tcs = new H5.TCS(), 
                        $rv, 
                        $ae, 
                        $ab = H5.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $s = H5.STEP([0,1], $s);
                                    switch ($s) {
                                        case 0: {
                                            $t1 = System.Threading.Tasks.Task.whenAll(t1, t2, t3, t4, t5, t6, t7);
                                            $s = 1;
                                            if ($t1.isC()) {
                                                continue;
                                            }
                                            $t1.c($ab);
                                            return;
                                        }
                                        case 1: {
                                            $t1.gAR();
                                            $tcs.sR(new (System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7)).$ctor1(t1.getResult(), t2.getResult(), t3.getResult(), t4.getResult(), t5.getResult(), t6.getResult(), t7.getResult()));
                                            return;
                                        }
                                        default: {
                                            $tcs.sR(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($ae1) {
                                $ae = System.Exception.create($ae1);
                                $tcs.sE($ae);
                            }
                        }, arguments);

                    $ab();
                    return $tcs.task;
                },
                /**
                 * Given multiple tasks that return values, wait for them all to complete and then return a tuple that contains the results (in the order in which the tasks are specified as method arguments).
                 If any of the tasks fail then an exception will be raised.
                 *
                 * @static
                 * @public
                 * @this tss.tX
                 * @memberof tss.tX
                 * @param   {Function}                         T1    
                 * @param   {Function}                         T2    
                 * @param   {Function}                         T3    
                 * @param   {Function}                         T4    
                 * @param   {Function}                         T5    
                 * @param   {Function}                         T6    
                 * @param   {Function}                         T7    
                 * @param   {Function}                         T8    
                 * @param   {System.Threading.Tasks.Task$1}    t1    
                 * @param   {System.Threading.Tasks.Task$1}    t2    
                 * @param   {System.Threading.Tasks.Task$1}    t3    
                 * @param   {System.Threading.Tasks.Task$1}    t4    
                 * @param   {System.Threading.Tasks.Task$1}    t5    
                 * @param   {System.Threading.Tasks.Task$1}    t6    
                 * @param   {System.Threading.Tasks.Task$1}    t7    
                 * @param   {System.Threading.Tasks.Task$1}    t8
                 * @return  {System.Threading.Tasks.Task$1}
                 */
                WhenAll$6: function (T1, T2, T3, T4, T5, T6, T7, T8, t1, t2, t3, t4, t5, t6, t7, t8) {
                    var $s = 0,
                        $t1, 
                        $jff, 
                        $tcs = new H5.TCS(), 
                        $rv, 
                        $ae, 
                        $ab = H5.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $s = H5.STEP([0,1], $s);
                                    switch ($s) {
                                        case 0: {
                                            $t1 = System.Threading.Tasks.Task.whenAll(t1, t2, t3, t4, t5, t6, t7, t8);
                                            $s = 1;
                                            if ($t1.isC()) {
                                                continue;
                                            }
                                            $t1.c($ab);
                                            return;
                                        }
                                        case 1: {
                                            $t1.gAR();
                                            $tcs.sR(new (System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,T8)).$ctor1(t1.getResult(), t2.getResult(), t3.getResult(), t4.getResult(), t5.getResult(), t6.getResult(), t7.getResult(), t8.getResult()));
                                            return;
                                        }
                                        default: {
                                            $tcs.sR(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($ae1) {
                                $ae = System.Exception.create($ae1);
                                $tcs.sE($ae);
                            }
                        }, arguments);

                    $ab();
                    return $tcs.task;
                },
                AsTask: function (component) {
                    return System.Threading.Tasks.Task.fromResult(component, tss.IC);
                },
                BuildCompletedTask: function () {
                    var completionSource = new System.Threading.Tasks.TaskCompletionSource();
                    completionSource.setResult({ });
                    return completionSource.task;
                }
            }
        }
    });

    H5.define("tss.Teaching", {
        statics: {
            methods: {
                ShowTooltip: function (showFor, tooltip, animation, placement, hideOnClick) {
                    var interactive = true;

                    var renderedTooltip = tss.UI.DIV([tooltip.tss$IC$Render()]);
                    renderedTooltip.style.display = "block";
                    renderedTooltip.style.overflow = "hidden";
                    renderedTooltip.style.textOverflow = "ellipsis";
                    document.body.appendChild(renderedTooltip);
                    var element = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(showFor).$clone(), element);

                    if (element.v.hasOwnProperty("_tippy")) {
                        element.v._tippy.destroy();
                    }


                    if (animation === "none") {
tippy(                        element.v, { content: renderedTooltip, interactive: interactive, placement: System.Enum.toString(tss.TooltipPlacement, placement), delay: [0,0],  trigger: 'manual', hideOnClick: hideOnClick, appendTo: document.body });
                    } else {
tippy(                        element.v, { content: renderedTooltip, interactive: interactive, placement: System.Enum.toString(tss.TooltipPlacement, placement),  animation: System.Enum.toString(tss.TooltipAnimation, animation), delay: [0,0],  trigger: 'manual', hideOnClick: hideOnClick, appendTo: document.body });
                    }

                    element.v._tippy.show();

                    var hide = function () {
                        if (element.v.hasOwnProperty("_tippy")) {
                            element.v._tippy.destroy();
                        }
                    };
                    tss.ICX.WhenRemoved(tss.IC, showFor, function () {
                        hide();
                    });

                    return hide;
                }
            }
        },
        fields: {
            _condition: null,
            _stepCounter: 0,
            _currentStep: 0,
            _firstDelay: 0,
            _stepDelay: 0,
            _futureSteps: null,
            _completed: null
        },
        ctors: {
            init: function () {
                this._stepCounter = 0;
                this._currentStep = 0;
                this._firstDelay = 500;
                this._stepDelay = 150;
                this._futureSteps = new (System.Collections.Generic.Dictionary$2(System.Int32,Function)).ctor();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            RunIf: function (condition) {
                this._condition = condition;
                var start = { };
                if (this._futureSteps.tryGetValue(0, start)) {
                    start.v();
                }
                return this;
            },
            OnComplete: function (completed) {
                this._completed = completed;
                return this;
            },
            FirstDelay: function (milliseconds) {
                this._firstDelay = milliseconds;
                return this;
            },
            StepDelay: function (milliseconds) {
                this._stepDelay = milliseconds;
                return this;
            },
            RunNow: function () {
                this._condition = function () {
                    return true;
                };
                var start = { };
                if (this._futureSteps.tryGetValue(0, start)) {
                    start.v();
                }
                return this;
            },
            AddStep: function (showFor, tooltip, animation, placement, stepType) {
                if (animation === void 0) { animation = "shift-toward-subtle"; }
                if (placement === void 0) { placement = "top"; }
                if (stepType === void 0) { stepType = 0; }
                var Show = null;
                var MoveNext = null;
                var thisStep = this._stepCounter;
                this._stepCounter = (this._stepCounter + 1) | 0;

                var btnNext = null;
                var pi = null;

                var hideTooltip = null;




                MoveNext = H5.fn.bind(this, function () {
                    !H5.staticEquals(hideTooltip, null) ? hideTooltip() : null;
                    this._currentStep = (this._currentStep + 1) | 0;
                    var action = { };
                    if (this._futureSteps.tryGetValue(this._currentStep, action)) {
                        action.v();
                    }
                });
                Show = H5.fn.bind(this, function () {
                    if (this._condition() && tss.UI.IsMounted$1(showFor)) {
                        if (stepType === tss.Teaching.StepType.NextButton) {
                            var text = this._stepCounter > ((thisStep + 1) | 0) ? "Next" : "Ok";
                            var icon = this._stepCounter > ((thisStep + 1) | 0) ? 242 : 223;
                            btnNext = tss.ICX.PT(tss.Button, tss.ICX.AlignEnd(tss.Button, tss.UI.Button$1(text).SetIcon$2(icon)), 8).Primary();
                            tooltip = tss.ICTX.Children$6(tss.S, tss.UI.VStack(), [tooltip, btnNext]);
                        } else {
                            pi = tss.ICX.H(tss.ProgressIndicator, tss.ICX.WS(tss.ProgressIndicator, tss.UI.ProgressIndicator()), 4);
                            tooltip = tss.ICTX.Children$6(tss.S, tss.UI.VStack(), [tooltip, tss.ICX.PT(tss.ProgressIndicator, pi, 8)]);
                        }

                        hideTooltip = tss.Teaching.ShowTooltip(showFor, tooltip, animation, placement, stepType !== tss.Teaching.StepType.NextButton);
                        if (stepType === tss.Teaching.StepType.NextButton) {
                            btnNext.OnClick$1(function () {
                                MoveNext();
                            });
                        } else {
                            var time = 0;
                            var delay = stepType === tss.Teaching.StepType.After5seconds ? 5000 : 10000;
                            var countdown = H5.fn.bind(this, function () {
                                var $s = 0,
                                    $t1, 
                                    $jff, 
                                    $tcs = new H5.TCS(), 
                                    $rv, 
                                    $ae, 
                                    $ab = H5.fn.bind(this, function () {
                                        try {
                                            for (;;) {
                                                $s = H5.STEP([0,1,2,3], $s);
                                                switch ($s) {
                                                    case 0: {
                                                        if ( time < delay ) {
                                                            $s = 1;
                                                            continue;
                                                        } 
                                                        $s = 3;
                                                        continue;
                                                    }
                                                    case 1: {
                                                        $t1 = System.Threading.Tasks.Task.delay(150);
                                                        $s = 2;
                                                        if ($t1.isC()) {
                                                            continue;
                                                        }
                                                        $t1.c($ab);
                                                        return;
                                                    }
                                                    case 2: {
                                                        $t1.gAR();
                                                        time = (time + 150) | 0;
                                                        pi.Progress(time, delay);

                                                        $s = 0;
                                                        continue;
                                                    }
                                                    case 3: {
                                                        MoveNext();
                                                        $tcs.sR(null);
                                                        return;
                                                    }
                                                    default: {
                                                        $tcs.sR(null);
                                                        return;
                                                    }
                                                }
                                            }
                                        } catch($ae1) {
                                            $ae = System.Exception.create($ae1);
                                            $tcs.sE($ae);
                                        }
                                    }, arguments);

                                $ab();
                                return $tcs.task;
                            });
                            tss.tX.fireAndForget(countdown());
                        }
                    }
                });
                tss.ICX.WhenMounted(tss.IC, showFor, H5.fn.bind(this, function () {
                    if (this._currentStep === thisStep && H5.is(this._condition, System.Object)) {
                        window.setTimeout(function (_) {
                            Show();
                        }, thisStep === 0 ? this._firstDelay : this._stepDelay);
                    } else {
                        this._futureSteps.setItem(thisStep, H5.fn.bind(this, function () {
                            window.setTimeout(function (_) {
                                Show();
                            }, thisStep === 0 ? this._firstDelay : this._stepDelay);
                        }));
                        ;
                    }
                }));

                return this;
            }
        }
    });

    H5.define("tss.Teaching.StepType", {
        $kind: "nested enum",
        statics: {
            fields: {
                NextButton: 0,
                After5seconds: 1,
                After10seconds: 2
            }
        }
    });

    H5.define("tss.TA", {
        $kind: "enum",
        statics: {
            fields: {
                "tss-textalign-left": "tss-textalign-left",
                "tss-textalign-center": "tss-textalign-center",
                "tss-textalign-right": "tss-textalign-right"
            }
        },
        $utype: System.String
    });

    H5.define("tss.txtX", {
        statics: {
            methods: {
                Text: function (T, textBlock, text) {
                    textBlock.Text = text;
                    return textBlock;
                },
                Title: function (T, textBlock, title) {
                    textBlock.Title = title;
                    return textBlock;
                },
                Required: function (T, textBlock) {
                    textBlock.IsRequired = true;
                    return textBlock;
                },
                Wrap: function (T, textBlock) {
                    textBlock.CanWrap = true;
                    return textBlock;
                },
                Ellipsis: function (T, textBlock) {
                    textBlock.EnableEllipsis = true;
                    return textBlock;
                },
                BreakSpaces: function (T, textBlock) {
                    textBlock.EnableBreakSpaces = true;
                    return textBlock;
                },
                NoWrap: function (T, textBlock) {
                    textBlock.CanWrap = false;
                    return textBlock;
                },
                Disabled: function (T, textBlock, value) {
                    if (value === void 0) { value = true; }
                    textBlock.IsEnabled = !value;
                    return textBlock;
                },
                NonSelectable: function (T, textBlock) {
                    textBlock.IsSelectable = false;
                    return textBlock;
                },
                Primary: function (T, textBlock) {
                    textBlock.IsPrimary = true;
                    return textBlock;
                },
                Success: function (T, textBlock) {
                    textBlock.IsSuccess = true;
                    return textBlock;
                },
                Danger: function (T, textBlock) {
                    textBlock.IsDanger = true;
                    return textBlock;
                },
                Secondary: function (T, textBlock) {
                    textBlock.IsSecondary = true;
                    return textBlock;
                }
            }
        }
    });

    H5.define("tss.TS", {
        $kind: "enum",
        statics: {
            fields: {
                "tss-fontsize-tiny": "tss-fontsize-tiny",
                "tss-fontsize-xsmall": "tss-fontsize-xsmall",
                "tss-fontsize-small": "tss-fontsize-small",
                "tss-fontsize-smallplus": "tss-fontsize-smallplus",
                "tss-fontsize-medium": "tss-fontsize-medium",
                "tss-fontsize-mediumplus": "tss-fontsize-mediumplus",
                "tss-fontsize-large": "tss-fontsize-large",
                "tss-fontsize-xlarge": "tss-fontsize-xlarge",
                "tss-fontsize-xxlarge": "tss-fontsize-xxlarge",
                "tss-fontsize-mega": "tss-fontsize-mega"
            }
        },
        $utype: System.String
    });

    H5.define("tss.TW", {
        $kind: "enum",
        statics: {
            fields: {
                "tss-fontweight-regular": "tss-fontweight-regular",
                "tss-fontweight-semibold": "tss-fontweight-semibold",
                "tss-fontweight-bold": "tss-fontweight-bold"
            }
        },
        $utype: System.String
    });

    H5.define("tss.tippy", {
        statics: {
            methods: {
                GetAppendToTarget: function (hostElement) {
                    var child = hostElement;
                    var parent = child.parentElement;

                    while (H5.is(parent, System.Object) && !parent.classList.contains("tippy-content")) {
                        child = parent;
                        parent = parent.parentElement;
                    }

                    if (H5.is(parent, System.Object) && parent.classList.contains("tippy-content")) {
                        return child;
                    }

                    return document.body;
                },
                ShowFor$1: function (hostComponent, tooltip, hide, animation, placement, delayShow, delayHide, maxWidth, arrow, theme) {
                    if (animation === void 0) { animation = "none"; }
                    if (placement === void 0) { placement = "top"; }
                    if (delayShow === void 0) { delayShow = 0; }
                    if (delayHide === void 0) { delayHide = 0; }
                    if (maxWidth === void 0) { maxWidth = 350; }
                    if (arrow === void 0) { arrow = false; }
                    if (theme === void 0) { theme = null; }
                    var rendered = hostComponent.tss$IC$Render();

                    if (!tss.UI.IsMounted(rendered)) {
                        hide.v = function () { };
                        return;
                    }

                    var appendTo = tss.tippy.GetAppendToTarget(rendered);

                    var renderedTooltip = tss.UI.DIV([tooltip.tss$IC$Render()]);
                    renderedTooltip.style.display = "block";
                    renderedTooltip.style.overflow = "hidden";
                    renderedTooltip.style.textOverflow = "ellipsis";
                    document.body.appendChild(renderedTooltip);
                    var element = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(hostComponent).$clone(), element);

                    var onHidden = function () {
                        if (element.v.hasOwnProperty("_tippy")) {
                            element.v._tippy.destroy();
                        }
                    };

                    hide.v = onHidden;

                    onHidden();

                    if (animation === "none") {
tippy(                        element.v, { content: renderedTooltip, interactive: true, interactiveBorder: 8, placement: System.Enum.toString(tss.TooltipPlacement, placement), appendTo: H5.unbox(appendTo), maxWidth: maxWidth, onHidden: onHidden, delay: [delayShow,delayHide], arrow: arrow, theme: theme });
                    } else {
tippy(                        element.v, { content: renderedTooltip, interactive: true, interactiveBorder: 8, placement: System.Enum.toString(tss.TooltipPlacement, placement), animation: System.Enum.toString(tss.TooltipAnimation, animation),  appendTo: H5.unbox(appendTo), maxWidth: maxWidth, onHidden: onHidden, delay: [delayShow,delayHide], arrow: arrow, theme: theme });
                    }


                    element.v._tippy.show();
                    tss.ICX.WhenRemoved(tss.IC, hostComponent, function () {
                        onHidden();
                    });
                },
                ShowFor: function (hostElement, tooltip, hide, animation, placement, delayShow, delayHide, maxWidth, arrow, theme) {
                    if (animation === void 0) { animation = "none"; }
                    if (placement === void 0) { placement = "top"; }
                    if (delayShow === void 0) { delayShow = 0; }
                    if (delayHide === void 0) { delayHide = 0; }
                    if (maxWidth === void 0) { maxWidth = 350; }
                    if (arrow === void 0) { arrow = false; }
                    if (theme === void 0) { theme = null; }
                    if (!tss.UI.IsMounted(hostElement)) {
                        hide.v = function () { };
                        return;
                    }

                    var appendTo = tss.tippy.GetAppendToTarget(hostElement);

                    document.body.appendChild(tooltip);

                    var onHidden = function () {
                        if (hostElement.hasOwnProperty("_tippy")) {
                            hostElement._tippy.destroy();
                        }
                    };

                    hide.v = onHidden;

                    onHidden();

                    if (animation === "none") {
tippy(                        hostElement, { content: tooltip, interactive: true, interactiveBorder: 8, placement: System.Enum.toString(tss.TooltipPlacement, placement), appendTo: H5.unbox(appendTo), maxWidth: maxWidth, onHidden: onHidden, delay: [delayShow,delayHide], arrow: arrow, theme: theme });
                    } else {
tippy(                        hostElement, { content: tooltip, interactive: true, interactiveBorder: 8, placement: System.Enum.toString(tss.TooltipPlacement, placement), animation: System.Enum.toString(tss.TooltipAnimation, animation),  appendTo: H5.unbox(appendTo), maxWidth: maxWidth, onHidden: onHidden, delay: [delayShow,delayHide], arrow: arrow, theme: theme });
                    }


                    hostElement._tippy.show();

                    tss.domObs.WhenRemoved(hostElement, function () {
                        onHidden();
                    });
                },
                HideAll: function () {
                    tippy.hideAll();
                }
            }
        }
    });

    H5.define("tss.Toast.Position", {
        $kind: "nested enum",
        statics: {
            fields: {
                topright: "topright",
                topcenter: "topcenter",
                topleft: "topleft",
                bottomright: "bottomright",
                bottomcenter: "bottomcenter",
                bottomleft: "bottomleft",
                topfull: "topfull",
                bottomfull: "bottomfull"
            }
        },
        $utype: System.String
    });

    H5.define("tss.Toast.Type", {
        $kind: "nested enum",
        statics: {
            fields: {
                success: "success",
                information: "information",
                warning: "warning",
                error: "error"
            }
        },
        $utype: System.String
    });

    H5.define("tss.TooltipAnimation", {
        $kind: "enum",
        statics: {
            fields: {
                none: "none",
                "shift-away-subtle": "shift-away-subtle",
                "shift-toward-subtle": "shift-toward-subtle",
                "scale-subtle": "scale-subtle",
                "perspective-subtle": "perspective-subtle"
            }
        },
        $utype: System.String
    });

    H5.define("tss.TooltipPlacement", {
        $kind: "enum",
        statics: {
            fields: {
                top: "top",
                "top-start": "top-start",
                "top-end": "top-end",
                right: "right",
                "right-start": "right-start",
                "right-end": "right-end",
                bottom: "bottom",
                "bottom-start": "bottom-start",
                "bottom-end": "bottom-end",
                left: "left",
                "left-start": "left-start",
                "left-end": "left-end",
                auto: "auto",
                "auto-start": "auto-start",
                "auto-end": "auto-end"
            }
        },
        $utype: System.String
    });

    H5.define("tss.UI", {
        statics: {
            methods: {
                /**
                 * Helper method to capture the current component inline on it's definition, as an out variable
                 *
                 * @static
                 * @public
                 * @this tss.UI
                 * @memberof tss.UI
                 * @param   {Function}    T            Any component implementing {@link }
                 * @param   {T}           component    
                 * @param   {T}           var          Capture variable
                 * @return  {T}                        itself
                 */
                Var: function (T, component, $var) {
                    $var.v = component;
                    return component;
                },
                Do: function (T, component, action) {
                    action(component);
                    return component;
                },
                If$2: function (condition, ifTrue, ifFalse) {
                    if (ifFalse === void 0) { ifFalse = null; }
                    return condition ? (ifTrue || tss.UI.Raw$1()) : (ifFalse || tss.UI.Raw$1());
                },
                If$1: function (condition, ifTrue, ifFalse) {
                    if (ifFalse === void 0) { ifFalse = null; }
                    return condition ? ((!H5.staticEquals(ifTrue, null) ? ifTrue() : null) || tss.UI.Raw$1()) : (ifFalse || tss.UI.Raw$1());
                },
                If: function (condition, ifTrue, ifFalse) {
                    return condition ? ((!H5.staticEquals(ifTrue, null) ? ifTrue() : null) || tss.UI.Raw$1()) : ((!H5.staticEquals(ifFalse, null) ? ifFalse() : null) || tss.UI.Raw$1());
                },
                /**
                 * Adds an ID to the element representing the component.
                 *
                 * @static
                 * @public
                 * @this tss.UI
                 * @memberof tss.UI
                 * @param   {Function}    T            
                 * @param   {T}           component    
                 * @param   {string}      id
                 * @return  {T}
                 */
                Id: function (T, component, id) {
                    var deferedComponent;
                    if (((deferedComponent = H5.as(component, tss.DC))) != null) {
                        deferedComponent.Container.id = id;
                        return component;
                    }

                    var el = component.tss$IC$Render();
                    el.id = id;
                    return component;
                },
                /**
                 * Adds a CSS class to the element representing the component.
                 *
                 * @static
                 * @public
                 * @this tss.UI
                 * @memberof tss.UI
                 * @param   {Function}    T            
                 * @param   {T}           component    
                 * @param   {string}      className
                 * @return  {T}
                 */
                Class: function (T, component, className) {
                    var deferedComponent;
                    if (((deferedComponent = H5.as(component, tss.DC))) != null) {
                        deferedComponent.Container.classList.add(className);
                        return component;
                    }

                    var el = component.tss$IC$Render();
                    el.classList.add(className);
                    return component;
                },
                /**
                 * Remove a CSS class to the element representing the component.
                 *
                 * @static
                 * @public
                 * @this tss.UI
                 * @memberof tss.UI
                 * @param   {Function}    T            
                 * @param   {T}           component    
                 * @param   {string}      className
                 * @return  {T}
                 */
                RemoveClass: function (T, component, className) {
                    var deferedComponent;
                    if (((deferedComponent = H5.as(component, tss.DC))) != null) {
                        deferedComponent.Container.classList.remove(className);
                        return component;
                    }

                    var el = component.tss$IC$Render();
                    el.classList.remove(className);
                    return component;
                },
                /**
                 * Creates a wrapper IComponent from an HTML element
                 *
                 * @static
                 * @public
                 * @this tss.UI
                 * @memberof tss.UI
                 * @param   {H5.Core..HTMLElement}    element    HTML element to be wrapped
                 * @return  {tss.Raw}
                 */
                Raw$2: function (element) {
                    return new tss.Raw.ctor(element);
                },
                Raw$1: function () {
                    return new tss.Raw.ctor();
                },
                Raw$3: function (component) {
                    return new tss.Raw.$ctor1(component);
                },
                Raw: function (html, forceParseAsHTML) {
                    var $t;
                    if (forceParseAsHTML === void 0) { forceParseAsHTML = false; }
                    if (System.String.isNullOrWhiteSpace(html)) {
                        return tss.UI.SPAN();
                    }

                    return (tss.UI.IsProbablyHtml(html) || forceParseAsHTML) ? ($t = document.createElement("span"), $t.innerHTML = html, $t) : ($t = document.createElement("span"), $t.textContent = html, $t);
                },
                Empty: function () {
                    return new tss.Raw.ctor();
                },
                Image$1: function (source, fallback) {
                    if (fallback === void 0) { fallback = null; }
                    return new tss.Image(source, fallback);
                },
                Image: function (init) {
                    var a = document.createElement("img");
                    init != null ? init.InitImageElement(a) : null;
                    return a;
                },
                Card: function (content) {
                    return new tss.Card(content);
                },
                BackgroundArea: function (content) {
                    return new tss.BackgroundArea(content);
                },
                Defer: function (asyncGenerator) {
                    return tss.DC.Create(asyncGenerator);
                },
                Defer$2: function (TComponent, observableComponent) {
                    return tss.DC.Observe(TComponent, observableComponent, function (c) {
                        return tss.tX.AsTask(c);
                    });
                },
                Defer$3: function (T1, o1, asyncGenerator) {
                    return tss.DC.Observe(T1, o1, asyncGenerator);
                },
                Defer$7: function (T1, T2, o1, o2, asyncGenerator) {
                    return tss.DC.Observe$2(T1, T2, o1, o2, asyncGenerator);
                },
                Defer$9: function (T1, T2, T3, o1, o2, o3, asyncGenerator) {
                    return tss.DC.Observe$3(T1, T2, T3, o1, o2, o3, asyncGenerator);
                },
                Defer$11: function (T1, T2, T3, T4, o1, o2, o3, o4, asyncGenerator) {
                    return tss.DC.Observe$4(T1, T2, T3, T4, o1, o2, o3, o4, asyncGenerator);
                },
                Defer$13: function (T1, T2, T3, T4, T5, o1, o2, o3, o4, o5, asyncGenerator) {
                    return tss.DC.Observe$5(T1, T2, T3, T4, T5, o1, o2, o3, o4, o5, asyncGenerator);
                },
                Defer$15: function (T1, T2, T3, T4, T5, T6, o1, o2, o3, o4, o5, o6, asyncGenerator) {
                    return tss.DC.Observe$6(T1, T2, T3, T4, T5, T6, o1, o2, o3, o4, o5, o6, asyncGenerator);
                },
                Defer$17: function (T1, T2, T3, T4, T5, T6, T7, o1, o2, o3, o4, o5, o6, o7, asyncGenerator) {
                    return tss.DC.Observe$7(T1, T2, T3, T4, T5, T6, T7, o1, o2, o3, o4, o5, o6, o7, asyncGenerator);
                },
                Defer$19: function (T1, T2, T3, T4, T5, T6, T7, T8, o1, o2, o3, o4, o5, o6, o7, o8, asyncGenerator) {
                    return tss.DC.Observe$8(T1, T2, T3, T4, T5, T6, T7, T8, o1, o2, o3, o4, o5, o6, o7, o8, asyncGenerator);
                },
                Defer$21: function (T1, T2, T3, T4, T5, T6, T7, T8, T9, o1, o2, o3, o4, o5, o6, o7, o8, o9, asyncGenerator) {
                    return tss.DC.Observe$9(T1, T2, T3, T4, T5, T6, T7, T8, T9, o1, o2, o3, o4, o5, o6, o7, o8, o9, asyncGenerator);
                },
                Defer$5: function (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, asyncGenerator) {
                    return tss.DC.Observe$1(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, asyncGenerator);
                },
                Defer$1: function (asyncGenerator, loadMessage) {
                    return tss.DC.Create$1(asyncGenerator, loadMessage);
                },
                Defer$4: function (T1, o1, asyncGenerator, loadMessage) {
                    return tss.DC.Observe(T1, o1, asyncGenerator, loadMessage);
                },
                Defer$8: function (T1, T2, o1, o2, asyncGenerator, loadMessage) {
                    return tss.DC.Observe$2(T1, T2, o1, o2, asyncGenerator, loadMessage);
                },
                Defer$10: function (T1, T2, T3, o1, o2, o3, asyncGenerator, loadMessage) {
                    return tss.DC.Observe$3(T1, T2, T3, o1, o2, o3, asyncGenerator, loadMessage);
                },
                Defer$12: function (T1, T2, T3, T4, o1, o2, o3, o4, asyncGenerator, loadMessage) {
                    return tss.DC.Observe$4(T1, T2, T3, T4, o1, o2, o3, o4, asyncGenerator, loadMessage);
                },
                Defer$14: function (T1, T2, T3, T4, T5, o1, o2, o3, o4, o5, asyncGenerator, loadMessage) {
                    return tss.DC.Observe$5(T1, T2, T3, T4, T5, o1, o2, o3, o4, o5, asyncGenerator, loadMessage);
                },
                Defer$16: function (T1, T2, T3, T4, T5, T6, o1, o2, o3, o4, o5, o6, asyncGenerator, loadMessage) {
                    return tss.DC.Observe$6(T1, T2, T3, T4, T5, T6, o1, o2, o3, o4, o5, o6, asyncGenerator, loadMessage);
                },
                Defer$18: function (T1, T2, T3, T4, T5, T6, T7, o1, o2, o3, o4, o5, o6, o7, asyncGenerator, loadMessage) {
                    return tss.DC.Observe$7(T1, T2, T3, T4, T5, T6, T7, o1, o2, o3, o4, o5, o6, o7, asyncGenerator, loadMessage);
                },
                Defer$20: function (T1, T2, T3, T4, T5, T6, T7, T8, o1, o2, o3, o4, o5, o6, o7, o8, asyncGenerator, loadMessage) {
                    return tss.DC.Observe$8(T1, T2, T3, T4, T5, T6, T7, T8, o1, o2, o3, o4, o5, o6, o7, o8, asyncGenerator, loadMessage);
                },
                Defer$22: function (T1, T2, T3, T4, T5, T6, T7, T8, T9, o1, o2, o3, o4, o5, o6, o7, o8, o9, asyncGenerator, loadMessage) {
                    return tss.DC.Observe$9(T1, T2, T3, T4, T5, T6, T7, T8, T9, o1, o2, o3, o4, o5, o6, o7, o8, o9, asyncGenerator, loadMessage);
                },
                Defer$6: function (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, asyncGenerator, loadMessage) {
                    return tss.DC.Observe$1(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, asyncGenerator, loadMessage);
                },
                DeferSync: function (syncGenerator) {
                    return tss.DC.Create(function () {
                        return tss.tX.AsTask(syncGenerator());
                    });
                },
                DeferSync$1: function (syncGenerator, loadMessage) {
                    return tss.DC.Create$1(function () {
                        return tss.tX.AsTask(syncGenerator());
                    }, loadMessage);
                },
                /**
                 * A Stack is a container-type component that abstracts the implementation of a flexbox in order to define the layout of its children components.
                 *
                 * @static
                 * @public
                 * @this tss.UI
                 * @memberof tss.UI
                 * @param   {number}    orientation
                 * @return  {tss.S}
                 */
                Stack: function (orientation) {
                    if (orientation === void 0) { orientation = 0; }
                    return new tss.S(orientation);
                },
                Masonry: function (columns, gutter) {
                    if (gutter === void 0) { gutter = 10; }
                    return new tss.Masonry(columns, gutter);
                },
                /**
                 * Horizontal stack, same as calling Stack().Horizontal()
                 *
                 * @static
                 * @public
                 * @this tss.UI
                 * @memberof tss.UI
                 * @return  {tss.S}
                 */
                HStack: function () {
                    return new tss.S(tss.S.Orientation.Horizontal);
                },
                /**
                 * Horizontal stack, same as calling Stack() or Stack().Vertical()
                 *
                 * @static
                 * @public
                 * @this tss.UI
                 * @memberof tss.UI
                 * @return  {tss.S}
                 */
                VStack: function () {
                    return new tss.S(tss.S.Orientation.Vertical);
                },
                Grid: function (columns) {
                    if (columns === void 0) { columns = []; }
                    return new tss.Grid.ctor(columns);
                },
                Grid$1: function (columns, rows) {
                    return new tss.Grid.$ctor1(columns, rows);
                },
                SectionStack: function () {
                    return new tss.SectionStack();
                },
                Float: function (child, position) {
                    return new tss.Float(child, position);
                },
                Button$1: function (text) {
                    if (text === void 0) { text = ""; }
                    return new tss.Button(text);
                },
                Button: function (init, children) {
                    if (children === void 0) { children = []; }
                    var f = document.createElement("button");
                    init != null ? init.InitButtonElement(f) : null;
                    tss.UI.AppendElements(f, children);
                    return f;
                },
                CheckBox$1: function (text) {
                    if (text === void 0) { text = ""; }
                    return new tss.ChecBox(text);
                },
                CheckBox: function (init) {
                    var $t;
                    var input = ($t = document.createElement("input"), $t.type = "checkbox", $t);
                    init != null ? init.InitInputElement(input) : null;
                    return input;
                },
                Toggle$3: function (onText, offText) {
                    return new tss.Toggle(onText, offText);
                },
                Toggle$2: function (onText, offText) {
                    return new tss.Toggle(tss.UI.TextBlock(onText), tss.UI.TextBlock(offText));
                },
                Toggle$1: function (text) {
                    return new tss.Toggle(tss.UI.TextBlock(text), tss.txtX.Secondary(tss.txt, tss.UI.TextBlock(text)));
                },
                Toggle: function () {
                    return new tss.Toggle(null, null);
                },
                Choice: function (label) {
                    if (label === void 0) { label = ""; }
                    return new tss.ChoiceGroup.Choice(label);
                },
                ChoiceGroup: function (label) {
                    if (label === void 0) { label = ""; }
                    return new tss.ChoiceGroup(label);
                },
                TextBlock: function (text) {
                    return new tss.txt.ctor(text);
                },
                TextBlock$1: function (text, treatAsHTML, selectable, textSize, textWeight, afterText) {
                    if (text === void 0) { text = ""; }
                    if (treatAsHTML === void 0) { treatAsHTML = false; }
                    if (selectable === void 0) { selectable = false; }
                    if (textSize === void 0) { textSize = "tss-fontsize-small"; }
                    if (textWeight === void 0) { textWeight = "tss-fontweight-regular"; }
                    if (afterText === void 0) { afterText = null; }
                    return new tss.txt.$ctor1(text, treatAsHTML, selectable, textSize, textWeight, afterText);
                },
                FileSelector: function () {
                    return new tss.FileSelector();
                },
                FileDropArea: function () {
                    return new tss.FileDropArea();
                },
                Validator: function () {
                    return new tss.Validator();
                },
                Icon: function (icon, color) {
                    var $t;
                    if (color === void 0) { color = null; }
                    return tss.ISX.Foreground(tss.Icon, new tss.Icon(icon), ($t = color, $t != null ? $t : ""));
                },
                Icon$1: function (icon, size, color) {
                    var $t;
                    if (color === void 0) { color = null; }
                    return tss.ISX.Foreground(tss.Icon, new tss.Icon(System.String.format("{0} {1}", icon, H5.box(size, tss.TS, System.Enum.toStringFn(tss.TS)))), ($t = color, $t != null ? $t : ""));
                },
                Icon$3: function (icon, weight, size, color) {
                    var $t;
                    if (weight === void 0) { weight = "lal"; }
                    if (size === void 0) { size = "tss-fontsize-medium"; }
                    if (color === void 0) { color = null; }
                    return tss.ISX.Foreground(tss.Icon, new tss.Icon(System.String.format("{0} {1} {2}", H5.box(weight, tss.LineAwesomeWeight, System.Enum.toStringFn(tss.LineAwesomeWeight)), H5.box(icon, Tesserae.LineAwesome, System.Enum.toStringFn(Tesserae.LineAwesome)), H5.box(size, tss.TS, System.Enum.toStringFn(tss.TS)))), ($t = color, $t != null ? $t : ""));
                },
                Icon$2: function (icon, size) {
                    if (size === void 0) { size = "tss-fontsize-medium"; }
                    return new tss.Icon(System.String.format("ec {0} {1}", H5.box(icon, Tesserae.Emoji, System.Enum.toStringFn(Tesserae.Emoji)), H5.box(size, tss.TS, System.Enum.toStringFn(tss.TS))));
                },
                HorizontalSeparator: function (text) {
                    return new tss.HorizontalSeparator.ctor(text);
                },
                HorizontalSeparator$1: function (component) {
                    return new tss.HorizontalSeparator.$ctor1(component);
                },
                Label$1: function (text) {
                    if (text === void 0) { text = ""; }
                    return new tss.Label.ctor(text);
                },
                Label$2: function (component) {
                    return new tss.Label.$ctor1(component);
                },
                Label: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(document.createElement("label"), init, children);
                },
                EditableLabel: function (text) {
                    if (text === void 0) { text = ""; }
                    return new tss.EditableLabel(text);
                },
                EditableArea: function (text) {
                    if (text === void 0) { text = ""; }
                    return new tss.EditableArea(text);
                },
                Breadcrumb: function () {
                    return new tss.Breadcrumb();
                },
                TextBreadcrumbs: function () {
                    return new tss.TextBreadcrumbs();
                },
                TextBreadcrumb: function (text) {
                    if (text === void 0) { text = ""; }
                    return new tss.TextBreadcrumb(text);
                },
                Crumb: function (text) {
                    if (text === void 0) { text = ""; }
                    return new tss.Button(text).NoBorder().NoBackground();
                },
                OverflowSet: function () {
                    return new tss.OverflowSet();
                },
                TextBox$1: function (text) {
                    if (text === void 0) { text = ""; }
                    return new tss.TextBox(text);
                },
                TextBox: function (init) {
                    var f = document.createElement("input");
                    init != null ? init.InitInputElement(f) : null;
                    return f;
                },
                TextArea$1: function (text) {
                    if (text === void 0) { text = ""; }
                    return new tss.TextArea(text);
                },
                TextArea: function (init) {
                    var a = document.createElement("textarea");
                    init != null ? init.InitTextAreaElement(a) : null;
                    return a;
                },
                ColorPicker: function (color) {
                    if (color === void 0) { color = null; }
                    return new tss.ColorPicker(color);
                },
                DateTimePicker: function (dateTime) {
                    if (dateTime === void 0) { dateTime = null; }
                    return new tss.DateTimePicker(System.Nullable.lift1("$clone", dateTime));
                },
                DatePicker: function (dateTime) {
                    if (dateTime === void 0) { dateTime = null; }
                    return new tss.DatePicker(System.Nullable.lift1("$clone", dateTime));
                },
                GridPicker: function (columnNames, rowNames, states, initialStates, formatState, columns, rowHeight) {
                    if (columns === void 0) { columns = null; }
                    if (rowHeight === void 0) { rowHeight = null; }
                    return new tss.GridPicker(columnNames, rowNames, states, initialStates, formatState, columns, rowHeight);
                },
                SearchBox: function (placeholder) {
                    if (placeholder === void 0) { placeholder = ""; }
                    return new tss.SearchBox(placeholder);
                },
                Slider: function (val, min, max, step) {
                    if (val === void 0) { val = 0; }
                    if (min === void 0) { min = 0; }
                    if (max === void 0) { max = 100; }
                    if (step === void 0) { step = 10; }
                    return new tss.Slider(val, min, max, step);
                },
                /**
                 * A Layer is a technical component that does not have specific Design guidance.
                 Layers are used to render content outside of a DOM tree, at the end of the document. This allows content to escape traditional boundaries caused by "overflow: hidden" css rules and keeps it on the top without using z-index rules. This is useful for example in
                 ContextualMenu and Tooltip scenarios, where the content should always overlay everything else.
                 *
                 * @static
                 * @public
                 * @this tss.UI
                 * @memberof tss.UI
                 * @return  {tss.Layer}
                 */
                Layer: function () {
                    return new tss.Layer();
                },
                LayerHost: function () {
                    return new tss.LayerHost();
                },
                Nav$1: function () {
                    return new tss.Nav();
                },
                Nav: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(H5.global.document.createElement("nav"), init, children);
                },
                NavLink: function (text) {
                    if (text === void 0) { text = null; }
                    return new tss.Nav.NavLink.ctor(text);
                },
                NavLink$1: function (content) {
                    return new tss.Nav.NavLink.$ctor1(content);
                },
                Panel: function (title) {
                    if (title === void 0) { title = null; }
                    return new tss.Panel.ctor(title);
                },
                Panel$1: function (title) {
                    return new tss.Panel.$ctor1(title);
                },
                Modal$1: function (header) {
                    if (header === void 0) { header = null; }
                    return new tss.Modal(header);
                },
                Modal: function (header) {
                    return new tss.Modal(System.String.isNullOrWhiteSpace(header) ? null : tss.ITFX.SemiBold(tss.txt, tss.ITFX.MediumPlus(tss.txt, tss.UI.TextBlock(header))));
                },
                TutorialModal: function () {
                    return new tss.TutorialModal("", "");
                },
                TutorialModal$1: function (title, helpText) {
                    return new tss.TutorialModal(title, helpText);
                },
                ProgressModal: function () {
                    return new tss.ProgressModal();
                },
                Dialog$1: function (content, title, centerContent) {
                    if (content === void 0) { content = null; }
                    if (title === void 0) { title = null; }
                    if (centerContent === void 0) { centerContent = true; }
                    return new tss.Dialog(content, title, centerContent);
                },
                Dialog: function (text, centerContent) {
                    if (centerContent === void 0) { centerContent = true; }
                    return new tss.Dialog(void 0, System.String.isNullOrWhiteSpace(text) ? null : tss.ICX.MaxWidth(tss.txt, tss.ITFX.SemiBold(tss.txt, tss.txtX.Primary(tss.txt, tss.UI.TextBlock(text))), tss.usX.vw$1(50)), centerContent);
                },
                Pivot: function () {
                    return new tss.Pivot();
                },
                Sidebar: function () {
                    return new tss.Sidebar();
                },
                Toast: function () {
                    return new tss.Toast();
                },
                ProgressIndicator: function () {
                    return new tss.ProgressIndicator();
                },
                Dropdown: function () {
                    return new tss.Dropdown();
                },
                Dropdown$2: function (noItemsText) {
                    return new tss.Dropdown(System.String.isNullOrWhiteSpace(noItemsText) ? null : tss.UI.Span(tss.UI._$2(void 0, void 0, void 0, void 0, void 0, void 0, noItemsText, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0)));
                },
                Dropdown$1: function (noItemsSpan) {
                    return new tss.Dropdown(noItemsSpan);
                },
                DropdownItem: function () {
                    return new tss.Dropdown.Item.ctor("");
                },
                DropdownItem$1: function (text, selectedText) {
                    if (selectedText === void 0) { selectedText = ""; }
                    return new tss.Dropdown.Item.ctor(text, selectedText);
                },
                DropdownItem$2: function (content, selectedContent) {
                    if (selectedContent === void 0) { selectedContent = null; }
                    return new tss.Dropdown.Item.$ctor1(content, selectedContent);
                },
                ContextMenu: function () {
                    return new tss.ContextMenu();
                },
                ContextMenuItem: function (text) {
                    if (text === void 0) { text = ""; }
                    return new tss.ContextMenu.Item.ctor(text);
                },
                ContextMenuItem$1: function (component) {
                    return new tss.ContextMenu.Item.$ctor1(component);
                },
                Spinner: function (text) {
                    if (text === void 0) { text = ""; }
                    return new tss.Spinner(text);
                },
                Link$2: function (url, content, noUnderline) {
                    if (noUnderline === void 0) { noUnderline = false; }
                    return new tss.Link(url, content, noUnderline);
                },
                Link: function (url, text) {
                    return new tss.Link(url, tss.UI.TextBlock(text));
                },
                Link$1: function (url, text, icon, noUnderline) {
                    if (noUnderline === void 0) { noUnderline = false; }
                    return new tss.Link(url, tss.ICX.Padding(tss.Button, tss.UI.Button$1(text).SetIcon(icon).NoBorder().NoBackground(), tss.usX.px$1(0)), noUnderline);
                },
                SplitView: function () {
                    return new tss.SplitView();
                },
                VirtualizedList: function (rowsPerPage, columnsPerRow) {
                    if (rowsPerPage === void 0) { rowsPerPage = 4; }
                    if (columnsPerRow === void 0) { columnsPerRow = 4; }
                    return new tss.VirtualizedList(rowsPerPage, columnsPerRow);
                },
                SearchableList: function (T, components, columns) {
                    if (columns === void 0) { columns = []; }
                    return new (tss.SearchableList(T)).ctor(components, columns);
                },
                SearchableList$1: function (T, components, columns) {
                    if (columns === void 0) { columns = []; }
                    return new (tss.SearchableList(T)).$ctor1(components, columns);
                },
                SearchableGroupedList: function (T, components, groupedItemHeaderGenerator, columns) {
                    if (columns === void 0) { columns = []; }
                    return new (tss.SearchableGroupedList(T)).ctor(components, groupedItemHeaderGenerator, columns);
                },
                SearchableGroupedList$1: function (T, components, groupedItemHeaderGenerator, columns) {
                    if (columns === void 0) { columns = []; }
                    return new (tss.SearchableGroupedList(T)).$ctor1(components, groupedItemHeaderGenerator, columns);
                },
                ItemsList: function (components, columns) {
                    if (columns === void 0) { columns = []; }
                    return new tss.ItemsList.ctor(components, columns);
                },
                ItemsList$1: function (components, columns) {
                    if (columns === void 0) { columns = []; }
                    return new tss.ItemsList.$ctor1(components, columns);
                },
                InfiniteScrollingList$1: function (getNextItemPage, columns) {
                    if (columns === void 0) { columns = []; }
                    return new tss.InfiniteScrollingList.$ctor1(getNextItemPage, columns);
                },
                InfiniteScrollingList: function (getNextItemPage, columns) {
                    if (columns === void 0) { columns = []; }
                    return new tss.InfiniteScrollingList.ctor(getNextItemPage, columns);
                },
                InfiniteScrollingList$2: function (initComponents, getNextItemPage, columns) {
                    if (columns === void 0) { columns = []; }
                    return new tss.InfiniteScrollingList.$ctor2(initComponents, getNextItemPage, columns);
                },
                InfiniteScrollingList$3: function (initComponents, getNextItemPage, columns) {
                    if (columns === void 0) { columns = []; }
                    return new tss.InfiniteScrollingList.$ctor3(initComponents, getNextItemPage, columns);
                },
                DetailsList: function (TDetailsListItem, columns) {
                    if (columns === void 0) { columns = []; }
                    return new (tss.DetailsList(TDetailsListItem))(columns);
                },
                IconColumn: function (icon, width, enableColumnSorting, sortingKey, onColumnClick) {
                    if (enableColumnSorting === void 0) { enableColumnSorting = false; }
                    if (sortingKey === void 0) { sortingKey = null; }
                    if (onColumnClick === void 0) { onColumnClick = null; }
                    return new tss.DetailsListIconColumn(icon, width, null, enableColumnSorting, sortingKey, onColumnClick);
                },
                IconColumn$1: function (icon, width, maxWidth, enableColumnSorting, sortingKey, onColumnClick) {
                    if (enableColumnSorting === void 0) { enableColumnSorting = false; }
                    if (sortingKey === void 0) { sortingKey = null; }
                    if (onColumnClick === void 0) { onColumnClick = null; }
                    return new tss.DetailsListIconColumn(icon, width, maxWidth, enableColumnSorting, sortingKey, onColumnClick);
                },
                DetailsListColumn: function (title, width, isRowHeader, enableColumnSorting, sortingKey, onColumnClick) {
                    if (isRowHeader === void 0) { isRowHeader = false; }
                    if (enableColumnSorting === void 0) { enableColumnSorting = false; }
                    if (sortingKey === void 0) { sortingKey = null; }
                    if (onColumnClick === void 0) { onColumnClick = null; }
                    return new tss.DetailsListColumn(title, width, null, isRowHeader, enableColumnSorting, sortingKey, onColumnClick);
                },
                DetailsListColumn$1: function (title, width, maxWidth, isRowHeader, enableColumnSorting, sortingKey, onColumnClick) {
                    if (isRowHeader === void 0) { isRowHeader = false; }
                    if (enableColumnSorting === void 0) { enableColumnSorting = false; }
                    if (sortingKey === void 0) { sortingKey = null; }
                    if (onColumnClick === void 0) { onColumnClick = null; }
                    return new tss.DetailsListColumn(title, width, maxWidth, isRowHeader, enableColumnSorting, sortingKey, onColumnClick);
                },
                Picker: function (TPickerItem, maximumAllowedSelections, duplicateSelectionsAllowed, suggestionsTolerance, renderSelectionsInline, suggestionsTitleText) {
                    if (maximumAllowedSelections === void 0) { maximumAllowedSelections = 2147483647; }
                    if (duplicateSelectionsAllowed === void 0) { duplicateSelectionsAllowed = false; }
                    if (suggestionsTolerance === void 0) { suggestionsTolerance = 0; }
                    if (renderSelectionsInline === void 0) { renderSelectionsInline = true; }
                    if (suggestionsTitleText === void 0) { suggestionsTitleText = null; }
                    return new (tss.Picker(TPickerItem))(maximumAllowedSelections, duplicateSelectionsAllowed, suggestionsTolerance, renderSelectionsInline, suggestionsTitleText);
                },
                VisibilitySensor: function (onVisible, singleCall, message) {
                    if (singleCall === void 0) { singleCall = true; }
                    if (message === void 0) { message = null; }
                    return new tss.VisibilitySensor(onVisible, singleCall, message);
                },
                Combine: function (T1, T2, o1, o2) {
                    return new (tss.CombinedObservableT2(T1,T2))(o1, o2);
                },
                Timeline: function () {
                    return new tss.Timeline();
                },
                Teaching: function () {
                    return new tss.Teaching();
                },
                ToToggle: function (button) {
                    return new tss.ToggleButton(button);
                },
                _: function () {
                    return new tss.att();
                },
                _$1: function (className) {
                    var $t;
                    return ($t = new tss.att(), $t.ClassName = className, $t);
                },
                _$2: function (className, id, src, href, rel, target, text, type, disabled, value, placeholder, defaultValue, title, el, styles) {
                    var $t;
                    if (className === void 0) { className = null; }
                    if (id === void 0) { id = null; }
                    if (src === void 0) { src = null; }
                    if (href === void 0) { href = null; }
                    if (rel === void 0) { rel = null; }
                    if (target === void 0) { target = null; }
                    if (text === void 0) { text = null; }
                    if (type === void 0) { type = null; }
                    if (disabled === void 0) { disabled = null; }
                    if (value === void 0) { value = null; }
                    if (placeholder === void 0) { placeholder = null; }
                    if (defaultValue === void 0) { defaultValue = null; }
                    if (title === void 0) { title = null; }
                    if (el === void 0) { el = null; }
                    if (styles === void 0) { styles = null; }
                    return ($t = new tss.att(), $t.ClassName = className, $t.Id = id, $t.OnElementCreate = el, $t.Styles = styles, $t.Title = title, $t.Href = href, $t.Src = src, $t.Rel = rel, $t.Target = target, $t.Text = text, $t.Type = type, $t.Disabled = disabled, $t.Value = value, $t.DefaultValue = defaultValue, $t.Placeholder = placeholder, $t);
                },
                TryToFindAncestor: function (source, tagNameToFind) {
                    while (source.parentElement != null) {
                        if (H5.rE(source.parentElement.tagName.toUpperCase(), tagNameToFind)) {
                            return source.parentElement;
                        }
                        source = source.parentElement;
                    }
                    return null;
                },
                IsMounted: function (source) {
                    if (source == null) {
                        throw new System.ArgumentNullException.$ctor1("source");
                    }

                    return tss.UI.IsEqualToOrIsChildOf(source, H5.global.document.querySelector("html"));
                },
                IsMounted$1: function (source) {
                    if (source == null) {
                        throw new System.ArgumentNullException.$ctor1("source");
                    }

                    return tss.UI.IsEqualToOrIsChildOf(source.tss$IC$Render(), H5.global.document.querySelector("html"));
                },
                IsEqualToOrIsChildOf: function (element, possibleParentElement) {
                    while (element != null) {
                        if (element == possibleParentElement) {
                            return true;
                        }
                        element = element.parentElement;
                    }
                    return false;
                },
                AppendChildren: function (source, children) {
                    var $t;
                    if (children === void 0) { children = []; }
                    $t = H5.getEnumerator(children);
                    try {
                        while ($t.moveNext()) {
                            var child = $t.Current;
                            source.appendChild(child);
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                },
                StopEvent: function (e) {
                    e.preventDefault();
                    e.stopImmediatePropagation();
                },
                ToList: function (c) {
                    var l = new (System.Collections.Generic.List$1(Element)).ctor();
                    for (var i = 0; i < c.length; i = (i + 1) >>> 0) {
                        l.add(c.item(i));
                    }
                    return l;
                },
                RemoveChildElements: function (source) {
                    while (source.firstElementChild != null) {
                        source.firstElementChild.remove();
                    }
                },
                UpdateClassIf: function (htmlElement, value, cssClass) {
                    if (value) {
                        htmlElement.classList.add(cssClass);
                    } else {
                        htmlElement.classList.remove(cssClass);
                    }

                    return htmlElement;
                },
                UpdateClassIfNot: function (htmlElement, value, cssClass) {
                    if (!value) {
                        htmlElement.classList.add(cssClass);
                    } else {
                        htmlElement.classList.remove(cssClass);
                    }

                    if (H5.rE(cssClass, "tss-disabled") && !(typeof htmlElement.disabled === 'undefined')) {
                        htmlElement.disabled = !value;
                    }

                    return htmlElement;
                },
                ReplaceElement: function (source, replaceWith) {
                    if (source.parentElement == null) {
                        return;
                    }
                    source.parentElement.replaceChild(replaceWith, source);
                },
                AppendElements$1: function (parent, children) {
                    var $t;
                    if (children != null) {
                        $t = H5.getEnumerator(children, HTMLElement);
                        try {
                            while ($t.moveNext()) {
                                var child = $t.Current;
                                if (child != null) {
                                    parent.appendChild(child);
                                }
                            }
                        } finally {
                            if (H5.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }
                },
                AppendElements: function (parent, children) {
                    var $t;
                    if (children === void 0) { children = []; }
                    if (children != null) {
                        $t = H5.getEnumerator(children);
                        try {
                            while ($t.moveNext()) {
                                var child = $t.Current;
                                if (child != null) {
                                    parent.appendChild(child);
                                }
                            }
                        } finally {
                            if (H5.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }
                },
                ClearChildren: function (element) {
                    while (element.lastChild != null) {
                        element.removeChild(element.lastChild);
                    }
                },
                AppendClass: function (element, classes) {
                    if (classes === void 0) { classes = []; }
                    element.classList.add.apply(element.classList, classes);
                    return element;
                },
                SetStyle$1: function (element, style) {
                    style(element.style);
                    return element;
                },
                SetStyle: function (T, element, style) {
                    style(element.style);
                    return element;
                },
                InitElement: function (element, init, children) {
                    if (children === void 0) { children = []; }
                    init != null ? init.InitElement(element) : null;
                    if (children != null) {
                        if (Array.isArray(children)) {
                            tss.UI.AppendElements(element, children);
                        } else {
                            element.appendChild(children);
                        }
                    }
                    return element;
                },
                IsProbablyHtml: function (html) {
                    var open = System.String.indexOf(html, String.fromCharCode(60));
                    if (open >= 0) {
                        var close = System.String.indexOf(html, String.fromCharCode(62), open);
                        if (close >= 1) {
                            return true;
                        }
                    }

                    if (System.String.indexOf(html, "&nbsp;") >= 0) {
                        return true;
                    }

                    return false;
                },
                Text: function (text) {
                    return H5.global.document.createTextNode(text);
                },
                Div: function (init, first) {
                    var result = tss.UI.InitElement(document.createElement("div"), init, null);
                    result.appendChild(first);
                    return result;
                },
                Div$1: function (init, first, second) {
                    var result = tss.UI.InitElement(document.createElement("div"), init, null);
                    result.appendChild(first);
                    result.appendChild(second);
                    return result;
                },
                Div$2: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(document.createElement("div"), init, children);
                },
                Span: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(document.createElement("span"), init, children);
                },
                P: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(document.createElement("p"), init, children);
                },
                Pre: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(document.createElement("pre"), init, children);
                },
                Strong: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(H5.global.document.createElement("strong"), init, children);
                },
                I: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(H5.global.document.createElement("i"), init, children);
                },
                I$1: function (icon, size, cssClass) {
                    if (size === void 0) { size = "la"; }
                    if (cssClass === void 0) { cssClass = null; }
                    return tss.UI.I(tss.UI._$1(System.String.format("{0} {1} {2}", H5.box(size, tss.LineAwesomeWeight, System.Enum.toStringFn(tss.LineAwesomeWeight)), H5.box(icon, Tesserae.LineAwesome, System.Enum.toStringFn(Tesserae.LineAwesome)), cssClass)));
                },
                Sup: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(H5.global.document.createElement("sup"), init, children);
                },
                Br: function (init) {
                    return tss.UI.InitElement(document.createElement("br"), init);
                },
                Ol: function (init, children) {
                    if (children === void 0) { children = []; }
                    var ol = document.createElement("ol");
                    init != null ? init.InitElement(ol) : null;
                    tss.UI.AppendElements(ol, children);
                    return ol;
                },
                Ul: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(document.createElement("ul"), init, children);
                },
                Li: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(document.createElement("li"), init, children);
                },
                Main: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(H5.global.document.createElement("main"), init, children);
                },
                Header: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(H5.global.document.createElement("header"), init, children);
                },
                Footer: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(H5.global.document.createElement("footer"), init, children);
                },
                Section: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(H5.global.document.createElement("section"), init, children);
                },
                HR: function (init) {
                    return tss.UI.InitElement(document.createElement("hr"), init);
                },
                A: function (init, children) {
                    if (children === void 0) { children = []; }
                    var a = document.createElement("a");
                    init != null ? init.InitAnchorElement(a) : null;
                    tss.UI.AppendElements(a, children);
                    return a;
                },
                Canvas: function (init) {
                    return tss.UI.InitElement(document.createElement("canvas"), init);
                },
                H: function (init, type, children) {
                    if (children === void 0) { children = []; }
                    var h = H5.global.document.createElement(type);
                    init != null ? init.InitElement(h) : null;
                    tss.UI.AppendElements(h, children);
                    return h;
                },
                H1: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.H(init, "h1", children);
                },
                H2: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.H(init, "h2", children);
                },
                H3: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.H(init, "h3", children);
                },
                H4: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.H(init, "h4", children);
                },
                H5: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.H(init, "h5", children);
                },
                H6: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.H(init, "h6", children);
                },
                FormE: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(document.createElement("form"), init, children);
                },
                FieldSet: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(document.createElement("fieldset"), init, children);
                },
                OptGroup: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(document.createElement("optgroup"), init, children);
                },
                Option: function (init) {
                    var f = document.createElement("option");
                    init != null ? init.InitOptionElement(f) : null;
                    return f;
                },
                Legend: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(document.createElement("legend"), init, children);
                },
                Select: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(document.createElement("select"), init, children);
                },
                DataList: function (init, children) {
                    if (children === void 0) { children = []; }
                    var dl = document.createElement("datalist");
                    init != null ? init.InitElement(dl) : null;
                    tss.UI.AppendElements(dl, children);
                    return dl;
                },
                RadioButton: function (init) {
                    var $t;
                    var input = ($t = document.createElement("input"), $t.type = "radio", $t);
                    init != null ? init.InitInputElement(input) : null;
                    return input;
                },
                FileInput: function (init) {
                    var $t;
                    var input = ($t = document.createElement("input"), $t.type = "file", $t);
                    init != null ? init.InitInputElement(input) : null;
                    return input;
                },
                Table: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(document.createElement("table"), init, children);
                },
                Caption: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(document.createElement("caption"), init, children);
                },
                THeader: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(H5.global.document.createElement("thead"), init, children);
                },
                TBody: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(document.createElement("tbody"), init, children);
                },
                TFooter: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(document.createElement("tbody"), init, children);
                },
                TRow: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(document.createElement("tr"), init, children);
                },
                TRow$1: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(document.createElement("tr"), init, children);
                },
                Td: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(document.createElement("td"), init, children);
                },
                Th: function (init, children) {
                    if (children === void 0) { children = []; }
                    return tss.UI.InitElement(document.createElement("th"), init, children);
                },
                IFrame: function (init, children) {
                    if (children === void 0) { children = []; }
                    var a = document.createElement("iframe");
                    init != null ? init.InitIFrameElement(a) : null;
                    tss.UI.AppendElements(a, children);
                    return a;
                },
                DIV: function (child) {
                    if (child === void 0) { child = []; }
                    return tss.UI.InitElement(document.createElement("div"), null, child);
                },
                SPAN: function (child) {
                    if (child === void 0) { child = []; }
                    return tss.UI.InitElement(document.createElement("span"), null, child);
                },
                MakeScrollableOnHover: function (element, initialDelay, pixelsPerSecond) {
                    if (initialDelay === void 0) { initialDelay = 1000; }
                    if (pixelsPerSecond === void 0) { pixelsPerSecond = 100.0; }
                    var progress = 0;
                    var stop = false;
                    var initial = 0;
                    var maxDelta = 0;
                    var t0 = -1;
                    var ratio = 1;
                    var animateElement = null;

                    var target = element.firstElementChild;
                    animateElement = function (t) {
                        if (t0 < 0) {
                            t0 = t;
                            ratio = (pixelsPerSecond) / 1000;
                        }
                        progress = (t - t0) * ratio;
                        if (progress > maxDelta || stop) {
                            if (stop) {
                                target.style.marginLeft = "";
                            } else {
                                target.style.marginLeft = "-" + System.Double.format(maxDelta) + "px";
                            }
                        } else {
                            target.style.marginLeft = "-" + System.Double.format((progress)) + "px";
                            H5.global.window.requestAnimationFrame(animateElement);
                        }
                    };

                    element.onmouseenter = function (e) {
                        var $t;
                        stop = false;
                        progress = 0;
                        t0 = -1;
                        maxDelta = -element.getBoundingClientRect().width;

                        $t = H5.getEnumerator(element.children, Element);
                        try {
                            while ($t.moveNext()) {
                                var c = $t.Current;
                                maxDelta += c.getBoundingClientRect().width;
                            }
                        } finally {
                            if (H5.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }

                        if (maxDelta > 0) {
                            initial = H5.global.window.setTimeout(function (t) {
                                H5.global.window.requestAnimationFrame(animateElement);
                            }, initialDelay);
                        }
                    };

                    element.onmouseleave = function (e) {
                        stop = true;
                        H5.global.window.clearTimeout(initial);
                        target.style.marginLeft = "";
                    };
                }
            }
        }
    });

    H5.define("tss.UI.Theme", {
        $kind: "nested class",
        statics: {
            fields: {
                _primaryStyleElement: null,
                _backgroundStyleElement: null
            },
            props: {
                IsDark: {
                    get: function () {
                        return H5.global.document.body.classList.contains("tss-dark-mode");
                    },
                    set: function (value) {
                        if (value) {
                            tss.UI.Theme.Dark();
                        } else {
                            tss.UI.Theme.Light();
                        }
                    }
                },
                IsLight: {
                    get: function () {
                        return !tss.UI.Theme.IsDark;
                    },
                    set: function (value) {
                        tss.UI.Theme.IsDark = !value;
                    }
                }
            },
            methods: {
                Dark: function () {
                    H5.global.document.body.classList.add("tss-dark-mode");
                },
                Light: function () {
                    H5.global.document.body.classList.remove("tss-dark-mode");
                },
                SetBackground: function (defaultLight, defaultDark) {
                    if (H5.is(tss.UI.Theme._backgroundStyleElement, System.Object)) {
                        tss.UI.Theme._backgroundStyleElement.remove();
                        tss.UI.Theme._backgroundStyleElement = null;
                    }

                    var secondaryLight = tss.HSLColor.op_Implicit$1(defaultLight);
                    var sidebarLight = tss.HSLColor.op_Implicit$1(defaultLight);
                    var hoverLight = tss.HSLColor.op_Implicit$1(defaultLight);
                    var activeLight = tss.HSLColor.op_Implicit$1(defaultLight);
                    var progressLight = tss.HSLColor.op_Implicit$1(defaultLight);

                    var secondaryDark = tss.HSLColor.op_Implicit$1(defaultDark);
                    var hoverDark = tss.HSLColor.op_Implicit$1(defaultDark);
                    var activeDark = tss.HSLColor.op_Implicit$1(defaultDark);
                    var progressDark = tss.HSLColor.op_Implicit$1(defaultDark);


                    secondaryLight.Luminosity -= 4;
                    hoverLight.Luminosity -= 12;
                    activeLight.Luminosity -= 9;
                    progressLight.Luminosity -= 9;

                    secondaryDark.Luminosity += 7;
                    hoverDark.Luminosity += 2;
                    activeDark.Luminosity += 13;
                    progressDark.Luminosity += 13;


                    var sb = new System.Text.StringBuilder();
                    sb.appendLine(":root {");
                    sb.append("  --tss-secondary-background-color-root: ").append(secondaryLight.ToRGBvar()).appendLine(";");
                    sb.append("  --tss-progress-background-color-root: ").append(progressLight.ToRGBvar()).appendLine(";");

                    sb.append("\r\n    --tss-default-background-color: rgb(var(--tss-default-background-color-root ));\r\n    --tss-secondary-background-color: rgb(var(--tss-secondary-background-color-root ));\r\n    --tss-default-background-hover-color: rgb(var(--tss-default-background-hover-color-root ));\r\n    --tss-default-background-active-color: rgb(var(--tss-default-background-active-color-root ));\r\n    --tss-progress-background-color: rgb(var(--tss-progress-background-color-root ));\r\n");

                    sb.appendLine("}");

                    sb.appendLine(".tss-dark-mode {");
                    sb.append("  --tss-secondary-background-color-root: ").append(secondaryDark.ToRGBvar()).appendLine(";");
                    sb.append("  --tss-progress-background-color-root: ").append(progressDark.ToRGBvar()).appendLine(";");

                    sb.append("\r\n    --tss-default-background-color: rgb(var(--tss-default-background-color-root ));\r\n    --tss-secondary-background-color: rgb(var(--tss-secondary-background-color-root ));\r\n    --tss-default-background-hover-color: rgb(var(--tss-default-background-hover-color-root ));\r\n    --tss-default-background-active-color: rgb(var(--tss-default-background-active-color-root ));\r\n    --tss-progress-background-color: rgb(var(--tss-progress-background-color-root ));\r\n");

                    sb.appendLine("}");

                    tss.UI.Theme._backgroundStyleElement = H5.global.document.createElement("style");
                    tss.UI.Theme._backgroundStyleElement.type = "text/css";
                    tss.UI.Theme._backgroundStyleElement.appendChild(H5.global.document.createTextNode(sb.toString()));

                    var head = H5.global.document.getElementsByTagName("head")[0];
                    head.appendChild(tss.UI.Theme._backgroundStyleElement);
                },
                SetPrimary: function (primaryLightColor, primaryDarkColor) {
                    if (H5.is(tss.UI.Theme._primaryStyleElement, System.Object)) {
                        tss.UI.Theme._primaryStyleElement.remove();
                        tss.UI.Theme._primaryStyleElement = null;
                    }

                    var borderColorLight = tss.HSLColor.op_Implicit$1(primaryLightColor);
                    var borderColorDark = tss.HSLColor.op_Implicit$1(primaryDarkColor);
                    var backgroundActiveLight = tss.HSLColor.op_Implicit$1(primaryLightColor);
                    var backgroundActiveDark = tss.HSLColor.op_Implicit$1(primaryDarkColor);


                    borderColorLight.Luminosity -= (14.5);
                    borderColorLight.Saturation -= (1.2000000000000028);
                    borderColorLight.Hue -= (-2);

                    borderColorDark.Luminosity -= (14.5);
                    borderColorDark.Saturation -= (1.2000000000000028);
                    borderColorDark.Hue -= (-2);

                    backgroundActiveLight.Luminosity -= (0);
                    backgroundActiveLight.Saturation -= (10.600000000000001);
                    backgroundActiveLight.Hue -= (0);

                    backgroundActiveDark.Luminosity -= (0);
                    backgroundActiveDark.Saturation -= (10.600000000000001);
                    backgroundActiveDark.Hue -= (0);

                    var sb = new System.Text.StringBuilder();
                    sb.appendLine(":root {");
                    sb.append("  --tss-primary-background-color-root: ").append(primaryLightColor.ToRGBvar()).appendLine(";");
                    sb.append("  --tss-link-color-root: ").append(primaryLightColor.ToRGBvar()).appendLine(";");
                    sb.append("  --tss-primary-border-color-root: ").append(borderColorLight.ToRGBvar()).appendLine(";");
                    sb.append("  --tss-primary-background-hover-color-root: ").append(borderColorLight.ToRGBvar()).appendLine(";");
                    sb.append("  --tss-primary-background-active-color-root: ").append(backgroundActiveLight.ToRGBvar()).appendLine(";");
                    sb.append("  --tss-primary-shadow-color-root: ").append(primaryLightColor.ToRGBvar()).appendLine(";");

                    sb.append("\r\n    --tss-primary-background-color: rgb(var(--tss-primary-background-color-root ));\r\n    --tss-link-color: rgb(var(--tss-link-color-root ));\r\n    --tss-primary-border-color: rgb(var(--tss-primary-border-color-root ));\r\n    --tss-primary-background-hover-color: rgb(var(--tss-primary-background-hover-color-root ));\r\n    --tss-primary-background-active-color: rgb(var(--tss-primary-background-active-color-root ));\r\n    --tss-primary-shadow: 0 1.6px 3.6px 0 rgba(var(--tss-primary-shadow-color-root),0.132), 0 0.3px 0.9px 0 rgba(var(--tss-primary-shadow-color-root),0.108);\r\n");

                    sb.appendLine("}");

                    sb.appendLine(".tss-dark-mode {");
                    sb.append("  --tss-primary-background-color-root: ").append(primaryDarkColor.ToRGBvar()).appendLine(";");
                    sb.append("  --tss-link-color-root: ").append(primaryDarkColor.ToRGBvar()).appendLine(";");
                    sb.append("  --tss-primary-border-color-root: ").append(borderColorDark.ToRGBvar()).appendLine(";");
                    sb.append("  --tss-primary-background-hover-color-root: ").append(borderColorDark.ToRGBvar()).appendLine(";");
                    sb.append("  --tss-primary-background-active-color-root: ").append(backgroundActiveDark.ToRGBvar()).appendLine(";");
                    sb.append("  --tss-primary-shadow-color-root: ").append(primaryDarkColor.ToRGBvar()).appendLine(";");

                    sb.append("\r\n    --tss-primary-background-color: rgb(var(--tss-primary-background-color-root ));\r\n    --tss-link-color: rgb(var(--tss-link-color-root ));\r\n    --tss-primary-border-color: rgb(var(--tss-primary-border-color-root ));\r\n    --tss-primary-background-hover-color: rgb(var(--tss-primary-background-hover-color-root ));\r\n    --tss-primary-background-active-color: rgb(var(--tss-primary-background-active-color-root ));\r\n    --tss-primary-shadow: 0 3.6px 5.6px 0 rgba(var(--tss-primary-shadow-color-root),0.132), 2px 2.3px 5.9px 0 rgba(var(--tss-primary-shadow-color-root),0.108);\r\n");



                    sb.appendLine("}");

                    tss.UI.Theme._primaryStyleElement = H5.global.document.createElement("style");
                    tss.UI.Theme._primaryStyleElement.type = "text/css";
                    tss.UI.Theme._primaryStyleElement.appendChild(H5.global.document.createTextNode(sb.toString()));

                    var head = H5.global.document.getElementsByTagName("head")[0];
                    head.appendChild(tss.UI.Theme._primaryStyleElement);
                }
            }
        }
    });

    H5.define("tss.UI.Theme.Danger", {
        $kind: "nested class",
        statics: {
            fields: {
                Background: null,
                Foreground: null,
                Border: null,
                BackgroundHover: null,
                ForegroundHover: null,
                BackgroundActive: null,
                ForegroundActive: null
            },
            ctors: {
                init: function () {
                    this.Background = "var(--tss-danger-background-color)";
                    this.Foreground = "var(--tss-danger-foreground-color)";
                    this.Border = "var(--tss-danger-border-color)";
                    this.BackgroundHover = "var(--tss-danger-background-hover-color)";
                    this.ForegroundHover = "var(--tss-danger-foreground-hover-color)";
                    this.BackgroundActive = "var(--tss-danger-background-active-color)";
                    this.ForegroundActive = "var(--tss-danger-foreground-active-color)";
                }
            }
        }
    });

    H5.define("tss.UI.Theme.Default", {
        $kind: "nested class",
        statics: {
            fields: {
                Background: null,
                Foreground: null,
                Border: null,
                DarkBorder: null,
                InvalidBorder: null,
                BackgroundHover: null,
                ForegroundHover: null,
                BackgroundActive: null,
                ForegroundActive: null,
                Slider: null,
                SliderActive: null,
                SliderDisabled: null,
                OverlayLight: null,
                OverlayDark: null,
                CardShadow: null
            },
            ctors: {
                init: function () {
                    this.Background = "var(--tss-default-background-color)";
                    this.Foreground = "var(--tss-default-foreground-color)";
                    this.Border = "var(--tss-default-border-color)";
                    this.DarkBorder = "var(--tss-dark-border-color)";
                    this.InvalidBorder = "var(--tss-invalid-border-color)";
                    this.BackgroundHover = "var(--tss-default-background-hover-color)";
                    this.ForegroundHover = "var(--tss-default-foreground-hover-color)";
                    this.BackgroundActive = "var(--tss-default-background-active-color)";
                    this.ForegroundActive = "var(--tss-default-foreground-active-color)";
                    this.Slider = "var(--tss-slider-color)";
                    this.SliderActive = "var(--tss-slider-active-color)";
                    this.SliderDisabled = "var(--tss-slider-disabled-color)";
                    this.OverlayLight = "var(--tss-overlay-light)";
                    this.OverlayDark = "var(--tss-overlay-dark)";
                    this.CardShadow = "var(--tss-card-shadow, 0 0.3px 0.9px 0 rgba(0,0,0,0.108))";
                }
            }
        }
    });

    H5.define("tss.UI.Theme.Disabled", {
        $kind: "nested class",
        statics: {
            fields: {
                Background: null,
                Foreground: null
            },
            ctors: {
                init: function () {
                    this.Background = "var(--tss-disabled-background-color)";
                    this.Foreground = "var(--tss-disabled-foreground-color)";
                }
            }
        }
    });

    H5.define("tss.UI.Theme.Primary", {
        $kind: "nested class",
        statics: {
            fields: {
                Background: null,
                Foreground: null,
                Border: null,
                BackgroundHover: null,
                ForegroundHover: null,
                BackgroundActive: null,
                ForegroundActive: null
            },
            ctors: {
                init: function () {
                    this.Background = "var(--tss-primary-background-color)";
                    this.Foreground = "var(--tss-primary-foreground-color)";
                    this.Border = "var(--tss-primary-border-color)";
                    this.BackgroundHover = "var(--tss-primary-background-hover-color)";
                    this.ForegroundHover = "var(--tss-primary-foreground-hover-color)";
                    this.BackgroundActive = "var(--tss-primary-background-active-color)";
                    this.ForegroundActive = "var(--tss-primary-foreground-active-color)";
                }
            }
        }
    });

    H5.define("tss.UI.Theme.Secondary", {
        $kind: "nested class",
        statics: {
            fields: {
                Background: null,
                Foreground: null
            },
            ctors: {
                init: function () {
                    this.Background = "var(--tss-secondary-background-color)";
                    this.Foreground = "var(--tss-secondary-foreground-color)";
                }
            }
        }
    });

    H5.define("tss.UI.Theme.Success", {
        $kind: "nested class",
        statics: {
            fields: {
                Background: null,
                Foreground: null,
                Border: null,
                BackgroundHover: null,
                ForegroundHover: null,
                BackgroundActive: null,
                ForegroundActive: null
            },
            ctors: {
                init: function () {
                    this.Background = "var(--tss-success-background-color)";
                    this.Foreground = "var(--tss-success-foreground-color)";
                    this.Border = "var(--tss-success-border-color)";
                    this.BackgroundHover = "var(--tss-success-background-hover-color)";
                    this.ForegroundHover = "var(--tss-success-foreground-hover-color)";
                    this.BackgroundActive = "var(--tss-success-background-active-color)";
                    this.ForegroundActive = "var(--tss-success-foreground-active-color)";
                }
            }
        }
    });

    H5.define("tss.Unit", {
        $kind: "enum",
        statics: {
            fields: {
                default: "default",
                auto: "auto",
                "%": "%",
                px: "px",
                vh: "vh",
                vw: "vw",
                inherit: "inherit",
                fr: "fr"
            }
        },
        $utype: System.String
    });

    H5.define("tss.us", {
        statics: {
            fields: {
                _cachedIntegers: null
            },
            ctors: {
                init: function () {
                    this._cachedIntegers = tss.us.CreateCache(32);
                }
            },
            methods: {
                FromPixelCache: function (value) {
                    return tss.us._cachedIntegers[System.Array.index(value, tss.us._cachedIntegers)];
                },
                CreateCache: function (count) {
                    var us = System.Array.init(count, null, tss.us);
                    for (var i = 0; i < us.length; i = (i + 1) | 0) {
                        us[System.Array.index(i, us)] = new tss.us.$ctor1(i, "px");
                    }
                    return us;
                },
                Auto: function () {
                    return new tss.us.ctor();
                },
                Inherit: function () {
                    var $t;
                    return ($t = new tss.us.ctor(), $t.Unit = "inherit", $t);
                },
                op_UnaryNegation: function (a) {
                    return new tss.us.$ctor1(-a.Size, a.Unit);
                },
                op_UnaryPlus: function (a) {
                    return new tss.us.$ctor1(a.Size, a.Unit);
                }
            }
        },
        fields: {
            _cachedValue: null,
            Size: 0,
            Unit: "default"
        },
        ctors: {
            $ctor1: function (size, unit) {
                this.$initialize();
                if (unit === "default") {
                    throw new System.ArgumentException.$ctor1("unit");
                }

                this.Size = size;
                this.Unit = unit;
            },
            ctor: function () {
                this.$initialize();
                this.Unit = "auto";
            }
        },
        methods: {
            toString: function () {
                if (this._cachedValue) {
                    return this._cachedValue;
                }

                switch (this.Unit) {
                    case "default": 
                        throw new System.ArgumentException.$ctor1("Unit");
                    case "auto": 
                        return "auto";
                    case "inherit": 
                        return "inherit";
                    case "%": 
                        this._cachedValue = this.Size + '%';
                        break;
                    case "px": 
                        this._cachedValue = this.Size + 'px';
                        break;
                    case "vh": 
                        this._cachedValue = this.Size + 'vh';
                        break;
                    case "vw": 
                        this._cachedValue = this.Size + 'vw';
                        break;
                    case "fr": 
                        this._cachedValue = this.Size + 'fr';
                        break;
                }

                return this._cachedValue;
            }
        }
    });

    H5.define("tss.usX", {
        statics: {
            methods: {
                px$1: function (value) {
                    if (value > 0 && value < 32) {
                        return tss.us.FromPixelCache(value);
                    }
                    return new tss.us.$ctor1(value, "px");
                },
                px: function (value) {
                    return new tss.us.$ctor1(value, "px");
                },
                px$2: function (value) {
                    return new tss.us.$ctor1(value, "px");
                },
                percent$1: function (value) {
                    return new tss.us.$ctor1(value, "%");
                },
                percent: function (value) {
                    return new tss.us.$ctor1(value, "%");
                },
                percent$2: function (value) {
                    return new tss.us.$ctor1(value, "%");
                },
                vh$1: function (value) {
                    return new tss.us.$ctor1(value, "vh");
                },
                vh: function (value) {
                    return new tss.us.$ctor1(value, "vh");
                },
                vh$2: function (value) {
                    return new tss.us.$ctor1(value, "vh");
                },
                vw$1: function (value) {
                    return new tss.us.$ctor1(value, "vw");
                },
                vw: function (value) {
                    return new tss.us.$ctor1(value, "vw");
                },
                vw$2: function (value) {
                    return new tss.us.$ctor1(value, "vw");
                },
                fr$1: function (value) {
                    return new tss.us.$ctor1(value, "fr");
                },
                fr: function (value) {
                    return new tss.us.$ctor1(value, "fr");
                },
                fr$2: function (value) {
                    return new tss.us.$ctor1(value, "fr");
                }
            }
        }
    });

    H5.define("tss.Validation", {
        statics: {
            methods: {
                NotEmpty: function (textArea) {
                    return System.String.isNullOrWhiteSpace(textArea.Text) ? TNT.T.t$1("must not be blank") : null;
                },
                NotEmpty$1: function (textBox) {
                    return System.String.isNullOrWhiteSpace(textBox.Text) ? TNT.T.t$1("must not be blank") : null;
                },
                NotNegativeInteger: function (textBox) {
                    var numericValue = { };
                    return ((System.String.isNullOrWhiteSpace(textBox.Text) || System.Linq.Enumerable.from(textBox.Text.trim(), System.Char).any(function (c) {
                            return System.String.indexOf(("0123456789"), String.fromCharCode(c)) === -1;
                        }) || !System.UInt32.tryParse(textBox.Text, numericValue))) ? TNT.T.t$1("must be a positive whole number") : null;
                },
                NonZeroPositiveInteger: function (textBox) {
                    var numericValue = { };
                    return ((System.String.isNullOrWhiteSpace(textBox.Text) || System.Linq.Enumerable.from(textBox.Text.trim(), System.Char).any(function (c) {
                            return System.String.indexOf(("0123456789"), String.fromCharCode(c)) === -1;
                        }) || !System.UInt32.tryParse(textBox.Text, numericValue) || numericValue.v === 0)) ? TNT.T.t$1("must be a positive whole number, except zero") : null;
                },
                LightColor: function (colorPicker) {
                    return colorPicker.Color.GetBrightness() < 0.5 ? TNT.T.t$1("must be a light color") : null;
                },
                DarkColor: function (colorPicker) {
                    return colorPicker.Color.GetBrightness() > 0.5 ? TNT.T.t$1("must be a dark color") : null;
                },
                NotInThePast$1: function (dateTimePicker) {
                    return System.DateTimeOffset.op_LessThan(dateTimePicker.DateTime.$clone(), System.DateTimeOffset.op_Implicit(System.DateTime.getNow())) ? TNT.T.t$1("must not be in the past") : null;
                },
                NotInThePast: function (datePicker) {
                    return System.DateTimeOffset.op_LessThan(datePicker.Date.$clone(), System.DateTimeOffset.op_Implicit(System.DateTime.getNow())) ? TNT.T.t$1("must not be in the past") : null;
                },
                NotInTheFuture$1: function (dateTimePicker) {
                    return System.DateTimeOffset.op_GreaterThan(dateTimePicker.DateTime.$clone(), System.DateTimeOffset.op_Implicit(System.DateTime.getNow())) ? TNT.T.t$1("must not be in the future") : null;
                },
                NotInTheFuture: function (datePicker) {
                    return System.DateTimeOffset.op_GreaterThan(datePicker.Date.$clone(), System.DateTimeOffset.op_Implicit(System.DateTime.getNow())) ? TNT.T.t$1("must not be in the future") : null;
                },
                BetweenRange$1: function (dateTimePicker, from, to) {
                    return System.DateTimeOffset.op_GreaterThan(dateTimePicker.DateTime.$clone(), System.DateTimeOffset.op_Implicit(from)) && System.DateTimeOffset.op_LessThan(dateTimePicker.DateTime.$clone(), System.DateTimeOffset.op_Implicit(to)) ? TNT.T.t(System.Runtime.CompilerServices.FormattableStringFactory.Create("must be between {0} and {1}", [H5.box(from, System.DateTime, System.DateTime.format), H5.box(to, System.DateTime, System.DateTime.format)])) : null;
                },
                BetweenRange: function (datePicker, from, to) {
                    return System.DateTimeOffset.op_GreaterThan(datePicker.Date.$clone(), System.DateTimeOffset.op_Implicit(from)) && System.DateTimeOffset.op_LessThan(datePicker.Date.$clone(), System.DateTimeOffset.op_Implicit(to)) ? TNT.T.t(System.Runtime.CompilerServices.FormattableStringFactory.Create("must be between {0} and {1}", [H5.box(from, System.DateTime, System.DateTime.format), H5.box(to, System.DateTime, System.DateTime.format)])) : null;
                }
            }
        }
    });

    /**
     * @memberof System
     * @callback System.Func
     * @param   {TComponent}    arg
     * @return  {string}
     */

    H5.define("tss.vX", {
        statics: {
            methods: {
                /**
                 * This applies validation logic to a component that implements ICanValidate-of-itself and will register the component with a Validator instance if one is provided
                 *
                 * @static
                 * @public
                 * @this tss.vX
                 * @memberof tss.vX
                 * @param   {Function}         TComponent    
                 * @param   {TComponent}       component     
                 * @param   {System.Func}      validate      
                 * @param   {tss.Validator}    validator
                 * @return  {TComponent}
                 */
                Validation: function (TComponent, component, validate, validator) {
                    if (validator === void 0) { validator = null; }
                    var ApplyValidation = null;
                    var WouldBeValid = null;
                    if (component == null) {
                        throw new System.ArgumentNullException.$ctor1("component");
                    }
                    if (H5.staticEquals(validate, null)) {
                        throw new System.ArgumentNullException.$ctor1("validate");
                    }
                    ApplyValidation = function () {
                        var validationWarningIfAny = validate(component);
                        var isInvalid = !System.String.isNullOrWhiteSpace(validationWarningIfAny);
                        component.tss$ICV$Error = isInvalid ? validationWarningIfAny : "";
                        component.tss$ICV$IsInvalid = isInvalid;
                    };



                    component["tss$ICVT$" + H5.getTypeAlias(TComponent) + "$Attach"](function (_) {
                        ApplyValidation();
                    });
                    WouldBeValid = function () {
                        return System.String.isNullOrWhiteSpace(validate(component));
                    };
                    validator != null ? validator.Register(TComponent, component, WouldBeValid, function () {
                            ApplyValidation();
                        }) : null;
                    ;

                    return component;




                }
            }
        }
    });

    H5.define("tss.VS", {
        $kind: "enum",
        statics: {
            fields: {
                /**
                 * This will happen if EVERY registered component has been validated - this will only occur if the User has interacted with all of them OR if a full (re-)validation has been performed
                 *
                 * @static
                 * @public
                 * @memberof tss.VS
                 * @constant
                 * @default 0
                 * @type tss.VS
                 */
                EveryComponentIsValid: 0,
                /**
                 * This will happen if at least one component has been checked and found to be invalid - it's possible that only a subset of all registered components will have been checked if the User hasn't finished interacting with the form and a full (re-)validation hasn't been performed yet
                 *
                 * @static
                 * @public
                 * @memberof tss.VS
                 * @constant
                 * @default 1
                 * @type tss.VS
                 */
                Invalid: 1,
                /**
                 * This means that none of the components that have been checked have been found to be invalid - this might mean that the User has only interacted with one registered component so far and THAT is valid while others are not valid yet; they will be checked when the User starts
                 interacting with them and/or if a full (re-)validation is performed
                 *
                 * @static
                 * @public
                 * @memberof tss.VS
                 * @constant
                 * @default 2
                 * @type tss.VS
                 */
                NoInvalidComponentFoundSoFar: 2
            }
        }
    });

    H5.define("tss.Validator", {
        fields: {
            _registeredComponents: null,
            _registeredComponentsThatUserHasInteractedWith: null,
            _timeout: 0,
            _callsDepth: 0
        },
        events: {
            ValidationOccured: null
        },
        props: {
            /**
             * This will trigger the validation logic for EVERY registered component and return false if any of them are not in a valid state (and, by doing so, their display state will be updated accordingly)
             *
             * @instance
             * @public
             * @readonly
             * @memberof tss.Validator
             * @function IsValid
             * @type boolean
             */
            IsValid: {
                get: function () {
                    return this.Revalidate();
                }
            }
        },
        ctors: {
            init: function () {
                this._timeout = 0;
                this._callsDepth = 0;
            },
            ctor: function () {
                this.$initialize();
                this._registeredComponents = new (System.Collections.Generic.Dictionary$2(tss.ICV,System.ValueTuple$2(Function,Function))).ctor();
                this._registeredComponentsThatUserHasInteractedWith = new (System.Collections.Generic.HashSet$1(tss.ICV)).ctor();
            }
        },
        methods: {
            Register: function (T, component, wouldBeValid, validate) {
                if (component == null) {
                    throw new System.ArgumentNullException.$ctor1("component");
                }
                if (H5.staticEquals(wouldBeValid, null)) {
                    throw new System.ArgumentNullException.$ctor1("wouldBeValid");
                }
                if (H5.staticEquals(validate, null)) {
                    throw new System.ArgumentNullException.$ctor1("validate");
                }

                this._registeredComponents.add(component, new (System.ValueTuple$2(Function,Function)).$ctor1(wouldBeValid, validate));

                component["tss$ICVT$" + H5.getTypeAlias(T) + "$Attach"](H5.fn.bind(this, function (_) {
                    this._registeredComponentsThatUserHasInteractedWith.add(component);
                    this.RaiseOnValidation();
                }));
            },
            ResetState: function () {
                var $t;
                this._registeredComponentsThatUserHasInteractedWith.clear();
                $t = H5.getEnumerator(this._registeredComponents);
                try {
                    while ($t.moveNext()) {
                        var comp = $t.Current;
                        comp.key.tss$ICV$IsInvalid = false;
                        comp.key.tss$ICV$Error = "";
                    }
                } finally {
                    if (H5.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            RegisterFromCallback: function (isInvalid, onRevalidation) {
                var dummy = new tss.Validator.DummyComponentToUseForCustomValidationLogicNotTiedToOneComponent(isInvalid);
                this._registeredComponents.add(dummy, new (System.ValueTuple$2(Function,Function)).$ctor1(isInvalid, onRevalidation));
            },
            OnValidation: function (onValidation) {
                this.addValidationOccured(onValidation);
                return this;
            },
            RaiseOnValidation: function () {
                window.clearTimeout(this._timeout);
                this._timeout = window.setTimeout(H5.fn.bind(this, function (_) {
                    var validity = this.GetValidity(true, true);
                    !H5.staticEquals(this.ValidationOccured, null) ? this.ValidationOccured(validity) : null;
                }), 100);
            },
            /**
             * This will check whether the form's values would currently be considered valid but without updating any the visual states relating to validity - this may be used when a form is being displayed to the User where the fields MIGHT all have been
             pre-populated and so the form may be valid already (but if it's not valid yet then we don't want the fields that the User hasn't edited yet to be shown as invalid until they've had a chance to interact with them).
             This would be used if the submit on the form should be set to disabled initially if the form is invalid (or enabled if IS valid) and subsequently updated on each ValidationOccured event.
             *
             * @instance
             * @public
             * @this tss.Validator
             * @memberof tss.Validator
             * @return  {boolean}
             */
            AreCurrentValuesAllValid: function () {
                return this.GetValidity(false, false) !== tss.VS.Invalid;
            },
            /**
             * This will trigger the validation logic for EVERY registered component and return false if any of them are not in a valid state (and, by doing so, their display state will be updated accordingly)
             *
             * @instance
             * @public
             * @this tss.Validator
             * @memberof tss.Validator
             * @return  {boolean}
             */
            Revalidate: function () {
                var validity = this.GetValidity(false, true);
                !H5.staticEquals(this.ValidationOccured, null) ? this.ValidationOccured(validity) : null;
                return validity !== tss.VS.Invalid;
            },
            /**
             * This will return false if any of the components that were checked were found to be in an invalid state (the components checked depends upon validateOnlyUserEditedComponents and which registered components that the User has interacted with)
             *
             * @instance
             * @private
             * @this tss.Validator
             * @memberof tss.Validator
             * @param   {boolean}    validateOnlyUserEditedComponents    
             * @param   {boolean}    updateComponentAppearances
             * @return  {tss.VS}
             */
            GetValidity: function (validateOnlyUserEditedComponents, updateComponentAppearances) {
                var $t, $t1;
                if (this._callsDepth > 2) {
                    return tss.VS.EveryComponentIsValid;
                }

                var atLeastOneComponentNotChecked = false;
                var looksValidSoFar = true;
                this._callsDepth = (this._callsDepth + 1) | 0;
                $t = H5.getEnumerator(this._registeredComponents);
                try {
                    while ($t.moveNext()) {
                        var kv = $t.Current;
                        if (validateOnlyUserEditedComponents && !this._registeredComponentsThatUserHasInteractedWith.contains(kv.key)) {
                            atLeastOneComponentNotChecked = true;
                            continue;
                        }

                        var componentIsInvalid;
                        if (updateComponentAppearances) {
                            !H5.staticEquals(($t1 = kv.value.Item2), null) ? $t1() : null;
                            componentIsInvalid = kv.key.tss$ICV$IsInvalid;
                        } else {
                            componentIsInvalid = !kv.value.Item1();
                        }

                        if (componentIsInvalid) {
                            looksValidSoFar = false;
                        }
                    }
                } finally {
                    if (H5.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                this._callsDepth = (this._callsDepth - 1) | 0;

                if (!looksValidSoFar) {
                    return tss.VS.Invalid;
                }

                return atLeastOneComponentNotChecked ? tss.VS.NoInvalidComponentFoundSoFar : tss.VS.EveryComponentIsValid;
            }
        }
    });

    H5.define("tss.VirtualizedList.ScrollDirection", {
        $kind: "nested enum",
        statics: {
            fields: {
                Neutral: 0,
                Up: 1,
                Down: 2
            }
        }
    });

    H5.define("tss.WeakMap", {
        fields: {
            _map: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this._map = new WeakMap();
            }
        },
        methods: {
            Get: function (key) {
                return H5.unbox(this._map).get(H5.unbox(key), );
            },
            Set: function (key, value) {
                H5.unbox(this._map).set(H5.unbox(key), H5.unbox(value));
            },
            Has: function (key) {
                return H5.unbox(this._map).has(H5.unbox(key));
            },
            Delete: function (key) {
                H5.unbox(this._map).delete(H5.unbox(key));
            }
        }
    });

    H5.define("Tesserae.WeakRef$1", function (T) { return {

    }; });

    H5.define("TNT.T", {
        statics: {
            fields: {
                _currentTranslation: null,
                _currentTransformer: null
            },
            methods: {
                t: function (formattableString) {
                    var format = formattableString.Format;
                    var translatedFormat = { };
                    if (H5.is(TNT.T._currentTranslation, System.Object) && TNT.T._currentTranslation.tryGetValue(format, translatedFormat)) {
                        format = translatedFormat.v;
                    }

                    var result;

                    try {
                        result = System.String.format.apply(System.String, [format].concat(formattableString.GetArguments()));
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        result = System.String.format.apply(System.String, [formattableString.Format].concat(formattableString.GetArguments()));
                    }

                    if (H5.is(TNT.T._currentTransformer, System.Object)) {
                        return TNT.T._currentTransformer(result);
                    }


                    return result;
                },
                t$1: function (originalString) {
                    var translated = { };
                    if (H5.is(TNT.T._currentTranslation, System.Object) && TNT.T._currentTranslation.tryGetValue(originalString, translated)) {
                        if (H5.is(TNT.T._currentTransformer, System.Object)) {
                            return TNT.T._currentTransformer(translated.v);
                        }

                        return translated.v;
                    }

                    if (H5.is(TNT.T._currentTransformer, System.Object)) {
                        return TNT.T._currentTransformer(originalString);
                    }

                    return originalString;
                },
                SetTranslation: function (translation) {
                    TNT.T._currentTranslation = translation;
                }
            }
        }
    });

    H5.define("tss.IC", {
        $kind: "interface"
    });

    H5.define("tss.CombinedObservableT2", function (T1, T2) { return {
        inherits: [tss.IOBS(System.ValueTuple$2(T1,T2))],
        fields: {
            _first: null,
            _second: null,
            _refreshTimeout: 0,
            _delayInMs: 0
        },
        events: {
            ValueChanged: null
        },
        props: {
            Value: {
                get: function () {
                    return new (System.ValueTuple$2(T1,T2)).$ctor1(this._first["tss$IOBS$" + H5.getTypeAlias(T1) + "$Value"], this._second["tss$IOBS$" + H5.getTypeAlias(T2) + "$Value"]);
                }
            }
        },
        alias: [
            "Value", "tss$IOBS$System$ValueTuple$2$" + H5.getTypeAlias(T1) + "$" + H5.getTypeAlias(T2) + "$Value",
            "Observe", "tss$IOBS$System$ValueTuple$2$" + H5.getTypeAlias(T1) + "$" + H5.getTypeAlias(T2) + "$Observe",
            "ObserveFutureChanges", "tss$IOBS$System$ValueTuple$2$" + H5.getTypeAlias(T1) + "$" + H5.getTypeAlias(T2) + "$ObserveFutureChanges",
            "StopObserving", "tss$IOBS$System$ValueTuple$2$" + H5.getTypeAlias(T1) + "$" + H5.getTypeAlias(T2) + "$StopObserving"
        ],
        ctors: {
            init: function () {
                this._delayInMs = 16;
            },
            ctor: function (o1, o2) {
                this.$initialize();
                o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$ObserveFutureChanges"](H5.fn.bind(this, function (_) {
                    this.RaiseOnValueChanged();
                }));
                o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$ObserveFutureChanges"](H5.fn.bind(this, function (_) {
                    this.RaiseOnValueChanged();
                }));
                this._first = o1;
                this._second = o2;
            }
        },
        methods: {
            Observe: function (valueGetter) {
                this.Observe$1(valueGetter, true);
            },
            Observe$1: function (valueGetter, callbackImmediately) {
                this.addValueChanged(valueGetter);
                if (callbackImmediately) {
                    valueGetter(this.Value.$clone());
                }
            },
            ObserveFutureChanges: function (valueGetter) {
                this.Observe$1(valueGetter, false);
            },
            StopObserving: function (valueGetter) {
                this.removeValueChanged(valueGetter);
            },
            RaiseOnValueChanged: function () {
                window.clearTimeout(this._refreshTimeout);
                this._refreshTimeout = window.setTimeout(H5.fn.bind(this, function (_) {
                    !H5.staticEquals(this.ValueChanged, null) ? this.ValueChanged(this.Value.$clone()) : null;
                }), this._delayInMs);
            }
        }
    }; });

    H5.define("tss.CombinedObservableT3", function (T1, T2, T3) { return {
        inherits: [tss.IOBS(System.ValueTuple$3(T1,T2,T3))],
        fields: {
            _first: null,
            _second: null,
            _third: null,
            _refreshTimeout: 0,
            _delayInMs: 0
        },
        events: {
            ValueChanged: null
        },
        props: {
            Value: {
                get: function () {
                    return new (System.ValueTuple$3(T1,T2,T3)).$ctor1(this._first["tss$IOBS$" + H5.getTypeAlias(T1) + "$Value"], this._second["tss$IOBS$" + H5.getTypeAlias(T2) + "$Value"], this._third["tss$IOBS$" + H5.getTypeAlias(T3) + "$Value"]);
                }
            }
        },
        alias: [
            "Value", "tss$IOBS$System$ValueTuple$3$" + H5.getTypeAlias(T1) + "$" + H5.getTypeAlias(T2) + "$" + H5.getTypeAlias(T3) + "$Value",
            "Observe", "tss$IOBS$System$ValueTuple$3$" + H5.getTypeAlias(T1) + "$" + H5.getTypeAlias(T2) + "$" + H5.getTypeAlias(T3) + "$Observe",
            "ObserveFutureChanges", "tss$IOBS$System$ValueTuple$3$" + H5.getTypeAlias(T1) + "$" + H5.getTypeAlias(T2) + "$" + H5.getTypeAlias(T3) + "$ObserveFutureChanges",
            "StopObserving", "tss$IOBS$System$ValueTuple$3$" + H5.getTypeAlias(T1) + "$" + H5.getTypeAlias(T2) + "$" + H5.getTypeAlias(T3) + "$StopObserving"
        ],
        ctors: {
            init: function () {
                this._delayInMs = 16;
            },
            ctor: function (o1, o2, o3) {
                this.$initialize();
                o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$ObserveFutureChanges"](H5.fn.bind(this, function (_) {
                    this.RaiseOnValueChanged();
                }));
                o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$ObserveFutureChanges"](H5.fn.bind(this, function (_) {
                    this.RaiseOnValueChanged();
                }));
                o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$ObserveFutureChanges"](H5.fn.bind(this, function (_) {
                    this.RaiseOnValueChanged();
                }));
                this._first = o1;
                this._second = o2;
                this._third = o3;
            }
        },
        methods: {
            Observe: function (valueGetter) {
                this.Observe$1(valueGetter, true);
            },
            Observe$1: function (valueGetter, callbackImmediately) {
                this.addValueChanged(valueGetter);
                if (callbackImmediately) {
                    valueGetter(this.Value.$clone());
                }
            },
            ObserveFutureChanges: function (valueGetter) {
                this.Observe$1(valueGetter, false);
            },
            StopObserving: function (valueGetter) {
                this.removeValueChanged(valueGetter);
            },
            RaiseOnValueChanged: function () {
                window.clearTimeout(this._refreshTimeout);
                this._refreshTimeout = window.setTimeout(H5.fn.bind(this, function (_) {
                    !H5.staticEquals(this.ValueChanged, null) ? this.ValueChanged(this.Value.$clone()) : null;
                }), this._delayInMs);
            }
        }
    }; });

    H5.define("tss.CombinedObservableT4", function (T1, T2, T3, T4) { return {
        inherits: [tss.IOBS(System.ValueTuple$4(T1,T2,T3,T4))],
        fields: {
            _first: null,
            _second: null,
            _third: null,
            _forth: null,
            _refreshTimeout: 0,
            _delayInMs: 0
        },
        events: {
            ValueChanged: null
        },
        props: {
            Value: {
                get: function () {
                    return new (System.ValueTuple$4(T1,T2,T3,T4)).$ctor1(this._first["tss$IOBS$" + H5.getTypeAlias(T1) + "$Value"], this._second["tss$IOBS$" + H5.getTypeAlias(T2) + "$Value"], this._third["tss$IOBS$" + H5.getTypeAlias(T3) + "$Value"], this._forth["tss$IOBS$" + H5.getTypeAlias(T4) + "$Value"]);
                }
            }
        },
        alias: [
            "Value", "tss$IOBS$System$ValueTuple$4$" + H5.getTypeAlias(T1) + "$" + H5.getTypeAlias(T2) + "$" + H5.getTypeAlias(T3) + "$" + H5.getTypeAlias(T4) + "$Value",
            "Observe", "tss$IOBS$System$ValueTuple$4$" + H5.getTypeAlias(T1) + "$" + H5.getTypeAlias(T2) + "$" + H5.getTypeAlias(T3) + "$" + H5.getTypeAlias(T4) + "$Observe",
            "ObserveFutureChanges", "tss$IOBS$System$ValueTuple$4$" + H5.getTypeAlias(T1) + "$" + H5.getTypeAlias(T2) + "$" + H5.getTypeAlias(T3) + "$" + H5.getTypeAlias(T4) + "$ObserveFutureChanges",
            "StopObserving", "tss$IOBS$System$ValueTuple$4$" + H5.getTypeAlias(T1) + "$" + H5.getTypeAlias(T2) + "$" + H5.getTypeAlias(T3) + "$" + H5.getTypeAlias(T4) + "$StopObserving"
        ],
        ctors: {
            init: function () {
                this._delayInMs = 16;
            },
            ctor: function (o1, o2, o3, o4) {
                this.$initialize();
                o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$ObserveFutureChanges"](H5.fn.bind(this, function (_) {
                    this.RaiseOnValueChanged();
                }));
                o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$ObserveFutureChanges"](H5.fn.bind(this, function (_) {
                    this.RaiseOnValueChanged();
                }));
                o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$ObserveFutureChanges"](H5.fn.bind(this, function (_) {
                    this.RaiseOnValueChanged();
                }));
                o4["tss$IOBS$" + H5.getTypeAlias(T4) + "$ObserveFutureChanges"](H5.fn.bind(this, function (_) {
                    this.RaiseOnValueChanged();
                }));
                this._first = o1;
                this._second = o2;
                this._third = o3;
                this._forth = o4;
            }
        },
        methods: {
            Observe: function (valueGetter) {
                this.Observe$1(valueGetter, true);
            },
            Observe$1: function (valueGetter, callbackImmediately) {
                this.addValueChanged(valueGetter);
                if (callbackImmediately) {
                    valueGetter(this.Value.$clone());
                }
            },
            ObserveFutureChanges: function (valueGetter) {
                this.Observe$1(valueGetter, false);
            },
            StopObserving: function (valueGetter) {
                this.removeValueChanged(valueGetter);
            },
            RaiseOnValueChanged: function () {
                window.clearTimeout(this._refreshTimeout);
                this._refreshTimeout = window.setTimeout(H5.fn.bind(this, function (_) {
                    !H5.staticEquals(this.ValueChanged, null) ? this.ValueChanged(this.Value.$clone()) : null;
                }), this._delayInMs);
            }
        }
    }; });

    H5.define("tss.ComponentCache", function (TComponent) { return {
        inherits: [tss.ComponentCacheBase(TComponent)],
        fields: {
            _createComponentExpression: null,
            _componentCache: null
        },
        ctors: {
            ctor: function (createComponentExpression) {
                this.$initialize();
                tss.ComponentCacheBase(TComponent).ctor.call(this);
                this._createComponentExpression = createComponentExpression || (function () {
                    throw new System.ArgumentNullException.$ctor1("createComponentExpression");
                })();

                this._componentCache = new (System.Collections.Generic.List$1(System.ValueTuple$2(System.Int32,HTMLElement))).ctor();
            }
        },
        methods: {
            AddComponents: function (components) {
                this.AddToComponents(components);

                return this;
            },
            GetAllRenderedComponentsFromCache: function () {
                return new (H5.GeneratorEnumerable$1(HTMLElement))(H5.fn.bind(this, function ()  {
                    var $s = 0,
                        $jff,
                        $rv,
                        $t,
                        componentAndKey,
                        Key,
                        HtmlElement,
                        htmlElement,
                        $ae;

                    var $en = new (H5.GeneratorEnumerator$1(HTMLElement))(H5.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($s) {
                                    case 0: {
                                        $t = H5.getEnumerator(this._componentsAndKeys);
                                            $s = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ($t.moveNext()) {
                                                componentAndKey = { v : $t.Current.$clone() };
                                                $s = 2;
                                                continue;
                                            }
                                        $s = 8;
                                        continue;
                                    }
                                    case 2: {
                                        Key = { };
                                            HtmlElement = { };
                                            H5.Deconstruct(System.Linq.Enumerable.from(this._componentCache, System.ValueTuple$2(System.Int32,HTMLElement)).singleOrDefault((function ($me, componentAndKey) {
                                                        return function (component) {
                                                            return component.Item1 === componentAndKey.v.Item1;
                                                        };
                                                    })(this, componentAndKey), new (System.ValueTuple$2(System.Int32,HTMLElement))()).$clone(), Key, HtmlElement);

                                            if (HtmlElement.v != null) {
                                                $s = 3;
                                                continue;
                                            } else  {
                                                $s = 5;
                                                continue;
                                            }
                                    }
                                    case 3: {
                                        $en.current = HtmlElement.v;
                                            $s = 4;
                                            return true;
                                    }
                                    case 4: {
                                        $s = 7;
                                        continue;
                                    }
                                    case 5: {
                                        htmlElement = this._createComponentExpression(componentAndKey.v.$clone());

                                            this._componentCache.add(new (System.ValueTuple$2(System.Int32,HTMLElement)).$ctor1(componentAndKey.v.Item1, htmlElement));

                                            $en.current = htmlElement;
                                            $s = 6;
                                            return true;
                                    }
                                    case 6: {
                                        $s = 7;
                                        continue;
                                    }
                                    case 7: {
                                        $s = 1;
                                        continue;
                                    }
                                    case 8: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($ae1) {
                            $ae = System.Exception.create($ae1);
                            throw $ae;
                        }
                    }));
                    return $en;
                }));
            },
            SortComponents: function (comparison) {
                if (this.HasComponents) {
                    this._componentsAndKeys.Sort$2(function (componentAndKey, otherComponentAndKey) {
                        return comparison(componentAndKey.Item2, otherComponentAndKey.Item2);
                    });
                }

                return this;
            },
            ReverseComponentOrder: function () {
                this._componentsAndKeys.Reverse();

                return this;
            },
            Clear: function () {
                this._componentsAndKeys.clear();
                this._componentCache.clear();

                return this;
            }
        }
    }; });

    /**
     * Enables monitoring of changes for a variable of type T (this class is for listeners only, if updating the value is required then the SettableObserver should be used)
     *
     * @public
     * @class tss.ConstantObservableT
     * @implements  tss.IOBS
     * @param   {Function}    [name]    An immutable type to be observed. Be careful with non-imutable types, as they may be changed in ways that will not be repoted here
     */
    H5.define("tss.ConstantObservableT", function (T) { return {
        inherits: [tss.IOBS(T)],
        fields: {
            _value: H5.getDefaultValue(T)
        },
        props: {
            Value: {
                get: function () {
                    return this._value;
                }
            }
        },
        alias: [
            "Observe", "tss$IOBS$" + H5.getTypeAlias(T) + "$Observe",
            "ObserveFutureChanges", "tss$IOBS$" + H5.getTypeAlias(T) + "$ObserveFutureChanges",
            "StopObserving", "tss$IOBS$" + H5.getTypeAlias(T) + "$StopObserving",
            "Value", "tss$IOBS$" + H5.getTypeAlias(T) + "$Value"
        ],
        ctors: {
            ctor: function (value) {
                this.$initialize();
                this._value = value;
            }
        },
        methods: {
            Observe: function (valueGetter) {
                valueGetter(this.Value);
            },
            ObserveFutureChanges: function (valueGetter) { },
            StopObserving: function (valueGetter) { }
        }
    }; });

    H5.definei("tss.IDetailsListItemT", function (TDetailsListItem) { return {
        inherits: [tss.IDetailsListItem],
        $kind: "interface",
        $variance: [2]
    }; });

    /**
     * Sometimes you want a Defer component that will take multiple observable inputs and update when any of them change - but you may also sometimes want one or more of those inputs to actually be fixed inputs (and example is in an editor
     form where there is one field that is editable sometimes but not editable other times and you want to observe changes when it's editable but when it ISN'T editable then you don't want to have to change how you initialise your Defer
     component - sometimes with three observable inputs and sometimes with four, depending upon whether or not one is readonly). In cases like this, when a non-editable component will be displayed, this may be used to implement the
     IObservable interface to pass to Defer - if an EDITABLE version of the input is being used in that particular configuration of the form then there should be an AsObservable method on that component to use instead of this).
     *
     * @public
     * @class tss.FixedValueObservable
     * @implements  tss.IOBS
     */
    H5.define("tss.FixedValueObservable", function (TItem) { return {
        inherits: [tss.IOBS(TItem)],
        fields: {
            Value: H5.getDefaultValue(TItem)
        },
        alias: [
            "Value", "tss$IOBS$" + H5.getTypeAlias(TItem) + "$Value",
            "tss$IOBS$Observe", "tss$IOBS$" + H5.getTypeAlias(TItem) + "$Observe",
            "tss$IOBS$ObserveFutureChanges", "tss$IOBS$" + H5.getTypeAlias(TItem) + "$ObserveFutureChanges",
            "tss$IOBS$StopObserving", "tss$IOBS$" + H5.getTypeAlias(TItem) + "$StopObserving"
        ],
        ctors: {
            ctor: function (value) {
                this.$initialize();
                this.Value = value;
            }
        },
        methods: {
            tss$IOBS$Observe: function (valueGetter) { },
            tss$IOBS$ObserveFutureChanges: function (valueGetter) { },
            tss$IOBS$StopObserving: function (valueGetter) { }
        }
    }; });

    H5.define("tss.ISearchableGroupedItem", {
        inherits: [tss.ISearchableItem],
        $kind: "interface"
    });

    H5.define("tss.ListPageCache", function (TComponent) { return {
        inherits: [tss.ComponentCacheBase(TComponent)],
        fields: {
            _createPageHtmlElementExpression: null,
            _afterComponentRetrievedExpression: null,
            _pageCache: null,
            _pages: null,
            RowsPerPage: 0,
            ComponentsPerPage: 0
        },
        props: {
            PagesCount: {
                get: function () {
                    return this._pages.Count;
                }
            },
            RowsCount: {
                get: function () {
                    return H5.Int.mul(this.RowsPerPage, this.PagesCount);
                }
            }
        },
        ctors: {
            ctor: function (rowsPerPage, columnsPerRow, createPageHtmlElementExpression, afterComponentRetrievedExpression) {
                this.$initialize();
                tss.ComponentCacheBase(TComponent).ctor.call(this);
                if (rowsPerPage <= 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("rowsPerPage");
                }

                if (columnsPerRow <= 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("columnsPerRow");
                }

                this.RowsPerPage = rowsPerPage;
                this.ComponentsPerPage = H5.Int.mul(this.RowsPerPage, columnsPerRow);

                this._createPageHtmlElementExpression = createPageHtmlElementExpression || (function () {
                    throw new System.ArgumentNullException.$ctor1("createPageHtmlElementExpression");
                })();

                this._afterComponentRetrievedExpression = afterComponentRetrievedExpression || (function () {
                    throw new System.ArgumentNullException.$ctor1("afterComponentRetrievedExpression");
                })();

                this._pageCache = new (System.Collections.Generic.Dictionary$2(System.Int32,HTMLElement)).ctor();
                this._pages = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.ValueTuple$2(System.Int32,TComponent)))).ctor();
            }
        },
        methods: {
            AddComponents: function (components) {
                var currentComponentsCount = this.ComponentsCount;

                this.AddToComponents(components);
                this.AddPages(currentComponentsCount);

                return this;
            },
            RetrievePageFromCache: function (pageNumberToRetrieve) {
                if (this._pageCache.containsKey(pageNumberToRetrieve)) {
                    console.log(System.String.format("Retrieved page number {0} from cache", [H5.box(pageNumberToRetrieve, System.Int32)]));
                    return System.Collections.Generic.CollectionExtensions.GetValueOrDefault$1(System.Int32, HTMLElement, this._pageCache, pageNumberToRetrieve);
                }

                var page = this._createPageHtmlElementExpression(pageNumberToRetrieve);

                tss.UI.AppendChildren(page, System.Linq.Enumerable.from(this.GetComponentsForPage(pageNumberToRetrieve), System.ValueTuple$2(System.Int32,TComponent)).select(this._afterComponentRetrievedExpression).ToArray(HTMLElement));

                this._pageCache.add(pageNumberToRetrieve, page);

                return page;
            },
            RetrievePagesFromCache: function (rangeOfPageNumbersToRetrieve) {
                return System.Linq.Enumerable.from(rangeOfPageNumbersToRetrieve, System.Int32).select(H5.fn.cacheBind(this, this.RetrievePageFromCache));
            },
            RetrieveAllPagesFromCache: function () {
                return System.Linq.Enumerable.range(1, this.PagesCount).select(H5.fn.cacheBind(this, this.RetrievePageFromCache));
            },
            Clear: function () {
                this._componentsAndKeys.clear();
                this._pages.clear();
                this._pageCache.clear();

                return this;
            },
            AddPages: function (componentNumberToPageFrom) {
                var pagesToAdd = tss.eeX.InGroupsOf(System.ValueTuple$2(System.Int32,TComponent), System.Linq.Enumerable.from(this._componentsAndKeys, System.ValueTuple$2(System.Int32,TComponent)).skip(componentNumberToPageFrom), this.ComponentsPerPage);

                this._pages.AddRange(pagesToAdd);
            },
            GetComponentsForPage: function (pageNumber) {
                return System.Linq.Enumerable.from(this._pages, System.Collections.Generic.List$1(System.ValueTuple$2(System.Int32,TComponent))).elementAt(((pageNumber - 1) | 0));
            }
        }
    }; });

    H5.define("tss.ObservableDictionary", function (TKey, TValue) { return {
        inherits: [System.Collections.Generic.IDictionary$2(TKey,TValue),tss.IOBS(System.Collections.Generic.IReadOnlyDictionary$2(TKey,TValue))],
        fields: {
            _dictionary: null,
            _shouldHookNestedObservables: false,
            _refreshTimeout: 0
        },
        events: {
            ValueChanged: null
        },
        props: {
            Keys: {
                get: function () {
                    return this._dictionary.Keys;
                }
            },
            Values: {
                get: function () {
                    return this._dictionary.Values;
                }
            },
            Count: {
                get: function () {
                    return this._dictionary.Count;
                }
            },
            IsReadOnly: {
                get: function () {
                    return false;
                }
            },
            Value: {
                get: function () {
                    return this._dictionary;
                }
            }
        },
        alias: [
            "Observe", "tss$IOBS$System$Collections$Generic$IReadOnlyDictionary$2$" + H5.getTypeAlias(TKey) + "$" + H5.getTypeAlias(TValue) + "$Observe",
            "ObserveFutureChanges", "tss$IOBS$System$Collections$Generic$IReadOnlyDictionary$2$" + H5.getTypeAlias(TKey) + "$" + H5.getTypeAlias(TValue) + "$ObserveFutureChanges",
            "StopObserving", "tss$IOBS$System$Collections$Generic$IReadOnlyDictionary$2$" + H5.getTypeAlias(TKey) + "$" + H5.getTypeAlias(TValue) + "$StopObserving",
            "getItem", "System$Collections$Generic$IDictionary$2$" + H5.getTypeAlias(TKey) + "$" + H5.getTypeAlias(TValue) + "$getItem",
            "setItem", "System$Collections$Generic$IDictionary$2$" + H5.getTypeAlias(TKey) + "$" + H5.getTypeAlias(TValue) + "$setItem",
            "Keys", "System$Collections$Generic$IDictionary$2$" + H5.getTypeAlias(TKey) + "$" + H5.getTypeAlias(TValue) + "$Keys",
            "Values", "System$Collections$Generic$IDictionary$2$" + H5.getTypeAlias(TKey) + "$" + H5.getTypeAlias(TValue) + "$Values",
            "Count", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$" + H5.getTypeAlias(TKey) + "$" + H5.getTypeAlias(TValue) + "$Count",
            "IsReadOnly", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$" + H5.getTypeAlias(TKey) + "$" + H5.getTypeAlias(TValue) + "$IsReadOnly",
            "Value", "tss$IOBS$System$Collections$Generic$IReadOnlyDictionary$2$" + H5.getTypeAlias(TKey) + "$" + H5.getTypeAlias(TValue) + "$Value",
            "add$1", "System$Collections$Generic$IDictionary$2$" + H5.getTypeAlias(TKey) + "$" + H5.getTypeAlias(TValue) + "$add",
            "add", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$" + H5.getTypeAlias(TKey) + "$" + H5.getTypeAlias(TValue) + "$add",
            "clear", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$" + H5.getTypeAlias(TKey) + "$" + H5.getTypeAlias(TValue) + "$clear",
            "contains", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$" + H5.getTypeAlias(TKey) + "$" + H5.getTypeAlias(TValue) + "$contains",
            "containsKey", "System$Collections$Generic$IDictionary$2$" + H5.getTypeAlias(TKey) + "$" + H5.getTypeAlias(TValue) + "$containsKey",
            "copyTo", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$" + H5.getTypeAlias(TKey) + "$" + H5.getTypeAlias(TValue) + "$copyTo",
            "remove$1", "System$Collections$Generic$IDictionary$2$" + H5.getTypeAlias(TKey) + "$" + H5.getTypeAlias(TValue) + "$remove",
            "remove", "System$Collections$Generic$ICollection$1$System$Collections$Generic$KeyValuePair$2$" + H5.getTypeAlias(TKey) + "$" + H5.getTypeAlias(TValue) + "$remove",
            "tryGetValue", "System$Collections$Generic$IDictionary$2$" + H5.getTypeAlias(TKey) + "$" + H5.getTypeAlias(TValue) + "$tryGetValue",
            "GetEnumerator", ["System$Collections$Generic$IEnumerable$1$System$Collections$Generic$KeyValuePair$2$" + H5.getTypeAlias(TKey) + "$" + H5.getTypeAlias(TValue) + "$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"]
        ],
        ctors: {
            $ctor2: function (keyComparer, shouldHook) {
                if (keyComparer === void 0) { keyComparer = null; }
                if (shouldHook === void 0) { shouldHook = true; }

                tss.ObservableDictionary(TKey,TValue).ctor.call(this, new (System.Collections.Generic.Dictionary$2(TKey,TValue)).$ctor3(keyComparer), shouldHook);
            },
            ctor: function (values, shouldHook) {
                if (shouldHook === void 0) { shouldHook = true; }

                tss.ObservableDictionary(TKey,TValue).$ctor1.call(this, values, values != null ? values.Comparer : null, shouldHook);
            },
            $ctor1: function (values, keyComparer, shouldHook) {
                if (keyComparer === void 0) { keyComparer = null; }
                if (shouldHook === void 0) { shouldHook = true; }
                var $t, $t1;

                this.$initialize();
                this._dictionary = new (System.Collections.Generic.Dictionary$2(TKey,TValue)).$ctor3(keyComparer);
                this._shouldHookNestedObservables = shouldHook && tss.PossibleObservableHelpers.IsObservable(TValue);
                $t = H5.getEnumerator(values, System.Collections.Generic.KeyValuePair$2(TKey,TValue));
                try {
                    while ($t.moveNext()) {
                        var entry = $t.Current;
                        if (this._dictionary.containsKey(entry.key)) {
                            throw new System.ArgumentException.$ctor1(System.String.concat("Key appears multiple times in input data - invalid: ", entry.key));
                        }

                        this._dictionary.add(entry.key, entry.value);
                    }
                } finally {
                    if (H5.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                if (this._shouldHookNestedObservables) {
                    $t1 = H5.getEnumerator(this._dictionary);
                    try {
                        while ($t1.moveNext()) {
                            var kv = $t1.Current;
                            this.HookValue(kv.value);
                        }
                    } finally {
                        if (H5.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        },
        methods: {
            getItem: function (key) {
                return this._dictionary.getItem(key);
            },
            setItem: function (key, value) {
                var prev = { };
                if (this._dictionary.tryGetValue(key, prev)) {
                    this.UnhookValue(prev.v);
                }

                this._dictionary.setItem(key, value);
                this.HookValue(value);
                this.RaiseOnValueChanged();
            },
            Observe: function (valueGetter) {
                this.Observe$1(valueGetter, true);
            },
            Observe$1: function (valueGetter, callbackImmediately) {
                this.addValueChanged(valueGetter);
                if (callbackImmediately) {
                    valueGetter(this.Value);
                }
            },
            ObserveFutureChanges: function (valueGetter) {
                this.Observe$1(valueGetter, false);
            },
            StopObserving: function (valueGetter) {
                this.removeValueChanged(valueGetter);
            },
            AddRange: function (items) {
                var $t;
                $t = H5.getEnumerator(items, System.Collections.Generic.KeyValuePair$2(TKey,TValue));
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        this._dictionary.add(item.key, item.value);
                        this.HookValue(item.value);
                    }
                } finally {
                    if (H5.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                this.RaiseOnValueChanged();
            },
            add$1: function (key, value) {
                this._dictionary.add(key, value);
                this.HookValue(value);
                this.RaiseOnValueChanged();
            },
            add: function (item) {
                this._dictionary.add(item.key, item.value);
                this.HookValue(item.value);
                this.RaiseOnValueChanged();
            },
            clear: function () {
                var $t;
                if (this._shouldHookNestedObservables) {
                    $t = H5.getEnumerator(this._dictionary);
                    try {
                        while ($t.moveNext()) {
                            var kv = $t.Current;
                            this.UnhookValue(kv.value);
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }

                this._dictionary.clear();
                this.RaiseOnValueChanged();
            },
            contains: function (item) {
                return System.Array.contains(H5.cast(this._dictionary, System.Collections.Generic.IDictionary$2(TKey,TValue)), item, System.Collections.Generic.KeyValuePair$2(TKey,TValue));
            },
            containsKey: function (key) {
                return this._dictionary.containsKey(key);
            },
            copyTo: function (array, arrayIndex) {
                System.Array.copyTo(H5.cast(this._dictionary, System.Collections.Generic.IDictionary$2(TKey,TValue)), array, arrayIndex, System.Collections.Generic.KeyValuePair$2(TKey,TValue));
            },
            remove$1: function (key) {
                var prev = { };
                if (this._dictionary.tryGetValue(key, prev)) {
                    this._dictionary.remove(key);
                    this.UnhookValue(prev.v);
                    this.RaiseOnValueChanged();
                    return true;
                }
                return false;
            },
            remove: function (item) {
                var prev = { };
                if (this._dictionary.tryGetValue(item.key, prev) && H5.equals(item.value, prev.v)) {
                    this._dictionary.remove(item.key);
                    this.UnhookValue(prev.v);
                    this.RaiseOnValueChanged();
                    return true;
                }
                return false;
            },
            tryGetValue: function (key, value) {
                return this._dictionary.tryGetValue(key, value);
            },
            HookValue: function (v) {
                if (this._shouldHookNestedObservables) {
                    tss.PossibleObservableHelpers.ObserveFutureChangesIfObservable(v, H5.fn.cacheBind(this, this.RaiseOnValueChanged));
                }
            },
            UnhookValue: function (v) {
                if (this._shouldHookNestedObservables) {
                    tss.PossibleObservableHelpers.StopObservingIfObservable(v, H5.fn.cacheBind(this, this.RaiseOnValueChanged));
                }
            },
            RaiseOnValueChanged: function () {
                window.clearTimeout(this._refreshTimeout);
                this._refreshTimeout = window.setTimeout(H5.fn.bind(this, function (_) {
                    !H5.staticEquals(this.ValueChanged, null) ? this.ValueChanged(this._dictionary) : null;
                }), 1);
            },
            GetEnumerator: function () {
                return this._dictionary.GetEnumerator().$clone();
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return this.GetEnumerator();
            }
        }
    }; });

    H5.define("tss.ObservableList", function (T) { return {
        inherits: [System.Collections.Generic.IList$1(T),System.Collections.Generic.ICollection$1(T),tss.IOBS(System.Collections.Generic.IReadOnlyList$1(T))],
        fields: {
            _list: null,
            _shouldHookNestedObservables: false,
            _refreshTimeout: 0,
            _refreshDelay: 0
        },
        events: {
            ValueChanged: null
        },
        props: {
            Delay: {
                get: function () {
                    return this._refreshDelay;
                },
                set: function (value) {
                    this._refreshDelay = value;
                }
            },
            Count: {
                get: function () {
                    return this._list.Count;
                }
            },
            IsReadOnly: {
                get: function () {
                    return false;
                }
            },
            Value: {
                get: function () {
                    return this._list;
                }
            }
        },
        alias: [
            "Observe", "tss$IOBS$System$Collections$Generic$IReadOnlyList$1$" + H5.getTypeAlias(T) + "$Observe",
            "ObserveFutureChanges", "tss$IOBS$System$Collections$Generic$IReadOnlyList$1$" + H5.getTypeAlias(T) + "$ObserveFutureChanges",
            "StopObserving", "tss$IOBS$System$Collections$Generic$IReadOnlyList$1$" + H5.getTypeAlias(T) + "$StopObserving",
            "getItem", "System$Collections$Generic$IList$1$" + H5.getTypeAlias(T) + "$getItem",
            "setItem", "System$Collections$Generic$IList$1$" + H5.getTypeAlias(T) + "$setItem",
            "Count", "System$Collections$Generic$ICollection$1$" + H5.getTypeAlias(T) + "$Count",
            "IsReadOnly", "System$Collections$Generic$ICollection$1$" + H5.getTypeAlias(T) + "$IsReadOnly",
            "Value", "tss$IOBS$System$Collections$Generic$IReadOnlyList$1$" + H5.getTypeAlias(T) + "$Value",
            "add", "System$Collections$Generic$ICollection$1$" + H5.getTypeAlias(T) + "$add",
            "clear", "System$Collections$Generic$ICollection$1$" + H5.getTypeAlias(T) + "$clear",
            "contains", "System$Collections$Generic$ICollection$1$" + H5.getTypeAlias(T) + "$contains",
            "copyTo", "System$Collections$Generic$ICollection$1$" + H5.getTypeAlias(T) + "$copyTo",
            "indexOf", "System$Collections$Generic$IList$1$" + H5.getTypeAlias(T) + "$indexOf",
            "insert", "System$Collections$Generic$IList$1$" + H5.getTypeAlias(T) + "$insert",
            "remove", "System$Collections$Generic$ICollection$1$" + H5.getTypeAlias(T) + "$remove",
            "removeAt", "System$Collections$Generic$IList$1$" + H5.getTypeAlias(T) + "$removeAt",
            "GetEnumerator", ["System$Collections$Generic$IEnumerable$1$" + H5.getTypeAlias(T) + "$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"]
        ],
        ctors: {
            init: function () {
                this._refreshDelay = 1;
            },
            ctor: function (initialValues) {
                if (initialValues === void 0) { initialValues = []; }

                tss.ObservableList(T).$ctor1.call(this, true, initialValues);
            },
            $ctor1: function (shouldHook, initialValues) {
                if (initialValues === void 0) { initialValues = []; }
                var $t, $t1;

                this.$initialize();
                this._list = ($t = T, System.Linq.Enumerable.from(initialValues, $t).toList($t));
                this._shouldHookNestedObservables = shouldHook && tss.PossibleObservableHelpers.IsObservable(T);

                if (this._shouldHookNestedObservables) {
                    $t1 = H5.getEnumerator(this._list);
                    try {
                        while ($t1.moveNext()) {
                            var i = $t1.Current;
                            this.HookValue(i);
                        }
                    } finally {
                        if (H5.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        },
        methods: {
            getItem: function (index) {
                return this._list.getItem(index);
            },
            setItem: function (index, value) {
                if (this._list.Count > index) {
                    this.UnhookValue(this._list.getItem(index));
                }

                this._list.setItem(index, value);
                this.RaiseOnValueChanged();
            },
            Observe: function (valueGetter) {
                this.Observe$1(valueGetter, true);
            },
            Observe$1: function (valueGetter, callbackImmediately) {
                this.addValueChanged(valueGetter);
                if (callbackImmediately) {
                    valueGetter(this.Value);
                }
            },
            ObserveFutureChanges: function (valueGetter) {
                this.Observe$1(valueGetter, false);
            },
            StopObserving: function (valueGetter) {
                this.removeValueChanged(valueGetter);
            },
            RaiseOnValueChanged: function () {
                window.clearTimeout(this._refreshTimeout);
                this._refreshTimeout = window.setTimeout(H5.fn.bind(this, function (_) {
                    !H5.staticEquals(this.ValueChanged, null) ? this.ValueChanged(this._list) : null;
                }), this._refreshDelay);
            },
            add: function (item) {
                this._list.add(item);
                this.HookValue(item);
                this.RaiseOnValueChanged();
            },
            AddRange: function (enumerable) {
                var $t;
                $t = H5.getEnumerator(enumerable, T);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        this._list.add(item);
                        this.HookValue(item);
                    }
                } finally {
                    if (H5.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                this.RaiseOnValueChanged();
            },
            clear: function () {
                var $t;
                if (this._shouldHookNestedObservables) {
                    $t = H5.getEnumerator(this._list);
                    try {
                        while ($t.moveNext()) {
                            var i = $t.Current;
                            this.UnhookValue(i);
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
                this._list.clear();
                this.RaiseOnValueChanged();
            },
            contains: function (item) {
                return this._list.contains(item);
            },
            copyTo: function (array, arrayIndex) {
                this._list.copyTo(array, arrayIndex);
            },
            indexOf: function (item) {
                return this._list.indexOf(item);
            },
            insert: function (index, item) {
                if (this._list.Count > index) {
                    this.UnhookValue(this._list.getItem(index));
                }

                this._list.insert(index, item);
                this.HookValue(item);
                this.RaiseOnValueChanged();
            },
            Update: function (index, item) {
                this.removeAt(index);
                this.insert(index, item);
            },
            RemoveAll: function (match) {
                var $t;
                var toRemove = System.Linq.Enumerable.from(this._list, T).where(match).ToArray(T);
                $t = H5.getEnumerator(toRemove);
                try {
                    while ($t.moveNext()) {
                        var r = $t.Current;
                        this.remove(r);
                    }
                } finally {
                    if (H5.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return toRemove.length;
            },
            remove: function (item) {
                var removed = this._list.remove(item);
                if (removed) {
                    this.UnhookValue(item);
                    this.RaiseOnValueChanged();
                }
                return removed;
            },
            removeAt: function (index) {
                if (this._list.Count > index) {
                    this.UnhookValue(this._list.getItem(index));
                }

                this._list.removeAt(index);
                this.RaiseOnValueChanged();
            },
            HookValue: function (v) {
                if (this._shouldHookNestedObservables) {
                    tss.PossibleObservableHelpers.ObserveFutureChangesIfObservable(v, H5.fn.cacheBind(this, this.RaiseOnValueChanged));
                }
            },
            UnhookValue: function (v) {
                if (this._shouldHookNestedObservables) {
                    tss.PossibleObservableHelpers.StopObservingIfObservable(v, H5.fn.cacheBind(this, this.RaiseOnValueChanged));
                }
            },
            GetEnumerator: function () {
                return this._list.GetEnumerator().$clone();
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return this.GetEnumerator();
            }
        }
    }; });

    H5.define("tss.Pivot.PivotBeforeNavigateEvent", {
        inherits: [tss.Pivot.PivotEvent],
        $kind: "nested class",
        fields: {
            Canceled: false
        },
        ctors: {
            ctor: function (currentPivot, targetPivot) {
                this.$initialize();
                tss.Pivot.PivotEvent.ctor.call(this, currentPivot, targetPivot);
                this.Canceled = false;
            }
        },
        methods: {
            Cancel: function () {
                this.Canceled = true;
            }
        }
    });

    H5.define("tss.Pivot.PivotNavigateEvent", {
        inherits: [tss.Pivot.PivotEvent],
        $kind: "nested class",
        ctors: {
            ctor: function (currentPivot, targetPivot) {
                this.$initialize();
                tss.Pivot.PivotEvent.ctor.call(this, currentPivot, targetPivot);
            }
        }
    });

    /**
     * Enables monitoring of changes for a variable of type T (this class is for listeners only, if updating the value is required then the SettableObserver should be used)
     *
     * @abstract
     * @public
     * @class tss.ReadOnlyObservableT
     * @implements  tss.IOBS
     * @param   {Function}    [name]    An immutable type to be observed. Be careful with non-imutable types, as they may be changed in ways that will not be repoted here
     */
    H5.define("tss.ReadOnlyObservableT", function (T) { return {
        inherits: [tss.IOBS(T)],
        fields: {
            _value: H5.getDefaultValue(T),
            _comparer: null,
            _refreshTimeout: 0,
            _refreshDelay: 0
        },
        events: {
            ValueChanged: null
        },
        props: {
            Delay: {
                get: function () {
                    return this._refreshDelay;
                },
                set: function (value) {
                    this._refreshDelay = value;
                }
            },
            Value: {
                get: function () {
                    return this._value;
                },
                set: function (value) {
                    if (!this._comparer[H5.geti(this._comparer, "System$Collections$Generic$IEqualityComparer$1$" + H5.getTypeAlias(T) + "$equals2", "System$Collections$Generic$IEqualityComparer$1$equals2")](this._value, value)) {
                        this._value = value;
                        this.RaiseOnValueChanged();
                    }
                }
            }
        },
        alias: [
            "Observe", "tss$IOBS$" + H5.getTypeAlias(T) + "$Observe",
            "ObserveFutureChanges", "tss$IOBS$" + H5.getTypeAlias(T) + "$ObserveFutureChanges",
            "StopObserving", "tss$IOBS$" + H5.getTypeAlias(T) + "$StopObserving",
            "Value", "tss$IOBS$" + H5.getTypeAlias(T) + "$Value"
        ],
        ctors: {
            init: function () {
                this._refreshDelay = 1;
            },
            ctor: function (value, comparer) {
                if (value === void 0) { value = H5.getDefaultValue(T); }
                if (comparer === void 0) { comparer = null; }

                this.$initialize();
                this._value = value;
                this._comparer = comparer || System.Collections.Generic.EqualityComparer$1(T).def;
            }
        },
        methods: {
            Observe: function (valueGetter) {
                this.Observe$1(valueGetter, true);
            },
            Observe$1: function (valueGetter, callbackImmediately) {
                this.addValueChanged(valueGetter);

                if (callbackImmediately) {
                    valueGetter(this.Value);
                }
            },
            ObserveFutureChanges: function (valueGetter) {
                this.Observe$1(valueGetter, false);
            },
            StopObserving: function (valueGetter) {
                this.removeValueChanged(valueGetter);
            },
            RaiseOnValueChanged: function () {
                window.clearTimeout(this._refreshTimeout);

                this._refreshTimeout = window.setTimeout(H5.fn.bind(this, function (_) {
                    !H5.staticEquals(this.ValueChanged, null) ? this.ValueChanged(this._value) : null;
                }), this._refreshDelay);
            }
        }
    }; });

    H5.define("Tesserae.SidebarButton", {
        inherits: [Tesserae.ISidebarItem],
        fields: {
            _closedButton: null,
            _openButton: null,
            _open: null,
            _commands: null,
            _badge: null,
            _tooltipClosed: null,
            _image: null,
            _tooltipOpen: null,
            _selected: null
        },
        events: {
            _onRendered: null
        },
        props: {
            IsSelected: {
                get: function () {
                    return this._selected.Value$1;
                },
                set: function (value) {
                    this._selected.Value$1 = value;
                }
            },
            CurrentRendered: {
                get: function () {
                    return tss.UI.IsMounted$1(this._closedButton) ? this._closedButton : this._open;
                }
            }
        },
        alias: [
            "IsSelected", "Tesserae$ISidebarItem$IsSelected",
            "CurrentRendered", "Tesserae$ISidebarItem$CurrentRendered",
            "RenderClosed", "Tesserae$ISidebarItem$RenderClosed",
            "RenderOpen", "Tesserae$ISidebarItem$RenderOpen"
        ],
        ctors: {
            $ctor3: function (icon, text, commands) {
                if (commands === void 0) { commands = []; }

                Tesserae.SidebarButton.ctor.call(this, System.String.format("{0} {1}", H5.box("lal", tss.LineAwesomeWeight, System.Enum.toStringFn(tss.LineAwesomeWeight)), H5.box(icon, Tesserae.LineAwesome, System.Enum.toStringFn(Tesserae.LineAwesome))), text, commands);
            },
            $ctor4: function (icon, weight, text, commands) {
                if (commands === void 0) { commands = []; }

                Tesserae.SidebarButton.ctor.call(this, System.String.format("{0} {1}", H5.box(weight, tss.LineAwesomeWeight, System.Enum.toStringFn(tss.LineAwesomeWeight)), H5.box(icon, Tesserae.LineAwesome, System.Enum.toStringFn(Tesserae.LineAwesome))), text, commands);
            },
            $ctor1: function (icon, text, commands) {
                if (commands === void 0) { commands = []; }

                Tesserae.SidebarButton.ctor.call(this, System.String.format("ec {0}", [H5.box(icon, Tesserae.Emoji, System.Enum.toStringFn(Tesserae.Emoji))]), text, commands);
            },
            ctor: function (icon, text, commands) {
                if (commands === void 0) { commands = []; }

                this.$initialize();
                var Wrap = null;
                this._selected = new (tss.SettableObservableT(System.Boolean))(false);
                this._tooltipClosed = function (b) {
                    tss.ICX.Tooltip$1(tss.IC, b, text);
                };
                this._closedButton = tss.UI.Class(tss.Button, tss.UI.Button$1(), "tss-sidebar-btn").SetIcon(icon);

                this._openButton = tss.UI.Class(tss.Button, tss.UI.Button$1(text).SetIcon(icon), "tss-sidebar-btn");

                this._commands = System.Linq.Enumerable.from(commands, Tesserae.SidebarCommand).where(function (c) {
                        return !c.IsBadge;
                    }).ToArray(Tesserae.SidebarCommand);
                this._badge = System.Linq.Enumerable.from(commands, Tesserae.SidebarCommand).where(function (c) {
                        return c.IsBadge;
                    }).firstOrDefault(null, null);
                Wrap = H5.fn.bind(this, function (button) {
                    var $t;
                    var div = tss.UI.Div$2(tss.UI._$1("tss-sidebar-btn-open"));
                    div.appendChild(button.Render());
                    if (H5.is(this._badge, System.Object)) {
                        var divCmd = tss.UI.Div$2(tss.UI._$1("tss-sidebar-badges"));
                        div.appendChild(divCmd);
                        divCmd.appendChild(this._badge.Render());
                    }

                    if (H5.is(this._commands, System.Object) && this._commands.length > 0) {
                        var divCmd1 = tss.UI.Div$2(tss.UI._$1("tss-sidebar-commands"));
                        div.appendChild(divCmd1);
                        $t = H5.getEnumerator(this._commands);
                        try {
                            while ($t.moveNext()) {
                                var c = $t.Current;
                                divCmd1.appendChild(c.Render());
                            }
                        } finally {
                            if (H5.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }

                    return tss.UI.Raw$2(div);
                });

                this._open = Wrap(this._openButton);

                this._selected.Observe(H5.fn.bind(this, function (isSelected) {
                    if (isSelected) {
                        tss.UI.Class(tss.Button, this._closedButton, "tss-sidebar-selected");
                        tss.UI.Class(tss.IC, this._open, "tss-sidebar-selected");
                    } else {
                        tss.UI.RemoveClass(tss.Button, this._closedButton, "tss-sidebar-selected");
                        tss.UI.RemoveClass(tss.IC, this._open, "tss-sidebar-selected");
                    }
                }));


            },
            $ctor2: function (image, text, commands) {
                if (commands === void 0) { commands = []; }

                this.$initialize();
                var Wrap = null;
                this._selected = new (tss.SettableObservableT(System.Boolean))(false);

                this._tooltipClosed = function (b) {
                    tss.ICX.Tooltip$1(tss.IC, b, text);
                };

                this._image = image;

                this._closedButton = tss.UI.Class(tss.Button, tss.UI.Button$1(), "tss-sidebar-btn").ReplaceContent(image);

                this._openButton = tss.UI.Class(tss.Button, tss.UI.Button$1(text).ReplaceContent(tss.UI.Raw$2(tss.UI.Div$1(tss.UI._$1("tss-btn-with-image"), image.Tesserae$ISidebarIcon$Clone().tss$IC$Render(), tss.UI.Span(tss.UI._$2(void 0, void 0, void 0, void 0, void 0, void 0, text, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0))))), "tss-sidebar-btn");

                this._commands = System.Linq.Enumerable.from(commands, Tesserae.SidebarCommand).where(function (c) {
                        return !c.IsBadge;
                    }).ToArray(Tesserae.SidebarCommand);
                this._badge = System.Linq.Enumerable.from(commands, Tesserae.SidebarCommand).where(function (c) {
                        return c.IsBadge;
                    }).firstOrDefault(null, null);
                Wrap = H5.fn.bind(this, function (button) {
                    var $t;
                    var div = tss.UI.Div$2(tss.UI._$1("tss-sidebar-btn-open"));
                    div.appendChild(button.Render());
                    if (H5.is(this._badge, System.Object)) {
                        var divCmd = tss.UI.Div$2(tss.UI._$1("tss-sidebar-badges"));
                        div.appendChild(divCmd);
                        divCmd.appendChild(this._badge.Render());
                    }

                    if (this._commands.length > 0) {
                        var divCmd1 = tss.UI.Div$2(tss.UI._$1("tss-sidebar-commands"));
                        div.appendChild(divCmd1);
                        $t = H5.getEnumerator(this._commands);
                        try {
                            while ($t.moveNext()) {
                                var c = $t.Current;
                                divCmd1.appendChild(c.Render());
                            }
                        } finally {
                            if (H5.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }

                    return tss.UI.Raw$2(div);
                });

                this._open = Wrap(this._openButton);

                this._selected.Observe(H5.fn.bind(this, function (isSelected) {
                    if (isSelected) {
                        tss.UI.Class(tss.Button, this._closedButton, "tss-sidebar-selected");
                        tss.UI.Class(tss.IC, this._open, "tss-sidebar-selected");
                    } else {
                        tss.UI.RemoveClass(tss.Button, this._closedButton, "tss-sidebar-selected");
                        tss.UI.RemoveClass(tss.IC, this._open, "tss-sidebar-selected");
                    }
                }));


            }
        },
        methods: {
            ClearProgress: function () {
                this._openButton.Render().style.background = "";
                this._closedButton.Render().style.background = "";
                return this;
            },
            Progress: function (progress) {
                var p = System.String.format("linear-gradient(to right, rgba(var(--tss-primary-background-color-root),0.2), rgba(var(--tss-primary-background-color-root),0.2) {0:0.0}%, transparent 0)", [H5.box(progress * 100, System.Single, System.Single.format, System.Single.getHashCode)]);
                this._openButton.Render().style.background = p;
                this._closedButton.Render().style.background = p;
                return this;
            },
            SetText: function (text) {
                if (H5.is(this._image, System.Object)) {
                    this._openButton.ReplaceContent(tss.UI.Raw$2(tss.UI.Div$1(tss.UI._$1("tss-btn-with-image"), this._image.Tesserae$ISidebarIcon$Clone().tss$IC$Render(), tss.UI.Span(tss.UI._$2(void 0, void 0, void 0, void 0, void 0, void 0, text, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0)))));
                } else {
                    this._openButton.SetText(text);
                }
                return this;
            },
            CommandsAlwaysVisible: function () {
                tss.UI.Class(tss.IC, this._open, "tss-sidebar-commands-always-open");
                return this;
            },
            Light: function () {
                tss.UI.Class(tss.IC, this._open, "tss-sidebar-btn-light");
                tss.UI.Class(tss.Button, this._closedButton, "tss-sidebar-btn-light");
                return this;
            },
            Danger: function () {
                this._openButton.Danger();
                this._closedButton.Danger();
                return this;
            },
            Default: function () {
                this._openButton.IsPrimary = false;
                this._closedButton.IsPrimary = false;
                return this;
            },
            Success: function () {
                this._openButton.Success();
                this._closedButton.Success();
                return this;
            },
            Primary: function () {
                this._openButton.Primary();
                this._closedButton.Primary();
                return this;
            },
            Selected: function (isSelected) {
                if (isSelected === void 0) { isSelected = true; }
                this._selected.Value$1 = isSelected;
                return this;
            },
            Tooltip$1: function (text) {
                this._tooltipClosed = function (b) {
                    tss.ICX.Tooltip$1(tss.IC, b, text, "none", "right", 0, 0, false, 350, false);
                };
                this._tooltipClosed(this._closedButton);
                return this;
            },
            Tooltip$2: function (tooltip) {
                this._tooltipClosed = function (b) {
                    tss.ICX.Tooltip(tss.IC, b, tooltip, false, "none", "right", 0, 0, true, false, 350, true, false);
                };
                this._tooltipClosed(this._closedButton);
                return this;
            },
            Tooltip: function (tooltip) {
                this._tooltipClosed = function (b) {
                    tss.ICX.Tooltip(tss.IC, b, tooltip(), false, "none", "right", 0, 0, true, false, 350, true, false);
                };
                this._tooltipClosed(this._closedButton);
                return this;
            },
            OpenedTooltip$1: function (text) {
                this._tooltipOpen = function (b) {
                    tss.ICX.Tooltip$1(tss.IC, b, text, "none", "right", 0, 0, false, 350, false);
                };
                this._tooltipOpen(this._openButton);
                return this;
            },
            OpenedTooltip$2: function (tooltip) {
                this._tooltipOpen = function (b) {
                    tss.ICX.Tooltip(tss.IC, b, tooltip, false, "none", "right", 0, 0, true, false, 350, true, false);
                };
                this._tooltipOpen(this._openButton);
                return this;
            },
            OpenedTooltip: function (tooltip) {
                this._tooltipOpen = function (b) {
                    tss.ICX.Tooltip(tss.IC, b, tooltip(), false, "none", "right", 0, 0, true, false, 350, true, false);
                };
                this._tooltipOpen(this._openButton);
                return this;
            },
            OnClick: function (action) {
                this._closedButton.OnClick$1(action);
                this._openButton.OnClick$1(action);
                return this;
            },
            OnClick$1: function (action) {
                this._closedButton.OnClick(function (b, e) {
                    action(b, e);
                });
                this._openButton.OnClick(function (b, e) {
                    action(b, e);
                });
                return this;
            },
            OnOpenIconClick$1: function (action) {
                this._openButton.OnIconClick(action);
                tss.UI.Class(tss.Button, this._openButton, "tss-sidebar-btn-has-icon-click");
                return this;
            },
            OnOpenIconClick: function (action) {
                this._openButton.OnIconClick(function (_, __) {
                    action();
                });
                tss.UI.Class(tss.Button, this._openButton, "tss-sidebar-btn-has-icon-click");
                return this;
            },
            Id: function (id) {
                tss.UI.Id(tss.IC, this._open, id);
                tss.UI.Id(tss.Button, this._closedButton, id);
                return this;

            },
            OnContextMenu: function (action) {
                this._closedButton.OnContextMenu$1(action);
                this._openButton.OnContextMenu$1(action);
                return this;
            },
            OnContextMenu$1: function (action) {
                this._closedButton.OnContextMenu(function (b, e) {
                    action(b, e);
                });
                this._openButton.OnContextMenu(function (b, e) {
                    action(b, e);
                });
                return this;
            },
            SetIcon: function (icon, color) {
                if (color === void 0) { color = ""; }
                this._closedButton.SetIcon(icon, color);
                this._openButton.SetIcon(icon, color);
                return this;
            },
            SetIcon$2: function (icon, color, weight) {
                if (color === void 0) { color = ""; }
                if (weight === void 0) { weight = "lal"; }
                this._closedButton.SetIcon$2(icon, color, "tss-fontsize-medium", weight, false);
                this._openButton.SetIcon$2(icon, color, "tss-fontsize-medium", weight, false);
                return this;
            },
            SetIcon$1: function (icon) {
                this._closedButton.SetIcon$1(icon);
                this._openButton.SetIcon$1(icon);
                return this;
            },
            Collapse: function () {
                tss.ICX.Collapse(tss.Button, this._closedButton);
                tss.ICX.Collapse(tss.IC, this._open);
                return this;
            },
            Show: function () {
                tss.ICX.Show(tss.Button, this._closedButton);
                tss.ICX.Show(tss.IC, this._open);
                return this;
            },
            OnRendered: function (onRendered) {
                this.add_onRendered(onRendered);
                return this;
            },
            RenderClosed: function () {
                !H5.staticEquals(this._onRendered, null) ? this._onRendered(this._closedButton.Render()) : null;
                tss.ICX.RemoveTooltip(tss.Button, this._closedButton);
                tss.domObs.WhenMounted(this._closedButton.Render(), H5.fn.bind(this, function () {
                    window.setTimeout(H5.fn.bind(this, function (_) {
                        !H5.staticEquals(this._tooltipClosed, null) ? this._tooltipClosed(this._closedButton) : null;
                    }), tss.Sidebar.SIDEBAR_TRANSITION_TIME);
                }));
                return this._closedButton;
            },
            RenderOpen: function () {
                var $t;
                $t = H5.getEnumerator(this._commands);
                try {
                    while ($t.moveNext()) {
                        var c = $t.Current;
                        c.RefreshTooltip();
                    }
                } finally {
                    if (H5.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                !H5.staticEquals(this._tooltipOpen, null) ? this._tooltipOpen(this._openButton) : null;
                !H5.staticEquals(this._onRendered, null) ? this._onRendered(this._open.tss$IC$Render()) : null;
                return this._open;
            }
        }
    });

    H5.define("Tesserae.SidebarCommands", {
        inherits: [Tesserae.ISidebarItem],
        fields: {
            _commands: null,
            _isEndAligned: false,
            IsSelected: false,
            CurrentRendered: null
        },
        alias: [
            "IsSelected", "Tesserae$ISidebarItem$IsSelected",
            "CurrentRendered", "Tesserae$ISidebarItem$CurrentRendered",
            "RenderOpen", "Tesserae$ISidebarItem$RenderOpen",
            "RenderClosed", "Tesserae$ISidebarItem$RenderClosed"
        ],
        ctors: {
            ctor: function (commands) {
                if (commands === void 0) { commands = []; }

                this.$initialize();
                this._commands = commands;
            }
        },
        methods: {
            WhenSizeIsStable: function (element, action, previousWidth) {
                if (previousWidth === void 0) { previousWidth = -1; }
                var delay = previousWidth < 0 ? tss.Sidebar.SIDEBAR_TRANSITION_TIME : 100;

                if (tss.UI.IsMounted(element)) {
                    var currentWidth = H5.Int.clip32(element.getBoundingClientRect().width);

                    if (currentWidth > 0 && currentWidth === previousWidth) {
                        action(currentWidth);
                    } else {
                        window.setTimeout(H5.fn.bind(this, function (_) {
                            this.WhenSizeIsStable(element, action, currentWidth);
                        }), delay);
                    }
                } else {
                    tss.domObs.WhenMounted(element, H5.fn.bind(this, function () {
                        this.WhenSizeIsStable(element, action);
                    }));
                }
            },
            RenderOpen: function () {
                var div = tss.UI.Div$2(tss.UI._$1("tss-sidebar-commands-line"));
                var divWrapped = tss.UI.Raw$2(div);

                if (this._isEndAligned) {
                    div.classList.add("tss-sidebar-commands-end-aligned");
                }

                tss.domObs.WhenMounted(div, H5.fn.bind(this, function () {
                    tss.UI.ClearChildren(div);

                    this._commands[System.Array.index(0, this._commands)].RefreshTooltip();
                    div.appendChild(this._commands[System.Array.index(0, this._commands)].Render());

                    this.WhenSizeIsStable(div, H5.fn.bind(this, function (stableWidth) {
                        var otherCommands = null;
                        var max = H5.Int.clip32(Math.floor(stableWidth / 48.0));

                        if (this._isEndAligned && this._commands.length > 1) {
                            div.appendChild(tss.UI.Div$2(tss.UI._$1("tss-sidebar-commands-spacer")));
                        }

                        for (var i = 1; i < this._commands.length; i = (i + 1) | 0) {
                            var command = this._commands[System.Array.index(i, this._commands)];
                            command.RefreshTooltip();

                            if (i < max) {
                                div.appendChild(command.Render());
                            } else {
                                if (otherCommands == null) {
                                    otherCommands = tss.UI.Div$2(tss.UI._$1("tss-sidebar-commands-line-extra"));
                                }
                                otherCommands.appendChild(command.Render());
                            }
                        }

                        if (H5.is(otherCommands, System.Object)) {
                            tss.ICX.Tooltip(tss.Raw, divWrapped, tss.UI.Raw$2(otherCommands), true, "none", "right", 0, 500, true, false, 1000, true, false);

                            tss.domObs.WhenMounted(otherCommands, H5.fn.bind(this, function () {
                                tss.domObs.WhenRemoved(otherCommands, H5.fn.bind(this, function () {
                                    if (tss.UI.IsMounted$1(divWrapped)) {
                                        for (var i1 = 0; i1 < this._commands.length; i1 = (i1 + 1) | 0) {
                                            this._commands[System.Array.index(i1, this._commands)].RefreshTooltip();
                                        }
                                    }
                                }));
                            }));
                        }
                    }));
                }));
                this.CurrentRendered = divWrapped;
                return divWrapped;
            },
            RenderOpenFull: function () {
                var div = tss.UI.Div$2(tss.UI._$1("tss-sidebar-commands-line"));
                var divWrapped = tss.UI.Raw$2(div);

                if (this._isEndAligned) {
                    div.classList.add("tss-sidebar-commands-end-aligned");
                }

                tss.domObs.WhenMounted(div, H5.fn.bind(this, function () {
                    tss.UI.ClearChildren(div);

                    for (var i = 0; i < this._commands.length; i = (i + 1) | 0) {
                        var command = this._commands[System.Array.index(i, this._commands)];
                        command.RefreshTooltip();
                        div.appendChild(command.Render());

                        if (this._isEndAligned && i === 0 && this._commands.length > 1) {
                            div.appendChild(tss.UI.Div$2(tss.UI._$1("tss-sidebar-commands-spacer")));
                        }
                    }
                }));

                this.CurrentRendered = divWrapped;
                return divWrapped;
            },
            RenderClosed: function () {
                var div = tss.UI.Div$2(tss.UI._$1("tss-sidebar-commands-line tss-sidebar-commands-line-closed"));
                var divWrapped = tss.UI.Raw$2(div);

                tss.domObs.WhenMounted(div, H5.fn.bind(this, function () {
                    tss.UI.ClearChildren(div);

                    var otherCommands = null;
                    var max = 1;


                    for (var i = 0; i < this._commands.length; i = (i + 1) | 0) {
                        var command = this._commands[System.Array.index(i, this._commands)];
                        command.RefreshTooltip();

                        if (i < max) {
                            div.appendChild(command.Render());
                        } else {
                            if (otherCommands == null) {
                                otherCommands = tss.UI.Div$2(tss.UI._$1("tss-sidebar-commands-line-extra"));
                            }
                            otherCommands.appendChild(command.Render());
                        }
                    }

                    window.setTimeout(H5.fn.bind(this, function (__) {

                        if (H5.is(otherCommands, System.Object)) {
                            tss.ICX.Tooltip(tss.Raw, divWrapped, tss.UI.Raw$2(otherCommands), true, "none", "right", 0, 500, true, false, 1000, true, false);

                            tss.domObs.WhenMounted(otherCommands, H5.fn.bind(this, function () {
                                tss.domObs.WhenRemoved(otherCommands, H5.fn.bind(this, function () {
                                    if (tss.UI.IsMounted$1(divWrapped)) {
                                        for (var i1 = 0; i1 < this._commands.length; i1 = (i1 + 1) | 0) {
                                            this._commands[System.Array.index(i1, this._commands)].RefreshTooltip();
                                        }
                                    }
                                }));
                            }));
                        }

                    }), tss.Sidebar.SIDEBAR_TRANSITION_TIME);
                }));

                this.CurrentRendered = divWrapped;
                return divWrapped;
            },
            AlignEnd: function () {
                this._isEndAligned = true;
                return this;
            }
        }
    });

    H5.define("Tesserae.SidebarNav", {
        inherits: [Tesserae.ISidebarItem],
        fields: {
            _text: null,
            _closedHeader: null,
            _openHeader: null,
            _arrow: null,
            _openHeaderButton: null,
            _items: null,
            _collapsed: null,
            _selected: null,
            _closedContent: null,
            _openContent: null,
            _commands: null,
            _lastClosed: null,
            _lastOpen: null
        },
        events: {
            _onRendered: null
        },
        props: {
            IsCollapsed: {
                get: function () {
                    return this._collapsed.Value$1;
                },
                set: function (value) {
                    this._collapsed.Value$1 = value;
                }
            },
            IsSelected: {
                get: function () {
                    return this._selected.Value$1;
                },
                set: function (value) {
                    this._selected.Value$1 = value;
                }
            },
            CurrentRendered: {
                get: function () {
                    return (H5.is(this._lastClosed, System.Object) && tss.UI.IsMounted$1(this._lastClosed)) ? this._lastClosed : this._lastOpen;
                }
            }
        },
        alias: [
            "IsSelected", "Tesserae$ISidebarItem$IsSelected",
            "CurrentRendered", "Tesserae$ISidebarItem$CurrentRendered",
            "RenderClosed", "Tesserae$ISidebarItem$RenderClosed",
            "RenderOpen", "Tesserae$ISidebarItem$RenderOpen"
        ],
        ctors: {
            $ctor1: function (icon, text, initiallyCollapsed, commands) {
                if (commands === void 0) { commands = []; }

                Tesserae.SidebarNav.ctor.call(this, System.String.format("ec {0}", [H5.box(icon, Tesserae.Emoji, System.Enum.toStringFn(Tesserae.Emoji))]), text, initiallyCollapsed, commands);
            },
            $ctor2: function (icon, text, initiallyCollapsed, commands) {
                if (commands === void 0) { commands = []; }

                Tesserae.SidebarNav.ctor.call(this, System.String.format("{0} {1}", H5.box("lal", tss.LineAwesomeWeight, System.Enum.toStringFn(tss.LineAwesomeWeight)), H5.box(icon, Tesserae.LineAwesome, System.Enum.toStringFn(Tesserae.LineAwesome))), text, initiallyCollapsed, commands);
            },
            $ctor3: function (icon, weight, text, initiallyCollapsed, commands) {
                if (commands === void 0) { commands = []; }

                Tesserae.SidebarNav.ctor.call(this, System.String.format("{0} {1}", H5.box(weight, tss.LineAwesomeWeight, System.Enum.toStringFn(tss.LineAwesomeWeight)), H5.box(icon, Tesserae.LineAwesome, System.Enum.toStringFn(Tesserae.LineAwesome))), text, initiallyCollapsed, commands);
            },
            ctor: function (icon, text, initiallyCollapsed, commands) {
                if (commands === void 0) { commands = []; }
                var $t;

                this.$initialize();
                this._text = text;
                this._closedHeader = tss.UI.Class(tss.Button, tss.UI.Class(tss.Button, tss.UI.Button$1().SetIcon(icon), "tss-sidebar-nav-header"), "tss-sidebar-btn");
                this._openHeader = tss.UI.Div$2(tss.UI._$1("tss-sidebar-nav-header tss-sidebar-btn-open tss-sidebar-nav-header-empty"));

                this._arrow = tss.UI.Class(tss.Button, tss.UI.Button$1(), "tss-sidebar-nav-arrow");

                this._openHeaderButton = tss.UI.Class(tss.Button, tss.UI.Button$1(text).SetIcon(icon), "tss-sidebar-nav-button");
                this._openHeader.appendChild(this._openHeaderButton.Render());
                this._openHeader.appendChild(this._arrow.Render());

                this._commands = commands;

                if (commands.length > 0) {
                    var divCmd = tss.UI.Div$2(tss.UI._$1("tss-sidebar-commands"));
                    this._openHeader.appendChild(divCmd);

                    $t = H5.getEnumerator(commands);
                    try {
                        while ($t.moveNext()) {
                            var c = $t.Current;
                            divCmd.appendChild(c.Render());
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }

                this._items = new (tss.ObservableList(Tesserae.ISidebarItem)).ctor();
                this._collapsed = new (tss.SettableObservableT(System.Boolean))(initiallyCollapsed);
                this._selected = new (tss.SettableObservableT(System.Boolean))(false);

                this._closedContent = H5.fn.bind(this, function () {
                    return tss.UI.Defer$3(System.Collections.Generic.IReadOnlyList$1(Tesserae.ISidebarItem), this._items, H5.fn.bind(this, function (items) {
                        return tss.tX.AsTask(this.RenderClosed$1(items));
                    }));
                });
                this._openContent = H5.fn.bind(this, function () {
                    return tss.UI.Defer$3(System.Collections.Generic.IReadOnlyList$1(Tesserae.ISidebarItem), this._items, H5.fn.bind(this, function (items) {
                        return tss.tX.AsTask(this.RenderOpened(items));
                    }));
                });

                this._arrow.OnClick$1(H5.fn.bind(this, function () {
                    this._collapsed.Value$1 = !this._collapsed.Value$1;
                }));
            }
        },
        methods: {
            SetText: function (text) {
                this._openHeaderButton.SetText(text);
                tss.ICX.Tooltip$1(tss.Button, this._closedHeader, text, "none", "top", 0, 0, false, 350, false);
                this._text = text;
                return this;
            },
            SetIcon: function (icon) {
                this._openHeaderButton.SetIcon(icon);
                this._closedHeader.SetIcon(icon);
                return this;
            },
            Collapsed: function (isCollapsed) {
                if (isCollapsed === void 0) { isCollapsed = true; }
                this._collapsed.Value$1 = isCollapsed;
                return this;
            },
            Selected: function (isSelected) {
                if (isSelected === void 0) { isSelected = true; }
                this._selected.Value$1 = isSelected;
                return this;
            },
            Toggle: function () {
                this._collapsed.Value$1 = !this._collapsed.Value$1;
                return this;
            },
            ShowDotIfEmpty: function () {
                this._openHeader.classList.add("tss-sidebar-nav-header-dot-if-empty");
                return this;
            },
            OnOpenIconClick$1: function (action) {
                this._openHeaderButton.OnIconClick(action);
                tss.UI.Class(tss.Button, this._openHeaderButton, "tss-sidebar-btn-has-icon-click");
                return this;
            },
            OnOpenIconClick: function (action) {
                this._openHeaderButton.OnIconClick(function (_, __) {
                    action();
                });
                tss.UI.Class(tss.Button, this._openHeaderButton, "tss-sidebar-btn-has-icon-click");
                return this;
            },
            OnClick: function (action) {
                this._closedHeader.OnClick$1(action);
                this._openHeaderButton.OnClick$1(action);
                return this;
            },
            OnClick$1: function (action) {
                this._closedHeader.OnClick$1(H5.fn.bind(this, function () {
                    action(this);
                }));
                this._openHeaderButton.OnClick$1(H5.fn.bind(this, function () {
                    action(this);
                }));
                return this;
            },
            OnClick$2: function (action) {
                this._closedHeader.OnClick(function (b, e) {
                    action(b, e);
                });
                this._openHeaderButton.OnClick(function (b, e) {
                    action(b, e);
                });
                return this;
            },
            OnContextMenu: function (action) {
                this._closedHeader.OnContextMenu$1(action);
                this._openHeaderButton.OnContextMenu$1(action);
                return this;
            },
            OnContextMenu$1: function (action) {
                this._closedHeader.OnContextMenu(function (b, e) {
                    action(b, e);
                });
                this._openHeaderButton.OnContextMenu(function (b, e) {
                    action(b, e);
                });
                return this;
            },
            RenderOpened: function (items) {
                var $t;
                var SelectedChanged = null;
                var CollapsedChanged = null;
                if (System.Array.getCount(items, Tesserae.ISidebarItem) > 0) {
                    this._openHeader.classList.remove("tss-sidebar-nav-header-empty");
                } else {
                    this._openHeader.classList.add("tss-sidebar-nav-header-empty");
                }

                $t = H5.getEnumerator(this._commands);
                try {
                    while ($t.moveNext()) {
                        var c = $t.Current;
                        c.RefreshTooltip();
                    }
                } finally {
                    if (H5.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                var nav = tss.UI.Div$2(tss.UI._$1("tss-sidebar-nav"));
                nav.appendChild(this._openHeader);
                nav.appendChild(tss.ICTX.Children$1(tss.S, tss.UI.Class(tss.S, tss.UI.VStack(), "tss-sidebar-nav-children"), System.Linq.Enumerable.from(items, Tesserae.ISidebarItem).select(function (i) {
                        return i.Tesserae$ISidebarItem$RenderOpen();
                    })).Render());
                CollapsedChanged = H5.fn.bind(this, function (isCollapsed) {
                    if (isCollapsed) {
                        nav.classList.remove("tss-sidebar-nav-open");
                        tss.ICX.Tooltip$1(tss.Button, this._arrow, TNT.T.t$1("Expand"), "none", "top", 0, 0, false, 350, false);
                    } else {
                        nav.classList.add("tss-sidebar-nav-open");
                        tss.ICX.Tooltip$1(tss.Button, this._arrow, TNT.T.t$1("Collapse"), "none", "top", 0, 0, false, 350, false);
                    }
                });

                CollapsedChanged(this._collapsed.Value$1);
                SelectedChanged = function (isSelected) {
                    if (isSelected) {
                        nav.classList.add("tss-sidebar-selected");
                    } else {
                        nav.classList.remove("tss-sidebar-selected");
                    }
                };
                SelectedChanged(this._selected.Value$1);

                tss.domObs.WhenMounted(nav, H5.fn.bind(this, function () {
                    this._collapsed.Observe(CollapsedChanged);
                    this._selected.Observe(SelectedChanged);

                    tss.domObs.WhenRemoved(nav, H5.fn.bind(this, function () {
                        this._collapsed.StopObserving(CollapsedChanged);
                        this._selected.StopObserving(SelectedChanged);
                    }));
                }));

                var comp = tss.UI.Raw$2(nav);
                this._lastOpen = comp;
                !H5.staticEquals(this._onRendered, null) ? this._onRendered(this._openHeader) : null;
                return comp;




            },
            RenderClosed$1: function (items) {
                var SelectedChanged = null;
                var CollapsedChanged = null;
                tss.ICX.Tooltip$1(tss.Button, this._closedHeader, this._text, "none", "top", 0, 0, false, 350, false);

                var nav = tss.UI.Div$2(tss.UI._$1("tss-sidebar-nav"));
                nav.appendChild(this._closedHeader.Render());
                nav.appendChild(tss.ICTX.Children$1(tss.S, tss.UI.Class(tss.S, tss.UI.VStack(), "tss-sidebar-nav-children"), System.Linq.Enumerable.from(items, Tesserae.ISidebarItem).select(function (i) {
                        return i.Tesserae$ISidebarItem$RenderClosed();
                    })).Render());
                CollapsedChanged = H5.fn.bind(this, function (isCollapsed) {
                    if (isCollapsed) {
                        nav.classList.remove("tss-sidebar-nav-open");
                        tss.ICX.Tooltip$1(tss.Button, this._arrow, TNT.T.t$1("Expand"), "none", "top", 0, 0, false, 350, false);
                    } else {
                        nav.classList.add("tss-sidebar-nav-open");
                        tss.ICX.Tooltip$1(tss.Button, this._arrow, TNT.T.t$1("Collapse"), "none", "top", 0, 0, false, 350, false);
                    }
                });

                CollapsedChanged(this._collapsed.Value$1);
                SelectedChanged = function (isSelected) {
                    if (isSelected) {
                        nav.classList.add("tss-sidebar-selected");
                    } else {
                        nav.classList.remove("tss-sidebar-selected");
                    }
                };
                SelectedChanged(this._selected.Value$1);

                tss.domObs.WhenMounted(nav, H5.fn.bind(this, function () {
                    this._collapsed.Observe(CollapsedChanged);
                    this._selected.Observe(SelectedChanged);

                    tss.domObs.WhenRemoved(nav, H5.fn.bind(this, function () {
                        this._collapsed.StopObserving(CollapsedChanged);
                        this._selected.StopObserving(SelectedChanged);
                    }));
                }));

                var comp = tss.UI.Raw$2(nav);
                this._lastClosed = comp;
                !H5.staticEquals(this._onRendered, null) ? this._onRendered(this._closedHeader.Render()) : null;
                return comp;




            },
            RenderClosed: function () {
                return this._closedContent();
            },
            Clear: function () {
                this._items.clear();
            },
            Add: function (item) {
                this._items.add(item);
            },
            RenderOpen: function () {
                return this._openContent();
            },
            OnRendered: function (onRendered) {
                this.add_onRendered(onRendered);
                return this;
            }
        }
    });

    H5.define("Tesserae.SidebarText", {
        inherits: [Tesserae.ISidebarItem],
        fields: {
            _closed: null,
            _open: null,
            IsSelected: false
        },
        props: {
            CurrentRendered: {
                get: function () {
                    return tss.UI.IsMounted$1(this._closed) ? this._closed : this._open;
                }
            }
        },
        alias: [
            "CurrentRendered", "Tesserae$ISidebarItem$CurrentRendered",
            "IsSelected", "Tesserae$ISidebarItem$IsSelected",
            "RenderClosed", "Tesserae$ISidebarItem$RenderClosed",
            "RenderOpen", "Tesserae$ISidebarItem$RenderOpen"
        ],
        ctors: {
            ctor: function (text, closedText, textSize, textWeight) {
                if (closedText === void 0) { closedText = null; }
                if (textSize === void 0) { textSize = "tss-fontsize-small"; }
                if (textWeight === void 0) { textWeight = "tss-fontweight-regular"; }
                var $t;

                this.$initialize();
                this._closed = tss.UI.TextBlock$1(($t = closedText, $t != null ? $t : ""), false, false, textSize, textWeight, void 0);
                this._open = tss.UI.TextBlock$1(text, false, false, textSize, textWeight, void 0);
            }
        },
        methods: {
            SetText: function (text) {
                this._open.Text = text;
                return this;
            },
            Foreground: function (color) {
                this._open.Foreground = color;
                this._closed.Foreground = color;
                return this;
            },
            PT: function (pixels) {
                tss.ICX.PT(tss.txt, this._open, pixels);
                tss.ICX.PT(tss.txt, this._closed, pixels);
                return this;
            },
            PB: function (pixels) {
                tss.ICX.PB(tss.txt, this._open, pixels);
                tss.ICX.PB(tss.txt, this._closed, pixels);
                return this;
            },
            PL: function (pixels) {
                tss.ICX.PL(tss.txt, this._open, pixels);
                return this;
            },
            RenderClosed: function () {
                return this._closed;
            },
            RenderOpen: function () {
                return this._open;
            }
        }
    });

    H5.define("tss.BackgroundArea", {
        inherits: [tss.IC,tss.IHBG],
        fields: {
            _raw: null,
            _container: null
        },
        props: {
            Background: {
                get: function () {
                    return this._container.style.backgroundColor;
                },
                set: function (value) {
                    this._container.style.backgroundColor = value;
                }
            }
        },
        alias: [
            "Background", "tss$IHBG$Background",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            ctor: function (content) {
                this.$initialize();
                this._raw = tss.UI.Raw$2(content.tss$IC$Render());
                this._container = tss.UI.Div(tss.UI._$1("tss-background-area"), this._raw.Render());
            }
        },
        methods: {
            Content: function (content) {
                this._raw.Content$1(content);
                return this;
            },
            Render: function () {
                return this._container;
            }
        }
    });

    H5.definei("tss.ICBTTC", function (T, TChild) { return {
        inherits: [tss.ICBT(TChild)],
        $kind: "interface"
    }; });

    H5.define("tss.CB", function (T, THTML) { return {
        inherits: [tss.IC,tss.IHMP],
        fields: {
            InnerElement: H5.getDefaultValue(THTML)
        },
        events: {
            Clicked: null,
            ContextMenu: null,
            Changed: null,
            InputUpdated: null,
            ReceivedFocus: null,
            LostFocus: null,
            KeyPushedDown: null,
            KeyReleased: null,
            KeyFullyPressed: null
        },
        props: {
            Margin: {
                get: function () {
                    return this.InnerElement.style.margin;
                },
                set: function (value) {
                    this.InnerElement.style.margin = value;
                }
            },
            Padding: {
                get: function () {
                    return this.InnerElement.style.padding;
                },
                set: function (value) {
                    this.InnerElement.style.padding = value;
                }
            }
        },
        alias: [
            "Margin", "tss$IHMP$Margin",
            "Padding", "tss$IHMP$Padding"
        ],
        methods: {
            OnClick: function (onClick, clearPrevious) {
                var $t;
                if (clearPrevious === void 0) { clearPrevious = true; }
                if (!H5.staticEquals(this.Clicked, null) && clearPrevious) {
                    $t = H5.getEnumerator(H5.fn.getInvocationList(this.Clicked));
                    try {
                        while ($t.moveNext()) {
                            var d = $t.Current;
                            this.removeClicked(d);
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }

                this.addClicked(onClick);
                var textBlock;
                if (((textBlock = H5.as(this, tss.txt))) != null) {
                    textBlock.Cursor = "pointer";
                }
                var img;
                if (((img = H5.as(this, tss.Image))) != null) {
                    img.Cursor = "pointer";
                }

                return H5.cast(this, T);
            },
            OnContextMenu: function (onContextMenu, clearPrevious) {
                var $t;
                if (clearPrevious === void 0) { clearPrevious = true; }
                if (!H5.staticEquals(this.ContextMenu, null) && clearPrevious) {
                    $t = H5.getEnumerator(H5.fn.getInvocationList(this.ContextMenu));
                    try {
                        while ($t.moveNext()) {
                            var d = $t.Current;
                            this.removeContextMenu(d);
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }

                this.addContextMenu(onContextMenu);
                var textBlock;
                if (((textBlock = H5.as(this, tss.txt))) != null) {
                    textBlock.Cursor = "pointer";
                }
                var img;
                if (((img = H5.as(this, tss.Image))) != null) {
                    img.Cursor = "pointer";
                }

                return H5.cast(this, T);
            },
            OnChange: function (onChange) {
                this.addChanged(onChange);
                return H5.cast(this, T);
            },
            OnInput: function (onInput) {
                this.addInputUpdated(onInput);
                return H5.cast(this, T);
            },
            OnFocus: function (onFocus) {
                this.addReceivedFocus(onFocus);
                return H5.cast(this, T);
            },
            OnBlur: function (onBlur) {
                this.addLostFocus(onBlur);
                return H5.cast(this, T);
            },
            OnKeyDown: function (onKeyDown) {
                this.addKeyPushedDown(onKeyDown);
                return H5.cast(this, T);
            },
            OnKeyUp: function (onKeyUp) {
                this.addKeyReleased(onKeyUp);
                return H5.cast(this, T);
            },
            OnKeyPress: function (onKeyPress) {
                this.addKeyFullyPressed(onKeyPress);
                return H5.cast(this, T);
            },
            AttachClick: function () {
                this.InnerElement.addEventListener("click", H5.fn.bind(this, function (e) {
                    this.RaiseOnClick(H5.unbox(e));
                }));
            },
            AttachContextMenu: function () {
                this.InnerElement.addEventListener("contextmenu", H5.fn.bind(this, function (e) {
                    this.RaiseOnContextMenu(H5.unbox(e));
                }));
            },
            AttachChange: function () {
                this.InnerElement.addEventListener("change", H5.fn.bind(this, function (s) {
                    this.RaiseOnChange(s);
                }));
            },
            RaiseOnClick: function (ev) {
                !H5.staticEquals(this.Clicked, null) ? this.Clicked(H5.cast(this, T), ev) : null;
            },
            RaiseOnContextMenu: function (ev) {
                !H5.staticEquals(this.ContextMenu, null) ? this.ContextMenu(H5.cast(this, T), ev) : null;
            },
            RaiseOnChange: function (ev) {
                !H5.staticEquals(this.Changed, null) ? this.Changed(H5.cast(this, T), ev) : null;
            },
            AttachInput: function () {
                this.InnerElement.addEventListener("input", H5.fn.bind(this, function (ev) {
                    this.RaiseOnInput(ev);
                }));
            },
            AttachKeys: function () {
                this.InnerElement.addEventListener("keypress", H5.fn.bind(this, function (ev) {
                    this.RaiseOnKeyPress(H5.unbox(ev));
                }));
                this.InnerElement.addEventListener("keydown", H5.fn.bind(this, function (ev) {
                    this.RaiseOnKeyDown(H5.unbox(ev));
                }));
                this.InnerElement.addEventListener("keyup", H5.fn.bind(this, function (ev) {
                    this.RaiseOnKeyUp(H5.unbox(ev));
                }));
            },
            AttachFocus: function () {
                this.InnerElement.addEventListener("focus", H5.fn.bind(this, function (s) {
                    this.RaiseOnFocus(s);
                }));
            },
            AttachBlur: function () {
                this.InnerElement.addEventListener("blur", H5.fn.bind(this, function (s) {
                    this.RaiseOnBlur(s);
                }));
            },
            RaiseOnInput: function (ev) {
                !H5.staticEquals(this.InputUpdated, null) ? this.InputUpdated(H5.cast(this, T), ev) : null;
            },
            RaiseOnKeyDown: function (ev) {
                !H5.staticEquals(this.KeyPushedDown, null) ? this.KeyPushedDown(H5.cast(this, T), ev) : null;
            },
            RaiseOnKeyUp: function (ev) {
                !H5.staticEquals(this.KeyReleased, null) ? this.KeyReleased(H5.cast(this, T), ev) : null;
            },
            RaiseOnKeyPress: function (ev) {
                !H5.staticEquals(this.KeyFullyPressed, null) ? this.KeyFullyPressed(H5.cast(this, T), ev) : null;
            },
            RaiseOnFocus: function (ev) {
                !H5.staticEquals(this.ReceivedFocus, null) ? this.ReceivedFocus(H5.cast(this, T), ev) : null;
            },
            RaiseOnBlur: function (ev) {
                !H5.staticEquals(this.LostFocus, null) ? this.LostFocus(H5.cast(this, T), ev) : null;
            }
        }
    }; });

    H5.define("tss.ICV", {
        inherits: [tss.IC],
        $kind: "interface"
    });

    H5.define("tss.IDefer", {
        inherits: [tss.IC],
        $kind: "interface"
    });

    H5.define("tss.DetailsList", function (TDetailsListItem) { return {
        inherits: [tss.IC,tss.ISCS],
        statics: {
            methods: {
                CreateGridCell: function (column, gridCellInnerHtmlExpression) {
                    var role = column.tss$IDetailsListColumn$IsRowHeader ? "rowheader" : "gridcell";

                    var gridCellHtmlElement = tss.UI.Div$2(tss.UI._$1("tss-detailslist-list-item tss-text-ellipsis").WithRole(role));
                    gridCellHtmlElement.style.width = column.tss$IDetailsListColumn$Width.toString();
                    if (H5.is(column.tss$IDetailsListColumn$MaxWidth, System.Object)) {
                        gridCellHtmlElement.style.maxWidth = column.tss$IDetailsListColumn$MaxWidth.toString();
                    }
                    gridCellHtmlElement.appendChild(gridCellInnerHtmlExpression().tss$IC$Render());

                    return tss.UI.Raw$2(gridCellHtmlElement);
                }
            }
        },
        fields: {
            _columns: null,
            _componentCache: null,
            _container: null,
            _listContainer: null,
            _listAlreadyCreated: false,
            _listItemsContainer: null,
            _previousColumnSortingKey: null,
            _currentLineAwesomeSortingIcon: 0,
            _columnSortingIcon: null,
            _emptyListMessageGenerator: null,
            _getNextItemPage: null
        },
        props: {
            StylingContainer: {
                get: function () {
                    return this._container;
                }
            },
            PropagateToStackItemParent: {
                get: function () {
                    return false;
                }
            },
            IsCompact: {
                get: function () {
                    return this._listContainer.classList.contains("tss-small");
                },
                set: function (value) {
                    tss.UI.UpdateClassIf(this._listContainer, value, "tss-small");
                }
            }
        },
        alias: [
            "StylingContainer", "tss$ISCS$StylingContainer",
            "PropagateToStackItemParent", "tss$ISCS$PropagateToStackItemParent",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            ctor: function (columns) {
                if (columns === void 0) { columns = []; }
                var $t;

                this.$initialize();
                if (columns == null) {
                    throw new System.ArgumentNullException.$ctor1("columns");
                }

                if (!System.Linq.Enumerable.from(columns, tss.IDetailsListColumn).any()) {
                    throw new System.ArgumentException.$ctor1("columns");
                }

                this._columns = ($t = tss.IDetailsListColumn, System.Linq.Enumerable.from(columns, $t).toList($t));
                this._componentCache = new (tss.ComponentCache(TDetailsListItem))(H5.fn.cacheBind(this, this.CreateListItem));
                this._listContainer = tss.UI.Div$2(tss.UI._$1("tss-detailslist").WithRole("grid"));

                this._container = tss.UI.Div(tss.UI._$1("tss-detailslist-container"), this._listContainer);
                this._previousColumnSortingKey = "";
                this._currentLineAwesomeSortingIcon = 60;
            }
        },
        methods: {
            Compact: function () {
                this.IsCompact = true;
                return this;
            },
            WithEmptyMessage: function (emptyListMessageGenerator) {
                this._emptyListMessageGenerator = emptyListMessageGenerator || (function () {
                    throw new System.ArgumentNullException.$ctor1("emptyListMessageGenerator");
                })();

                return this;
            },
            WithPaginatedItems: function (getNextItemPage) {
                this._getNextItemPage = getNextItemPage;

                if (this._listAlreadyCreated) {
                    this.RefreshListItems();
                }

                return this;
            },
            WithListItems: function (listItems) {
                if (listItems === void 0) { listItems = []; }
                if (H5.is(listItems, System.Object) && System.Linq.Enumerable.from(listItems, TDetailsListItem).any()) {
                    this._componentCache.AddComponents(listItems);
                }

                if (this._listAlreadyCreated) {
                    this.RefreshListItems();
                }

                return this;
            },
            SortedBy: function (columnSortingKey) {
                if (System.String.isNullOrWhiteSpace(columnSortingKey)) {
                    throw new System.ArgumentException.$ctor1("columnSortingKey");
                }

                if (this._listAlreadyCreated) {
                    throw new System.InvalidOperationException.$ctor1("Can not pre-sort list items after column headers have been created");
                }

                this.SortListItems(columnSortingKey);

                return this;
            },
            Render: function () {
                if (!this._listAlreadyCreated) {
                    this.CreateList();
                }

                return this._container;
            },
            CreateList: function () {
                var $t;
                var detailsListHeader = tss.UI.Div$2(tss.UI._$1("tss-detailslist-header").WithRole("presentation"));
                this._listContainer.appendChild(detailsListHeader);

                $t = H5.getEnumerator(this._columns);
                try {
                    while ($t.moveNext()) {
                        var column = $t.Current;
                        this.CreateColumnHeader(column, detailsListHeader);
                    }
                } finally {
                    if (H5.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                this._listItemsContainer = tss.UI.Div$2(tss.UI._$1("tss-detailslist-list-items-container").WithRole("presentation"));
                this._listContainer.appendChild(this._listItemsContainer);

                if (System.Linq.Enumerable.from(this._columns, tss.IDetailsListColumn).all(function (detailsListColumn) {
                        return detailsListColumn.tss$IDetailsListColumn$Width.Unit === "px";
                    })) {
                    var totalWidth = System.Linq.Enumerable.from(this._columns, tss.IDetailsListColumn).sum(function (detailsListColumn) {
                            return detailsListColumn.tss$IDetailsListColumn$Width.Size + 4;
                        });
                    detailsListHeader.style.width = tss.usX.px$2((totalWidth)).toString();
                    this._listContainer.style.width = System.String.format("min(100%, {0})", [tss.usX.px$2((totalWidth + 32))]);
                    this._listItemsContainer.style.width = tss.usX.px$2((totalWidth)).toString();
                } else {
                    detailsListHeader.style.width = "100%";
                    this._listContainer.style.width = "100%";
                    this._listItemsContainer.style.width = "100%";
                }

                tss.domObs.WhenMounted(detailsListHeader, H5.fn.bind(this, function () {
                    var rect = detailsListHeader.getBoundingClientRect();
                    this._listItemsContainer.style.minHeight = "calc(100% - " + System.Double.format(rect.height) + "px)";
                }));

                this.RefreshListItems();

                this._listAlreadyCreated = true;
            },
            RefreshListItems: function () {
                var $t, $t1;
                if (this._componentCache.HasComponents) {
                    if (H5.is(this._getNextItemPage, System.Object)) {
                        var vis = tss.UI.VisibilitySensor(H5.fn.bind(this, function (v) {
                            tss.tX.fireAndForget(System.Threading.Tasks.Task.run(H5.fn.bind(this, function () {
                                var $s = 0,
                                    $t1, 
                                    $tr1, 
                                    $jff, 
                                    $tcs = new H5.TCS(), 
                                    $rv, 
                                    nextPageItems, 
                                    vElement, 
                                    $t, 
                                    $ae, 
                                    $ab = H5.fn.bind(this, function () {
                                        try {
                                            for (;;) {
                                                $s = H5.STEP([0,1], $s);
                                                switch ($s) {
                                                    case 0: {
                                                        $t1 = this._getNextItemPage();
                                                        $s = 1;
                                                        if ($t1.isC()) {
                                                            continue;
                                                        }
                                                        $t1.c($ab);
                                                        return;
                                                    }
                                                    case 1: {
                                                        $tr1 = $t1.gAR();
                                                        nextPageItems = $tr1;

                                                        vElement = v.Render();
                                                        this._listItemsContainer.removeChild(vElement);

                                                        if (H5.is(nextPageItems, System.Object) && System.Linq.Enumerable.from(nextPageItems, TDetailsListItem).any()) {
                                                            this._componentCache.AddComponents(nextPageItems);
                                                            tss.UI.AppendChildren(this._listItemsContainer, ($t = HTMLElement, System.Linq.Enumerable.from(this._componentCache.GetAllRenderedComponentsFromCache(), $t).ToArray($t)));

                                                            v.Reset();
                                                            this._listItemsContainer.appendChild(vElement);
                                                        }
                                                        $tcs.sR(null);
                                                        return;
                                                    }
                                                    default: {
                                                        $tcs.sR(null);
                                                        return;
                                                    }
                                                }
                                            }
                                        } catch($ae1) {
                                            $ae = System.Exception.create($ae1);
                                            $tcs.sE($ae);
                                        }
                                    }, arguments);

                                $ab();
                                return $tcs.task;
                            })));
                        }), true, tss.UI.TextBlock("Loading..."));

                        tss.UI.RemoveChildElements(this._listItemsContainer);
                        tss.UI.AppendChildren(this._listItemsContainer, ($t = HTMLElement, System.Linq.Enumerable.from(this._componentCache.GetAllRenderedComponentsFromCache(), $t).ToArray($t)));
                        this._listItemsContainer.appendChild(vis.Render());
                    } else {
                        tss.UI.RemoveChildElements(this._listItemsContainer);
                        tss.UI.AppendChildren(this._listItemsContainer, ($t1 = HTMLElement, System.Linq.Enumerable.from(this._componentCache.GetAllRenderedComponentsFromCache(), $t1).ToArray($t1)));
                    }
                } else if (H5.is(this._emptyListMessageGenerator, System.Object)) {
                    var emptyMessage = this._emptyListMessageGenerator().tss$IC$Render();
                    tss.domObs.WhenMounted(emptyMessage, H5.fn.bind(this, function () {
                        var rect = this._listItemsContainer.getBoundingClientRect();
                        emptyMessage.style.height = System.Double.format(Math.max(64, rect.height)) + "px";
                        emptyMessage.style.width = "100%";
                    }));
                    this._listItemsContainer.appendChild(emptyMessage);
                }
            },
            CreateColumnHeader: function (column, detailsListHeader) {
                var columnHeader = tss.UI.Div$2(tss.UI._$1("tss-detailslist-column-header").WithRole("columnheader"));

                var columnHtmlElement = column.tss$IC$Render();

                columnHeader.style.width = column.tss$IDetailsListColumn$Width.toString();
                if (H5.is(column.tss$IDetailsListColumn$MaxWidth, System.Object)) {
                    columnHeader.style.maxWidth = column.tss$IDetailsListColumn$MaxWidth.toString();
                }


                if (column.tss$IDetailsListColumn$EnableOnColumnClickEvent || column.tss$IDetailsListColumn$EnableColumnSorting) {
                    columnHeader.classList.add("tss-cursor-pointer");
                }

                if (column.tss$IDetailsListColumn$EnableColumnSorting) {
                    columnHeader.addEventListener("click", H5.fn.bind(this, function () {
                        this.SortList(column.tss$IDetailsListColumn$SortingKey, columnHtmlElement);
                    }));
                }

                if (column.tss$IDetailsListColumn$EnableOnColumnClickEvent) {
                    columnHeader.addEventListener("click", H5.fn.cacheBind(column, column.tss$IDetailsListColumn$OnColumnClick));
                }

                columnHeader.appendChild(columnHtmlElement);

                if (column.tss$IDetailsListColumn$IsRowHeader) {
                    this.CreateColumnSortingIcon();

                    columnHeader.appendChild(this._columnSortingIcon);
                }

                detailsListHeader.appendChild(columnHeader);
            },
            CreateColumnSortingIcon: function () {
                this._columnSortingIcon = tss.UI.I$1(this._currentLineAwesomeSortingIcon, "la", "tss-detailslist-column-header-sorting-icon");
            },
            CreateListItem: function (detailsListItemAndKey) {
                var $t;
                var detailsListItemNumber = { };
                var detailsListItem = { };
                H5.Deconstruct(detailsListItemAndKey.$clone(), detailsListItemNumber, detailsListItem);

                var detailsListItemContainer = tss.UI.Div$2(tss.UI._$1("tss-detailslist-list-item-container").WithRole("presentation"));
                var gridCellHtmlElements = ($t = tss.IC, System.Linq.Enumerable.from(detailsListItem.v.tss$IDetailsListItem$Render(this._columns, tss.DetailsList(TDetailsListItem).CreateGridCell), $t).ToArray($t));

                if (detailsListItem.v.tss$IDetailsListItem$EnableOnListItemClickEvent) {
                    var detailsListItemNumberCopy = detailsListItemNumber.v;

                    detailsListItemContainer.addEventListener("click", function () {
                        detailsListItem.v.tss$IDetailsListItem$OnListItemClick(detailsListItemNumberCopy);
                    });

                    detailsListItemContainer.classList.add("tss-cursor-pointer");
                }

                tss.UI.AppendChildren(detailsListItemContainer, System.Linq.Enumerable.from(gridCellHtmlElements, tss.IC).select(function (c) {
                        return c.tss$IC$Render();
                    }).ToArray(HTMLElement));

                return detailsListItemContainer;
            },
            SortList: function (columnSortingKey, columnHtmlElement) {
                this._listItemsContainer.classList.add("tss-fade");

                window.setTimeout(H5.fn.bind(this, function (_) {
                    if (System.String.equals(this._previousColumnSortingKey, columnSortingKey)) {
                        this._componentCache.ReverseComponentOrder();
                        this.UpdateColumnSortingIcon(columnHtmlElement, H5.fn.cacheBind(this, this.InvertLineAwesomeColumnSortingIcon));
                    } else {
                        this.SortListItems(columnSortingKey);

                        if (!System.String.isNullOrWhiteSpace(columnSortingKey)) {
                            this.UpdateColumnSortingIcon(columnHtmlElement, H5.fn.bind(this, function () {
                                this._currentLineAwesomeSortingIcon = 60;
                            }));
                        }
                    }

                    this.RefreshListItems();

                    this._listItemsContainer.classList.remove("tss-fade");
                    this._previousColumnSortingKey = columnSortingKey;
                }), 100);

                /* The above magic number is the length of the fade out transition added to the _detailsListItemContainer
                  minus a completely arbitrary amount. Can we access this programmatically? Loop over the item opacity?
                  Could possibly do with adding a fade in transition as well to make the appearance of the newly ordered
                  list items smoother. - MB 16/02/2020 */
            },
            SortListItems: function (columnSortingKey) {
                this._componentCache.SortComponents(function (detailsListItem, detailsListItemOther) {
                    return detailsListItem[H5.geti(detailsListItem, "tss$IDetailsListItemT$" + H5.getTypeAlias(TDetailsListItem) + "$CompareTo", "tss$IDetailsListItemT$CompareTo")](detailsListItemOther, columnSortingKey);
                });
            },
            InvertLineAwesomeColumnSortingIcon: function () {
                this._currentLineAwesomeSortingIcon = this._currentLineAwesomeSortingIcon === 60 ? 57 : 60;
            },
            UpdateColumnSortingIcon: function (htmlElement, setLineAwesomeIconExpression) {
                this._columnSortingIcon.remove();
                setLineAwesomeIconExpression();
                this.CreateColumnSortingIcon();
                htmlElement.parentElement.appendChild(this._columnSortingIcon);
            }
        }
    }; });

    H5.define("tss.IDetailsListColumn", {
        inherits: [tss.IC],
        $kind: "interface"
    });

    H5.define("tss.FileDropArea", {
        inherits: [tss.IC],
        fields: {
            _fileInput: null,
            _raw: null,
            _container: null
        },
        events: {
            FileDropped: null
        },
        props: {
            Content: {
                set: function (value) {
                    this._raw.Content$1(value);
                }
            },
            /**
             * Gets or sets the type of files accepted by this selector. See https://www.w3schools.com/tags/att_input_accept.asp for more information.
             Valid values are a list of extensions, like ".txt|.doc|.docx", of media type, such as  "audio/*|video/*|image/*", or a combination of both
             *
             * @instance
             * @public
             * @memberof tss.FileDropArea
             * @function Accepts
             * @type string
             */
            Accepts: {
                get: function () {
                    return this._fileInput.accept;
                },
                set: function (value) {
                    this._fileInput.accept = value;
                }
            },
            IsMultiple: {
                get: function () {
                    return this._fileInput.multiple;
                },
                set: function (value) {
                    this._fileInput.multiple = value;
                }
            }
        },
        alias: ["Render", "tss$IC$Render"],
        ctors: {
            ctor: function () {
                this.$initialize();
                var triggerDroppedOnFile = null;
                this._fileInput = tss.UI.FileInput(tss.UI._$1("tss-file-input"));

                this._container = this.CreateDefaultDropArea();
                triggerDroppedOnFile = H5.fn.bind(this, function () {
                    var $t;
                    if (this._fileInput.files.length > 0) {
                        $t = H5.getEnumerator(this._fileInput.files, File);
                        try {
                            while ($t.moveNext()) {
                                var file = $t.Current;
                                this.FileDropped(this, file);
                                if (!this.IsMultiple) {
                                    break;
                                }
                            }
                        } finally {
                            if (H5.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }
                });

                this._fileInput.onchange = function (e) {
                    triggerDroppedOnFile();
                };

                ;
            }
        },
        methods: {
            CreateDefaultDropArea: function () {
                var OnReadEntry = null;
                var OnReadEntries = null;
                var ReadDirectory = null;
                var dropArea = tss.UI.Div$2(tss.UI._$1("tss-filedroparea"));
                dropArea.appendChild(this._fileInput);

                this._raw = tss.UI.Raw$2(tss.UI.Div$1(tss.UI._$1("tss-filedroparea-message"), tss.UI.I(tss.UI._$1(System.String.format("las la-upload tss-filedroparea-icon", null))), tss.txtX.Primary(tss.txt, tss.ITFX.Medium(tss.txt, tss.ITFX.SemiBold(tss.txt, tss.UI.TextBlock("Drop files here or click to upload")))).Render()));

                dropArea.appendChild(this._raw.Render());
                dropArea.onclick = H5.fn.bind(this, function (e) {
                    this._fileInput.click();
                });
                dropArea.ondragover = function (e) {
                    tss.UI.StopEvent(e);
                    dropArea.classList.add("tss-dropping");
                };
                dropArea.ondragleave = function (e) {
                    tss.UI.StopEvent(e);
                    dropArea.classList.remove("tss-dropping");
                };
                ReadDirectory = function (dir) {
                    var dirReader = H5.unbox(dir).createReader();
                    var readEnt = OnReadEntries;
                    H5.unbox(dirReader).readEntries(readEnt);
                };
                OnReadEntry = H5.fn.bind(this, function (entry) {
                    if (H5.unbox(entry).isDirectory === true) {
                        ReadDirectory(entry);
                    } else if (H5.unbox(entry).isFile === true) {
                        var upload = H5.fn.bind(this, function (f) {
                            !H5.staticEquals(this.FileDropped, null) ? this.FileDropped(this, f) : null;
                        });
                        H5.unbox(entry).file(upload);
                    }
                });
                dropArea.ondrop = H5.fn.bind(this, function (e) {
                    var $t;
                    tss.UI.StopEvent(e);
                    dropArea.classList.remove("tss-dropping");
                    $t = H5.getEnumerator(e.dataTransfer.items, DataTransferItem);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            if (!H5.rE(item.kind, "file")) {
                                continue;
                            }
                            OnReadEntry(item.webkitGetAsEntry());
                            if (!this.IsMultiple) {
                                break;
                            }
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                });





                OnReadEntries = H5.fn.bind(this, function (entries) {
                    for (var i = 0; i < entries.length; i = (i + 1) | 0) {
                        var entry = entries[System.Array.index(i, entries)];
                        OnReadEntry(entry);
                        if (!this.IsMultiple) {
                            break;
                        }
                    }
                });



                return dropArea;
            },
            OnFileDropped: function (handler) {
                this.addFileDropped(handler);
                return this;
            },
            SetContent: function (content) {
                this.Content = content;
                return this;
            },
            /**
             * Sets the type of files accepted by this selector. See https://www.w3schools.com/tags/att_input_accept.asp for more information.
             Valid values are a list of extensions, like ".txt|.doc|.docx", of media type, such as  "audio/*|video/*|image/*", or a combination of both
             *
             * @instance
             * @public
             * @this tss.FileDropArea
             * @memberof tss.FileDropArea
             * @param   {string}              accepts
             * @return  {tss.FileDropArea}
             */
            SetAccepts: function (accepts) {
                this.Accepts = accepts;
                return this;
            },
            Multiple: function () {
                this.IsMultiple = true;
                return this;
            },
            Render: function () {
                return this._container;
            }
        }
    });

    H5.define("tss.Float", {
        inherits: [tss.IC],
        fields: {
            _child: null,
            _floatingContainer: null
        },
        alias: ["Render", "tss$IC$Render"],
        ctors: {
            ctor: function (child, position) {
                this.$initialize();
                this._child = child;
                this._floatingContainer = tss.UI.Div(tss.UI._$1(System.String.format("tss-float {0}", [H5.box(position, tss.Float.Position, System.Enum.toStringFn(tss.Float.Position))])), this._child.tss$IC$Render());
            }
        },
        methods: {
            Render: function () {
                return this._floatingContainer;
            }
        }
    });

    H5.define("tss.GridPicker", {
        inherits: [tss.IC],
        statics: {
            fields: {
                _dragSource: null,
                _draggingColumnStart: 0,
                _draggingRowStart: 0,
                _draggingColumnEnd: 0,
                _draggingRowEnd: 0,
                _draggingColumnMin: 0,
                _draggingRowMin: 0,
                _draggingColumnMax: 0,
                _draggingRowMax: 0,
                _draggingState: 0
            },
            ctors: {
                init: function () {
                    this._draggingColumnStart = -1;
                    this._draggingRowStart = -1;
                    this._draggingColumnEnd = -1;
                    this._draggingRowEnd = -1;
                    this._draggingColumnMin = -1;
                    this._draggingRowMin = -1;
                    this._draggingColumnMax = -1;
                    this._draggingRowMax = -1;
                    this._draggingState = -1;
                }
            }
        },
        fields: {
            _stack: null,
            _columns: 0,
            _rows: 0,
            _stateCount: 0,
            _states: null,
            _formatState: null,
            _buttons: null,
            _hoverColumn: 0,
            _hoverRow: 0
        },
        events: {
            Changed: null
        },
        props: {
            IsDragging: {
                get: function () {
                    return H5.rE(tss.GridPicker._dragSource, this);
                }
            }
        },
        alias: ["Render", "tss$IC$Render"],
        ctors: {
            init: function () {
                this._stack = tss.UI.Class(tss.S, tss.UI.VStack(), "tss-gridpicker");
                this._hoverColumn = -1;
                this._hoverRow = -1;
            },
            ctor: function (columnNames, rowNames, states, initialStates, formatState, columns, rowHeight) {
                if (columns === void 0) { columns = null; }
                if (rowHeight === void 0) { rowHeight = null; }
                var $t;

                this.$initialize();
                this._columns = columnNames.length;
                this._rows = rowNames.length;
                this._stateCount = states;
                this._states = initialStates;
                this._formatState = formatState;
                var gridElements = new (System.Collections.Generic.List$1(tss.IC)).ctor();

                gridElements.add(tss.UI.TextBlock$1());

                for (var row = 0; row < this._rows; row = (row + 1) | 0) {
                    var rowText = tss.ICX.WS(tss.txt, tss.ICX.HS(tss.txt, tss.UI.Class(tss.txt, tss.UI.TextBlock(rowNames[System.Array.index(row, rowNames)]), "tss-gridpicker-row-title")));
                    if (H5.is(rowHeight, System.Object)) {
                        rowText.Render().style.lineHeight = rowHeight.toString();
                    }
                    gridElements.add(rowText);
                }

                this._buttons = System.Linq.Enumerable.range(0, this._rows).select(H5.fn.bind(this, function (_) {
                    return System.Array.init(this._columns, null, tss.Button);
                })).ToArray(System.Array.type(tss.Button));

                for (var column = 0; column < this._columns; column = (column + 1) | 0) {
                    gridElements.add(tss.UI.Class(tss.txt, tss.ICX.WS(tss.txt, tss.UI.TextBlock(columnNames[System.Array.index(column, columnNames)])), "tss-gridpicker-column-title"));

                    for (var row1 = 0; row1 < this._rows; row1 = (row1 + 1) | 0) {
                        var columnIndex = { v : column };
                        var rowIndex = { v : row1 };

                        var btn = tss.UI.Class(tss.Button, tss.ICX.WS(tss.Button, tss.ICX.HS(tss.Button, tss.UI.Button$1())), "tss-gridpicker-button").OnClick$1((function ($me, columnIndex, rowIndex) {
                            return H5.fn.bind($me, function () {
                                this.NextState(columnIndex.v, rowIndex.v);
                            });
                        })(this, columnIndex, rowIndex));

                        this.ConfigureButton(btn, column, row1);

                        gridElements.add(btn);
                        ($t = this._buttons[System.Array.index(row1, this._buttons)])[System.Array.index(column, $t)] = btn;
                    }
                }

                this.UpdateAll();

                if (H5.is(columns, System.Object)) {
                    if (columns.length < this._columns) {
                        columns = System.Linq.Enumerable.from(columns, tss.us).concat(System.Linq.Enumerable.repeat(System.Linq.Enumerable.from(columns, tss.us).last(), ((((this._columns - columns.length) | 0) + 1) | 0))).ToArray(tss.us);
                    }
                } else {
                    columns = System.Linq.Enumerable.range(0, ((this._columns + 1) | 0)).select(function (d) {
                        return tss.usX.fr$1(1);
                    }).ToArray(tss.us);
                }

                if (rowHeight == null) {
                    rowHeight = tss.usX.fr$1(1);
                }

                this._stack.Add(tss.ICTX.Children$1(tss.Grid, tss.ICX.PB(tss.Grid, tss.ICX.PT(tss.Grid, tss.ICX.WS(tss.Grid, tss.UI.Grid$1(columns, System.Linq.Enumerable.range(0, ((this._rows + 1) | 0)).select(function (d) {
                    return rowHeight;
                }).ToArray(tss.us)).AlignItemsCenter()), 16), 16).Gap(tss.usX.px$1(2)).FlowColumn(), gridElements));
            }
        },
        methods: {
            GetState: function () {
                return System.Linq.Enumerable.from(this._states, System.Array.type(System.Int32)).select(function (t) {
                        var $t;
                        return ($t = System.Int32, System.Linq.Enumerable.from(t, $t).ToArray($t));
                    }).ToArray(System.Array.type(System.Int32));
            },
            SetState: function (state) {
                this._states = state;
                this.UpdateAll();
                if (this._hoverColumn >= 0) {
                    this.HoverState(this._hoverColumn, this._hoverRow);
                }
                return this;
            },
            RaiseOnChange: function (ev) {
                !H5.staticEquals(this.Changed, null) ? this.Changed(this, ev) : null;
            },
            OnChange: function (onChange) {
                this.addChanged(onChange);
                return this;
            },
            NextState: function (column, row) {
                var $t, $t1;
                var current = ($t = this._states[System.Array.index(row, this._states)])[System.Array.index(column, $t)];
                var newIndex = (((current + 1) | 0)) % this._stateCount;
                ($t1 = this._states[System.Array.index(row, this._states)])[System.Array.index(column, $t1)] = newIndex;

                this.UpdateSingle(column, row);
            },
            UpdateSingle: function (column, row) {
                var $t, $t1, $t2, $t3;
                if (tss.GridPicker._draggingColumnMin <= column && tss.GridPicker._draggingColumnMax >= column && tss.GridPicker._draggingRowMin <= row && tss.GridPicker._draggingRowMax >= row) {
                    this._formatState(($t = this._buttons[System.Array.index(row, this._buttons)])[System.Array.index(column, $t)], tss.GridPicker._draggingState, ($t1 = this._states[System.Array.index(row, this._states)])[System.Array.index(column, $t1)]);
                } else {
                    this._formatState(($t2 = this._buttons[System.Array.index(row, this._buttons)])[System.Array.index(column, $t2)], ($t3 = this._states[System.Array.index(row, this._states)])[System.Array.index(column, $t3)], -1);
                }


                if (!this.IsDragging) {
                    this.RaiseOnChange(null);
                }
            },
            HoverState: function (column, row) {
                var $t, $t1, $t2, $t3, $t4;
                var current = ($t = this._states[System.Array.index(row, this._states)])[System.Array.index(column, $t)];
                var newIndex = (((current + 1) | 0)) % this._stateCount;

                if (tss.GridPicker._draggingColumnMin <= column && tss.GridPicker._draggingColumnMax >= column && tss.GridPicker._draggingRowMin <= row && tss.GridPicker._draggingRowMax >= row) {
                    this._formatState(($t1 = this._buttons[System.Array.index(row, this._buttons)])[System.Array.index(column, $t1)], tss.GridPicker._draggingState, ($t2 = this._states[System.Array.index(row, this._states)])[System.Array.index(column, $t2)]);
                } else {
                    this._formatState(($t3 = this._buttons[System.Array.index(row, this._buttons)])[System.Array.index(column, $t3)], newIndex, ($t4 = this._states[System.Array.index(row, this._states)])[System.Array.index(column, $t4)]);
                }
            },
            ApplyDrag: function () {
                for (var row = tss.GridPicker._draggingRowMin; row <= tss.GridPicker._draggingRowMax; row = (row + 1) | 0) {
                    var sr = this._states[System.Array.index(row, this._states)];
                    for (var column = tss.GridPicker._draggingColumnMin; column <= tss.GridPicker._draggingColumnMax; column = (column + 1) | 0) {
                        sr[System.Array.index(column, sr)] = tss.GridPicker._draggingState;
                    }
                }
            },
            UpdateAll: function () {
                for (var row = 0; row < this._rows; row = (row + 1) | 0) {
                    var br = this._buttons[System.Array.index(row, this._buttons)];
                    var sr = this._states[System.Array.index(row, this._states)];
                    for (var column = 0; column < this._columns; column = (column + 1) | 0) {
                        if (this.IsDragging && tss.GridPicker._draggingColumnMin <= column && tss.GridPicker._draggingColumnMax >= column && tss.GridPicker._draggingRowMin <= row && tss.GridPicker._draggingRowMax >= row) {
                            this._formatState(br[System.Array.index(column, br)], tss.GridPicker._draggingState, sr[System.Array.index(column, sr)]);
                        } else {
                            this._formatState(br[System.Array.index(column, br)], sr[System.Array.index(column, sr)], -1);
                        }
                    }
                }
            },
            ConfigureButton: function (component, column, row) {
                var element = component.Render();
                element.draggable = true;
                element.style.userSelect = "none";

                element.onmouseenter = H5.fn.combine(element.onmouseenter, H5.fn.bind(this, function (e) {
                    this._hoverColumn = column;
                    this._hoverRow = row;
                    this.HoverState(column, row);
                }));

                element.onmouseleave = H5.fn.combine(element.onmouseleave, H5.fn.bind(this, function (e) {
                    this._hoverColumn = -1;
                    this._hoverRow = -1;
                    this.UpdateSingle(column, row);
                }));

                element.ondragstart = H5.fn.combine(element.ondragstart, H5.fn.bind(this, function (e) {
                    var $t;
                    this.NextState(column, row);

                    tss.GridPicker._dragSource = this;

                    tss.GridPicker._draggingColumnStart = column;
                    tss.GridPicker._draggingRowStart = row;
                    tss.GridPicker._draggingColumnEnd = column;
                    tss.GridPicker._draggingRowEnd = row;
                    tss.GridPicker._draggingColumnMin = column;
                    tss.GridPicker._draggingRowMin = row;
                    tss.GridPicker._draggingColumnMax = column;
                    tss.GridPicker._draggingRowMax = row;
                    tss.GridPicker._draggingState = ($t = this._states[System.Array.index(row, this._states)])[System.Array.index(column, $t)];

                    this.UpdateAll();

                    e.dataTransfer.effectAllowed = "move";
                    var nothing = tss.UI.DIV();
                    e.dataTransfer.setDragImage(nothing, 0, 0);
                }));

                element.ondragend = H5.fn.combine(element.ondragend, H5.fn.bind(this, function (e) {
                    this.TryEndDrag();
                }));

                element.ondragover = H5.fn.combine(element.ondragover, H5.fn.bind(this, function (e) {
                    if (H5.rE(tss.GridPicker._dragSource, this)) {
                        tss.UI.StopEvent(e);
                        e.dataTransfer.dropEffect = "move";
                    }
                }));

                element.ondragenter = H5.fn.combine(element.ondragenter, H5.fn.bind(this, function (e) {
                    if (H5.rE(tss.GridPicker._dragSource, this)) {
                        if (tss.GridPicker._draggingColumnStart >= 0) {
                            tss.UI.StopEvent(e);

                            tss.GridPicker._draggingColumnEnd = column;
                            tss.GridPicker._draggingRowEnd = row;
                            tss.GridPicker._draggingColumnMin = Math.min(tss.GridPicker._draggingColumnStart, tss.GridPicker._draggingColumnEnd);
                            tss.GridPicker._draggingRowMin = Math.min(tss.GridPicker._draggingRowStart, tss.GridPicker._draggingRowEnd);
                            tss.GridPicker._draggingColumnMax = Math.max(tss.GridPicker._draggingColumnStart, tss.GridPicker._draggingColumnEnd);
                            tss.GridPicker._draggingRowMax = Math.max(tss.GridPicker._draggingRowStart, tss.GridPicker._draggingRowEnd);

                            this.UpdateAll();
                        }
                    }
                }));

                element.ondrop = H5.fn.combine(element.ondrop, H5.fn.bind(this, function (e) {
                    this.TryEndDrag();
                }));
            },
            TryEndDrag: function () {
                if (H5.rE(tss.GridPicker._dragSource, this)) {
                    this.ApplyDrag();

                    tss.GridPicker._dragSource = null;

                    tss.GridPicker._draggingState = -1;
                    tss.GridPicker._draggingColumnStart = -1;
                    tss.GridPicker._draggingRowStart = -1;
                    tss.GridPicker._draggingColumnEnd = -1;
                    tss.GridPicker._draggingRowEnd = -1;
                    tss.GridPicker._draggingColumnMin = -1;
                    tss.GridPicker._draggingRowMin = -1;
                    tss.GridPicker._draggingColumnMax = -1;
                    tss.GridPicker._draggingRowMax = -1;

                    this.UpdateAll();

                    this.RaiseOnChange(null);
                }
            },
            Render: function () {
                return this._stack.Render();
            }
        }
    });

    H5.define("tss.HorizontalSeparator", {
        inherits: [tss.IC,tss.IHBG],
        fields: {
            _container: null,
            _separator: null
        },
        props: {
            Alignment: {
                get: function () {
                    if (this._container.classList.contains("tss-left")) {
                        return tss.HorizontalSeparator.Align.Left;
                    }
                    if (this._container.classList.contains("tss-right")) {
                        return tss.HorizontalSeparator.Align.Right;
                    }
                    return tss.HorizontalSeparator.Align.Center;
                },
                set: function (value) {
                    this._container.classList.remove("tss-left");
                    this._container.classList.remove("tss-right");
                    if (value === tss.HorizontalSeparator.Align.Left) {
                        this._container.classList.add("tss-left");
                    }
                    if (value === tss.HorizontalSeparator.Align.Right) {
                        this._container.classList.add("tss-right");
                    }
                }
            },
            Text: {
                get: function () {
                    return this._separator.textContent;
                },
                set: function (value) {
                    var $t;
                    this._separator.textContent = ($t = value, $t != null ? $t : "");
                }
            },
            Background: {
                get: function () {
                    return this._separator.style.background;
                },
                set: function (value) {
                    this._separator.style.background = value;
                }
            }
        },
        alias: [
            "Background", "tss$IHBG$Background",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            ctor: function (text) {
                if (text === void 0) { text = ""; }

                this.$initialize();
                this._separator = tss.UI.Div$2(tss.UI._$1("tss-horizontalseparator"));
                this._container = tss.UI.Div(tss.UI._$1("tss-horizontalseparator-container"), this._separator);
                this.Text = text;
            },
            $ctor1: function (component) {
                this.$initialize();
                this._separator = tss.UI.Div$2(tss.UI._$1("tss-horizontalseparator"));
                this._separator.appendChild(component.tss$IC$Render());
                this._container = tss.UI.Div(tss.UI._$1("tss-horizontalseparator-container"), this._separator);
            }
        },
        methods: {
            SetContent: function (component) {
                tss.UI.ClearChildren(this._separator);
                this._separator.appendChild(component.tss$IC$Render());
                return this;
            },
            Primary: function () {
                this._separator.classList.add("tss-primary");
                return this;
            },
            SetText: function (text) {
                this.Text = text;
                return this;
            },
            Render: function () {
                return this._container;
            },
            Left: function () {
                this.Alignment = tss.HorizontalSeparator.Align.Left;
                return this;
            },
            Center: function () {
                this.Alignment = tss.HorizontalSeparator.Align.Center;
                return this;
            },
            Right: function () {
                this.Alignment = tss.HorizontalSeparator.Align.Right;
                return this;
            }
        }
    });

    H5.define("tss.Icon", {
        inherits: [tss.IC,tss.IHFG,tss.ITF],
        fields: {
            InnerElement: null
        },
        props: {
            Foreground: {
                get: function () {
                    return this.InnerElement.style.color;
                },
                set: function (value) {
                    this.InnerElement.style.color = value;
                }
            },
            Size: {
                get: function () {
                    return tss.ITFX.FromClassList$1(this.InnerElement, "tss-fontsize-small");
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.TS, this.Size));
                    this.InnerElement.classList.add(System.Enum.toString(tss.TS, value));
                }
            },
            Weight: {
                get: function () {
                    return tss.ITFX.FromClassList$2(this.InnerElement, "tss-fontweight-regular");
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.TW, this.Weight));
                    this.InnerElement.classList.add(System.Enum.toString(tss.TW, value));
                }
            },
            TextAlign: {
                get: function () {
                    return tss.ITFX.FromClassList(this.InnerElement, "tss-textalign-center");
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.TA, this.TextAlign));
                    this.InnerElement.classList.add(System.Enum.toString(tss.TA, value));
                }
            },
            Title: {
                get: function () {
                    return this.InnerElement.title;
                },
                set: function (value) {
                    this.InnerElement.title = value;
                }
            }
        },
        alias: [
            "Foreground", "tss$IHFG$Foreground",
            "Size", "tss$ITF$Size",
            "Weight", "tss$ITF$Weight",
            "TextAlign", "tss$ITF$TextAlign",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            ctor: function (icon) {
                this.$initialize();
                this.InnerElement = tss.UI.I(tss.UI._$1("tss-icon " + (icon || "")));
                this.InnerElement.dataset.icon = icon;
            }
        },
        methods: {
            SetIcon: function (icon) {
                var current = this.InnerElement.dataset.icon;

                if (!System.String.isNullOrWhiteSpace(current)) {
                    this.InnerElement.classList.remove.apply(this.InnerElement.classList, System.String.split(current, System.Array.init([32], System.Char).map(function (i) {{ return String.fromCharCode(i); }}), null, 1));
                }

                if (!System.String.isNullOrEmpty(icon)) {
                    this.InnerElement.classList.add.apply(this.InnerElement.classList, System.String.split(icon, System.Array.init([32], System.Char).map(function (i) {{ return String.fromCharCode(i); }}), null, 1));
                }

                this.InnerElement.dataset.icon = icon;
                return this;
            },
            SetTitle: function (title) {
                this.Title = title;
                return this;
            },
            Render: function () {
                return this.InnerElement;
            }
        }
    });

    H5.define("Tesserae.ISidebarIcon", {
        inherits: [tss.IC],
        $kind: "interface"
    });

    H5.define("tss.InfiniteScrollingList", {
        inherits: [tss.IC,tss.ISCS],
        fields: {
            _grid: null,
            _stack: null,
            _maxStackItemSize: null,
            _container: null,
            _emptyListMessageGenerator: null
        },
        props: {
            StylingContainer: {
                get: function () {
                    return this._container;
                }
            },
            PropagateToStackItemParent: {
                get: function () {
                    return true;
                }
            }
        },
        alias: [
            "StylingContainer", "tss$ISCS$StylingContainer",
            "PropagateToStackItemParent", "tss$ISCS$PropagateToStackItemParent",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            $ctor1: function (getNextItemPage, columns) {
                if (columns === void 0) { columns = []; }

                tss.InfiniteScrollingList.$ctor2.call(this, System.Array.init(0, null, tss.IC), function () {
                    return System.Threading.Tasks.Task.fromResult(getNextItemPage(), System.Array.type(tss.IC));
                }, columns);
            },
            $ctor3: function (items, getNextItemPage, columns) {
                if (columns === void 0) { columns = []; }

                tss.InfiniteScrollingList.$ctor2.call(this, items, function () {
                    return System.Threading.Tasks.Task.fromResult(getNextItemPage(), System.Array.type(tss.IC));
                }, columns);
            },
            ctor: function (getNextItemPage, columns) {
                if (columns === void 0) { columns = []; }

                tss.InfiniteScrollingList.$ctor2.call(this, System.Array.init(0, null, tss.IC), getNextItemPage, columns);
            },
            $ctor2: function (items, getNextItemPage, columns) {
                if (columns === void 0) { columns = []; }

                this.$initialize();
                this._container = tss.UI.Div$2(tss.UI._$1("tss-basiclist"));

                if (columns.length < 2) {
                    this._stack = tss.ScrollBar.Scroll(tss.S, tss.ICX.MaxHeight(tss.S, tss.ICX.WidthStretch(tss.S, tss.UI.Stack().Horizontal().Wrap()), tss.usX.percent$1(100)));
                    this._maxStackItemSize = System.Linq.Enumerable.from(columns, tss.us).firstOrDefault(null, null) || tss.usX.percent$1(100);
                } else {
                    this._grid = tss.ScrollBar.Scroll(tss.Grid, tss.ICX.GridColumnStretch(tss.Grid, tss.ICX.MaxHeight(tss.Grid, tss.ICX.WS(tss.Grid, tss.UI.Grid(columns)), tss.usX.percent$1(100))));
                }
                this._emptyListMessageGenerator = null;
                this.AddItems(items);

                if (H5.is(getNextItemPage, System.Object)) {
                    var vs = tss.UI.VisibilitySensor(H5.fn.bind(this, function (v) {
                        tss.tX.fireAndForget(System.Threading.Tasks.Task.run(H5.fn.bind(this, function () {
                            var $s = 0,
                                $t1, 
                                $tr1, 
                                $t2, 
                                $tr2, 
                                $jff, 
                                $tcs = new H5.TCS(), 
                                $rv, 
                                nextPageItems, 
                                $t, 
                                item, 
                                nextPageItems1, 
                                item1, 
                                $ae, 
                                $ab = H5.fn.bind(this, function () {
                                    try {
                                        for (;;) {
                                            $s = H5.STEP([0,1,2,3,4,5], $s);
                                            switch ($s) {
                                                case 0: {
                                                    if (H5.is(this._grid, System.Object)) {
                                                        $s = 1;
                                                        continue;
                                                    } else  {
                                                        $s = 3;
                                                        continue;
                                                    }
                                                }
                                                case 1: {
                                                    $t1 = getNextItemPage();
                                                    $s = 2;
                                                    if ($t1.isC()) {
                                                        continue;
                                                    }
                                                    $t1.c($ab);
                                                    return;
                                                }
                                                case 2: {
                                                    $tr1 = $t1.gAR();
                                                    nextPageItems = $tr1;
                                                    this._grid.Remove(v);
                                                    if (H5.is(nextPageItems, System.Object) && System.Linq.Enumerable.from(nextPageItems, tss.IC).any()) {
                                                        $t = H5.getEnumerator(nextPageItems);
                                                        try {
                                                            while ($t.moveNext()) {
                                                                item = $t.Current;
                                                                this._grid.Add(item);
                                                            }
                                                        } finally {
                                                            if (H5.is($t, System.IDisposable)) {
                                                                $t.System$IDisposable$Dispose();
                                                            }
                                                        }
                                                        v.Reset();
                                                        this._grid.Add(v);
                                                    }
                                                    $s = 5;
                                                    continue;
                                                }
                                                case 3: {
                                                    $t2 = getNextItemPage();
                                                    $s = 4;
                                                    if ($t2.isC()) {
                                                        continue;
                                                    }
                                                    $t2.c($ab);
                                                    return;
                                                }
                                                case 4: {
                                                    $tr2 = $t2.gAR();
                                                    nextPageItems1 = $tr2;
                                                    this._stack.Remove(v);
                                                    if (H5.is(nextPageItems1, System.Object) && System.Linq.Enumerable.from(nextPageItems1, tss.IC).any()) {
                                                        $t1 = H5.getEnumerator(nextPageItems1);
                                                        try {
                                                            while ($t1.moveNext()) {
                                                                item1 = $t1.Current;
                                                                this._stack.Add(tss.ICX.W$1(tss.IC, item1, this._maxStackItemSize));
                                                            }
                                                        } finally {
                                                            if (H5.is($t1, System.IDisposable)) {
                                                                $t1.System$IDisposable$Dispose();
                                                            }
                                                        }
                                                        v.Reset();
                                                        this._stack.Add(v);
                                                    }
                                                    $s = 5;
                                                    continue;
                                                }
                                                case 5: {
                                                    $tcs.sR(null);
                                                    return;
                                                }
                                                default: {
                                                    $tcs.sR(null);
                                                    return;
                                                }
                                            }
                                        }
                                    } catch($ae1) {
                                        $ae = System.Exception.create($ae1);
                                        $tcs.sE($ae);
                                    }
                                }, arguments);

                            $ab();
                            return $tcs.task;
                        })));

                    }), true, tss.UI.TextBlock("Loading..."));

                    if (H5.is(this._grid, System.Object)) {
                        this._grid.Add(vs);
                    } else {
                        this._stack.Add(vs);
                    }
                }
            }
        },
        methods: {
            AddItems: function (items) {
                var $t, $t1;
                if (H5.is(items, System.Object) && System.Linq.Enumerable.from(items, tss.IC).any()) {
                    if (H5.is(this._grid, System.Object)) {
                        $t = H5.getEnumerator(items);
                        try {
                            while ($t.moveNext()) {
                                var item = $t.Current;
                                this._grid.Add(item);
                            }
                        } finally {
                            if (H5.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    } else {
                        $t1 = H5.getEnumerator(items);
                        try {
                            while ($t1.moveNext()) {
                                var item1 = $t1.Current;
                                this._stack.Add(tss.ICX.W$1(tss.IC, item1, this._maxStackItemSize));
                            }
                        } finally {
                            if (H5.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }
                    }
                }
                if (H5.is(this._emptyListMessageGenerator, System.Object)) {
                    if (H5.is(this._grid, System.Object)) {
                        tss.tX.AsTask(tss.ICTX.Children$6(tss.Grid, this._grid, [tss.ICX.GridColumnStretch(tss.IC, this._emptyListMessageGenerator())]));
                    } else {
                        tss.tX.AsTask(tss.ICTX.Children$6(tss.S, this._stack, [tss.ICX.HeightStretch(tss.IC, tss.ICX.WidthStretch(tss.IC, this._emptyListMessageGenerator()))]));
                    }
                }
            },
            WithEmptyMessage: function (emptyListMessageGenerator) {
                this._emptyListMessageGenerator = emptyListMessageGenerator || (function () {
                    throw new System.ArgumentNullException.$ctor1("emptyListMessageGenerator");
                })();
                return this;
            },
            Render: function () {
                if (H5.is(this._grid, System.Object)) {
                    this._container.appendChild(this._grid.Render());
                } else {
                    this._container.appendChild(this._stack.Render());
                }
                return this._container;
            }
        }
    });

    H5.define("tss.ItemsList", {
        inherits: [tss.IC,tss.ISCS],
        fields: {
            _grid: null,
            _stack: null,
            _maxStackItemSize: null,
            _defered: null,
            _emptyListMessageGenerator: null,
            Items: null
        },
        props: {
            StylingContainer: {
                get: function () {
                    return this._defered.Container;
                }
            },
            PropagateToStackItemParent: {
                get: function () {
                    return true;
                }
            }
        },
        alias: [
            "StylingContainer", "tss$ISCS$StylingContainer",
            "PropagateToStackItemParent", "tss$ISCS$PropagateToStackItemParent",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            ctor: function (items, columns) {
                if (columns === void 0) { columns = []; }

                tss.ItemsList.$ctor1.call(this, new (tss.ObservableList(tss.IC)).ctor(items || System.Array.init(0, null, tss.IC)), columns);
            },
            $ctor1: function (items, columns) {
                if (columns === void 0) { columns = []; }

                this.$initialize();
                this.Items = items || new (tss.ObservableList(tss.IC)).ctor();

                if (columns.length < 2) {
                    this._stack = tss.ScrollBar.Scroll(tss.S, tss.ICX.MaxHeight(tss.S, tss.ICX.WidthStretch(tss.S, tss.UI.Stack().Horizontal().Wrap()), tss.usX.percent$1(100)));
                    this._maxStackItemSize = System.Linq.Enumerable.from(columns, tss.us).firstOrDefault(null, null) || tss.usX.percent$1(100);
                } else {
                    this._grid = tss.ScrollBar.Scroll(tss.Grid, tss.ICX.MaxHeight(tss.Grid, tss.ICX.WidthStretch(tss.Grid, tss.UI.Grid(columns)), tss.usX.percent$1(100)));
                }
                this._emptyListMessageGenerator = null;

                this._defered = tss.DC.Observe(System.Collections.Generic.IReadOnlyList$1(tss.IC), this.Items, H5.fn.bind(this, function (observedItems) {
                    if (!System.Linq.Enumerable.from(observedItems, tss.IC).any()) {
                        if (H5.is(this._emptyListMessageGenerator, System.Object)) {
                            if (H5.is(this._grid, System.Object)) {
                                return tss.tX.AsTask(tss.ICTX.Children$6(tss.Grid, this._grid, [tss.ICX.GridColumnStretch(tss.IC, this._emptyListMessageGenerator())]));
                            } else {
                                return tss.tX.AsTask(tss.ICTX.Children$6(tss.S, this._stack, [tss.ICX.HeightStretch(tss.IC, tss.ICX.WidthStretch(tss.IC, this._emptyListMessageGenerator()))]));
                            }
                        } else {
                            if (H5.is(this._grid, System.Object)) {
                                this._grid.Clear();
                                return tss.tX.AsTask(this._grid);
                            } else {
                                this._stack.Clear();
                                return tss.tX.AsTask(this._stack);
                            }
                        }
                    } else {
                        if (H5.is(this._grid, System.Object)) {
                            return tss.tX.AsTask(tss.ICTX.Children$1(tss.Grid, this._grid, observedItems));
                        } else {
                            return tss.tX.AsTask(tss.ICTX.Children$6(tss.S, this._stack, System.Linq.Enumerable.from(observedItems, tss.IC).select(H5.fn.bind(this, function (i) {
                                    return tss.ICX.Width(tss.IC, i, this._maxStackItemSize);
                                })).ToArray(tss.IC)));
                        }
                    }
                }));
            }
        },
        methods: {
            WithEmptyMessage: function (emptyListMessageGenerator) {
                this._emptyListMessageGenerator = emptyListMessageGenerator || (function () {
                    throw new System.ArgumentNullException.$ctor1("emptyListMessageGenerator");
                })();
                this._defered.Refresh();
                return this;
            },
            Render: function () {
                return this._defered.Render();
            }
        }
    });

    H5.define("tss.Link", {
        inherits: [tss.IC,tss.ITF],
        fields: {
            _anchor: null,
            _features: null
        },
        props: {
            Target: {
                get: function () {
                    return this._anchor.target;
                },
                set: function (value) {
                    this._anchor.target = value;
                }
            },
            URL: {
                get: function () {
                    return this._anchor.href;
                },
                set: function (value) {
                    this._anchor.href = value;
                }
            },
            Size: {
                get: function () {
                    return tss.ITFX.FromClassList$1(this._anchor, "tss-fontsize-small");
                },
                set: function (value) {
                    this._anchor.classList.remove(System.Enum.toString(tss.TS, this.Size));
                    this._anchor.classList.add(System.Enum.toString(tss.TS, value));
                }
            },
            Weight: {
                get: function () {
                    return tss.ITFX.FromClassList$2(this._anchor, "tss-fontweight-regular");
                },
                set: function (value) {
                    this._anchor.classList.remove(System.Enum.toString(tss.TW, this.Weight));
                    this._anchor.classList.add(System.Enum.toString(tss.TW, value));
                }
            },
            TextAlign: {
                get: function () {
                    return tss.ITFX.FromClassList(this._anchor, "tss-textalign-center");
                },
                set: function (value) {
                    this._anchor.classList.remove(System.Enum.toString(tss.TA, this.TextAlign));
                    this._anchor.classList.add(System.Enum.toString(tss.TA, value));
                }
            }
        },
        alias: [
            "Render", "tss$IC$Render",
            "Size", "tss$ITF$Size",
            "Weight", "tss$ITF$Weight",
            "TextAlign", "tss$ITF$TextAlign"
        ],
        ctors: {
            ctor: function (url, component, noUnderline) {
                if (noUnderline === void 0) { noUnderline = false; }

                this.$initialize();
                this._anchor = tss.UI.A(tss.UI._$2(void 0, void 0, void 0, url, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0), [component.tss$IC$Render()]);

                if (noUnderline) {
                    this._anchor.classList.add("tss-link-no-underline");
                }
            }
        },
        methods: {
            Render: function () {
                return this._anchor;
            },
            OpenInNewTab: function () {
                this.Target = "_blank";
                return this;
            },
            AsWindow: function (features) {
                if (features === void 0) { features = null; }
                if (System.String.isNullOrEmpty(features)) {
                    var left = ((H5.Int.div((((window.screen.availWidth - 900) | 0)), 2)) | 0);
                    var top = ((H5.Int.div((((window.screen.availHeight - 600) | 0)), 2)) | 0);
                    this._features = System.String.format("scrollbars=yes,resizable=yes,toolbar=no,status=no,menubar=no,width=900,height=600,left={0},top={1}", H5.box(left, System.Int32), H5.box(top, System.Int32));
                } else {
                    this._features = features;
                }

                return this.OnClick(H5.fn.bind(this, function () {
                    window.open(this._anchor.href, this._anchor.target, this._features);
                }));
            },
            OnClick: function (onClicked) {
                if (H5.staticEquals(onClicked, null)) {
                    throw new System.ArgumentNullException.$ctor1("onClicked");
                }

                this._anchor.onclick = function (e) {
                    tss.UI.StopEvent(e);
                    onClicked();
                };

                return this;
            }
        }
    });

    H5.define("tss.Picker", function (TPickerItem) { return {
        inherits: [tss.IC,tss.ITAB,tss.IObservableListComponent(TPickerItem)],
        fields: {
            _pickerItems: null,
            _container: null,
            _textBox: null,
            _suggestionsLayer: null,
            _renderSelectionsInline: false,
            _selectionsElement: null,
            _debounce: 0,
            _debounceTimeout: 0,
            _hideSugestionsTimeout: 0,
            _textBoxElement: null,
            MaximumAllowedSelections: null,
            DuplicateSelectionsAllowed: false,
            SuggestionsTolerance: 0
        },
        events: {
            SelectedItem: null
        },
        props: {
            TabIndex: {
                set: function (value) {
                    this._textBox.TabIndex = value;
                }
            },
            PickerItems: {
                get: function () {
                    return this._pickerItems;
                }
            },
            SelectedPickerItems: {
                get: function () {
                    return System.Linq.Enumerable.from(this._pickerItems, TPickerItem).where(function (pickerItem) {
                            return pickerItem.tss$IPickerItem$IsSelected;
                        });
                }
            },
            UnselectedPickerItems: {
                get: function () {
                    return System.Linq.Enumerable.from(this._pickerItems, TPickerItem).where(function (pickerItem) {
                            return !pickerItem.tss$IPickerItem$IsSelected;
                        });
                }
            }
        },
        alias: [
            "TabIndex", "tss$ITAB$TabIndex",
            "AsObservable", "tss$IObservableListComponent$" + H5.getTypeAlias(TPickerItem) + "$AsObservable",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            init: function () {
                this._pickerItems = new (tss.ObservableList(TPickerItem)).ctor();
                this._debounceTimeout = 50;
            },
            ctor: function (maximumAllowedSelections, duplicateSelectionsAllowed, suggestionsTolerance, renderSelectionsInline, suggestionsTitleText) {
                if (maximumAllowedSelections === void 0) { maximumAllowedSelections = 2147483647; }
                if (duplicateSelectionsAllowed === void 0) { duplicateSelectionsAllowed = false; }
                if (suggestionsTolerance === void 0) { suggestionsTolerance = 0; }
                if (renderSelectionsInline === void 0) { renderSelectionsInline = true; }
                if (suggestionsTitleText === void 0) { suggestionsTitleText = null; }

                this.$initialize();
                this.MaximumAllowedSelections = maximumAllowedSelections;
                this.DuplicateSelectionsAllowed = duplicateSelectionsAllowed;
                this.SuggestionsTolerance = suggestionsTolerance;
                this._renderSelectionsInline = renderSelectionsInline;
                this._selectionsElement = tss.UI.Div$2(tss.UI._$1("tss-picker-selections"));

                var pickerContainer = tss.UI.Div$2(tss.UI._$1("tss-picker-container"));

                if (this._renderSelectionsInline) {
                    pickerContainer.classList.add("tss-picker-container-inline-selections");
                    this._selectionsElement.classList.add("tss-picker-selections-inline");
                }

                this._container = tss.UI.DIV();
                this._textBox = tss.UI.TextBox$1();
                this._suggestionsLayer = new (tss.Picker.SuggestionsLayer(TPickerItem))(new (tss.Picker.Suggestions(TPickerItem))(suggestionsTitleText));

                this.CreatePicker(pickerContainer);
            }
        },
        methods: {
            AsObservable: function () {
                return this._pickerItems;
            },
            Items: function (items) {
                if (items === void 0) { items = []; }
                return this.Items$1(items);
            },
            Items$1: function (items) {
                var $t, $t1;
                if (items == null) {
                    throw new System.ArgumentNullException.$ctor1("items");
                }

                items = ($t = TPickerItem, System.Linq.Enumerable.from(items, $t).toList($t));

                if (!System.Linq.Enumerable.from(items, TPickerItem).any()) {
                    throw new System.ArgumentException.$ctor1("items");
                }

                if (System.Linq.Enumerable.from(this.PickerItems, TPickerItem).any(function (pickerItem) {
                        return System.Linq.Enumerable.from(items, TPickerItem).any(function (item) {
                                return System.String.equals(pickerItem.tss$IPickerItem$Name, item.tss$IPickerItem$Name);
                            });
                    })) {
                    throw new System.ArgumentException.$ctor1("Can not add duplicate items");
                }

                this._pickerItems.AddRange(items);

                $t1 = H5.getEnumerator(items, TPickerItem);
                try {
                    while ($t1.moveNext()) {
                        var item = $t1.Current;
                        if (item.tss$IPickerItem$IsSelected) {
                            this.CreateSelection(item);
                        }
                    }
                } finally {
                    if (H5.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }

                return this;
            },
            OnItemSelected: function (eventHandler) {
                this.addSelectedItem(eventHandler);
                return this;
            },
            Render: function () {
                return this._container;
            },
            CreatePicker: function (pickerContainer) {
                this._container.appendChild(pickerContainer);

                this._textBox.OnInput(H5.fn.bind(this, function (_, __) {
                    this.OnTextBoxInput();
                }));
                this._textBox.OnFocus(H5.fn.bind(this, function (_, __) {
                    this.OnTextBoxInput();
                }));
                this._textBox.OnBlur(H5.fn.bind(this, function (_, __) {
                    this.OnTextBoxBlur();
                }));

                this._textBoxElement = this._textBox.Render();

                pickerContainer.appendChild(this._textBoxElement);

                if (this._renderSelectionsInline) {
                    pickerContainer.insertBefore(this._selectionsElement, this._textBoxElement);
                } else {
                    pickerContainer.appendChild(this._selectionsElement);
                }
            },
            OnTextBoxInput: function () {
                window.clearTimeout(this._hideSugestionsTimeout);
                window.clearTimeout(this._debounce);
                this._debounce = window.setTimeout(H5.fn.bind(this, function (_) {
                    this.ShowSuggestions();
                }), this._debounceTimeout);
            },
            ShowSuggestions: function () {
                this.ClearSuggestions();

                if (this.SuggestionsTolerance > 0 && (System.String.isNullOrWhiteSpace(this._textBox.Text) || (this._textBox.Text.length < this.SuggestionsTolerance))) {
                    this._suggestionsLayer.Hide();
                    return;
                }

                var suggestions = this.GetSuggestions(this._textBox.Text);

                this.CreateSuggestions(suggestions);
            },
            OnTextBoxBlur: function () {
                this._hideSugestionsTimeout = window.setTimeout(H5.fn.bind(this, function (_) {
                    this.ClearSuggestions();
                    this._suggestionsLayer.Hide();
                }), 150);
            },
            GetPickerItems: function () {
                if (!System.Nullable.hasValue(this.MaximumAllowedSelections) || System.Nullable.lt(System.Linq.Enumerable.from(this.SelectedPickerItems, TPickerItem).count(), this.MaximumAllowedSelections)) {
                    return this.DuplicateSelectionsAllowed ? this.PickerItems : this.UnselectedPickerItems;
                }

                return System.Linq.Enumerable.empty();
            },
            GetSuggestions: function (textBoxText) {
                if (System.String.isNullOrWhiteSpace(textBoxText)) {
                    return this.GetPickerItems();
                }

                textBoxText = textBoxText.toUpperCase();

                return System.Linq.Enumerable.from(this.GetPickerItems(), TPickerItem).where(function (pickerItem) {
                        return System.String.contains(pickerItem.tss$IPickerItem$Name.toUpperCase(),textBoxText);
                    });
            },
            CreateSuggestions: function (suggestions) {
                var $t, $t1;
                suggestions = ($t = TPickerItem, System.Linq.Enumerable.from(suggestions, $t).toList($t));

                if (!System.Linq.Enumerable.from(suggestions, TPickerItem).any()) {
                    this._suggestionsLayer.Hide();
                    return;
                }

                $t1 = H5.getEnumerator(suggestions, TPickerItem);
                try {
                    while ($t1.moveNext()) {
                        var suggestion = { v : $t1.Current };
                        var suggestionContainerElement = tss.UI.Div(tss.UI._$1("tss-picker-suggestion"), suggestion.v.tss$IPickerItem$Render().tss$IC$Render());

                        suggestionContainerElement.onclick = H5.fn.combine(suggestionContainerElement.onclick, (function ($me, suggestion) {
                            return H5.fn.bind($me, function (e) {
                                tss.UI.StopEvent(e);
                                this.CreateSelection(suggestion.v);
                            });
                        })(this, suggestion));

                        this._suggestionsLayer.SuggestionsContent.appendChild(suggestionContainerElement);
                    }
                } finally {
                    if (H5.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }

                if (!this._suggestionsLayer.IsVisible) {
                    this._suggestionsLayer.Show();
                }

                this.PositionSuggestions();
            },
            ClearSuggestions: function () {
                var suggestions = this._suggestionsLayer.SuggestionsContent.getElementsByClassName("tss-picker-suggestion");

                while (suggestions.length > 0) {
                    suggestions[0].parentNode.removeChild(suggestions[0]);
                }
            },
            CreateSelection: function (selectedItem) {
                this.UpdateSelection(selectedItem, true);

                var selectionContainerElement = tss.UI.Div$2(tss.UI._$1("tss-picker-selection"));
                var selectionComponent = selectedItem.tss$IPickerItem$Render();
                var removeButton = tss.UI.Button$1().Link().SetIcon$2(1218, "var(--tss-default-foreground-color)", "tss-fontsize-medium", "lal", false).OnClick(H5.fn.bind(this, function (_, __) {
                    this.UpdateSelection(selectedItem, false);
                    selectionContainerElement.remove();
                })).Render();

                removeButton.classList.add("tss-picker-remove");

                selectionContainerElement.appendChild(selectionComponent.tss$IC$Render());
                selectionContainerElement.appendChild(removeButton);

                this._selectionsElement.appendChild(selectionContainerElement);

                !H5.staticEquals(this.SelectedItem, null) ? this.SelectedItem(this, new (tss.Picker.ItemPickedEvent(TPickerItem))(selectedItem)) : null;
            },
            UpdateSelection: function (selectedItem, isSelected) {
                selectedItem.tss$IPickerItem$IsSelected = isSelected;
                this._textBox.ClearText();
                window.clearTimeout(this._hideSugestionsTimeout);
                this._hideSugestionsTimeout = window.setTimeout(H5.fn.bind(this, function (_) {
                    this.ClearSuggestions();
                    this._suggestionsLayer.Hide();
                }), 150);
            },
            PositionSuggestions: function () {
                this._suggestionsLayer.SuggestionsContainer.classList.add("tss-layer-picker-suggestions");

                var suggestionsContentClientHeight = this._suggestionsLayer.SuggestionsContent.clientHeight;
                var textBoxClientRect = this._textBoxElement.getBoundingClientRect();
                var bodyClientRect = document.body.getBoundingClientRect();

                if (suggestionsContentClientHeight + textBoxClientRect.bottom + 10 >= bodyClientRect.height) {
                    this._suggestionsLayer.SuggestionsContainer.style.top = System.String.format("{0}", [tss.usX.px((textBoxClientRect.bottom - suggestionsContentClientHeight - textBoxClientRect.height - 10))]);
                } else {
                    this._suggestionsLayer.SuggestionsContainer.style.top = System.String.format("{0}", [tss.usX.px((textBoxClientRect.bottom + 10))]);
                }

                this._suggestionsLayer.SuggestionsContainer.style.left = tss.usX.px(textBoxClientRect.left).toString();
                this._suggestionsLayer.SuggestionsContainer.style.width = System.String.format("{0}", [tss.usX.px((textBoxClientRect.width / 2))]);
            }
        }
    }; });

    H5.define("tss.Picker.ItemPickedEvent", function (TPickerItem) { return {
        $kind: "nested class",
        fields: {
            Item: H5.getDefaultValue(TPickerItem)
        },
        ctors: {
            ctor: function (item) {
                this.$initialize();
                this.Item = item;
            }
        }
    }; });

    H5.define("tss.Picker.Suggestions", function (TPickerItem) { return {
        inherits: [tss.IC],
        $kind: "nested class",
        fields: {
            _suggestions: null
        },
        alias: ["Render", "tss$IC$Render"],
        ctors: {
            ctor: function (suggestionsTitleText) {
                this.$initialize();
                this._suggestions = tss.UI.Div$2(tss.UI._$1("tss-picker-suggestions"));

                if (!System.String.isNullOrWhiteSpace(suggestionsTitleText)) {
                    var suggestionsLabel = tss.UI.Div$2(tss.UI._$2("tss-picker-label tss-fontsize-medium tss-fontweight-semibold tss-fontcolor-primary", void 0, void 0, void 0, void 0, void 0, suggestionsTitleText, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0));

                    this._suggestions.appendChild(suggestionsLabel);
                }
            }
        },
        methods: {
            Render: function () {
                return this._suggestions;
            }
        }
    }; });

    H5.define("tss.Pivot", {
        inherits: [tss.IC,tss.ISCS],
        fields: {
            OrderedTabs: null,
            RenderedTitles: null,
            RenderedTabs: null,
            RenderedContent: null,
            Line: null,
            _initiallySelectedID: null,
            _currentSelectedID: null,
            _isRendered: false,
            StylingContainer: null,
            SelectedNav: null,
            HoveredNav: null,
            T0: 0,
            CurrentWidth: 0,
            CurrentLeft: 0,
            TargetWidth: 0,
            TargetLeft: 0,
            Left0: 0,
            _firstRender: false
        },
        events: {
            BeforeNavigated: null,
            Navigated: null
        },
        props: {
            SelectedTab: {
                get: function () {
                    var $t;
                    return ($t = this._currentSelectedID, $t != null ? $t : this._initiallySelectedID);
                }
            },
            PropagateToStackItemParent: {
                get: function () {
                    return true;
                }
            }
        },
        alias: [
            "StylingContainer", "tss$ISCS$StylingContainer",
            "PropagateToStackItemParent", "tss$ISCS$PropagateToStackItemParent",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            init: function () {
                this.OrderedTabs = new (System.Collections.Generic.List$1(tss.Pivot.Tab)).ctor();
                this.RenderedTitles = new (System.Collections.Generic.Dictionary$2(tss.Pivot.Tab,HTMLElement)).ctor();
                this._isRendered = false;
                this.T0 = 0;
                this.CurrentWidth = 0;
                this.CurrentLeft = 0;
                this._firstRender = false;
            },
            ctor: function () {
                this.$initialize();
                this.Line = tss.UI.Div$2(tss.UI._$1("tss-pivot-line"));
                this.RenderedTabs = tss.UI.Div$2(tss.UI._$1("tss-pivot-titlebar"));
                this.RenderedContent = tss.UI.Div$2(tss.UI._$1("tss-pivot-content"));
                this.StylingContainer = tss.UI.Div$2(tss.UI._$1("tss-pivot"), [this.RenderedTabs, this.Line, this.RenderedContent]);
            }
        },
        methods: {
            Justified: function () {
                this.RenderedTabs.style.justifyContent = "space-between";
                return this;
            },
            HideIfSingle: function () {
                this.RenderedTabs.classList.add("tss-pivot-titlebar-hide-if-single");
                return this;
            },
            Add: function (tab) {
                if (this._initiallySelectedID == null) {
                    this._initiallySelectedID = tab.Id;
                }
                this.OrderedTabs.add(tab);
                var title = tab.RenderTitle();
                this.RenderedTitles.add(tab, title);
                this.AttachEvents(tab.Id, title);
                this.RenderedTabs.appendChild(title);

                if (this._isRendered && this.OrderedTabs.Count === 1) {
                    this.Select(tab.Id);
                }
                return this;
            },
            RemoveTab: function (id) {
                var tab = System.Linq.Enumerable.from(this.OrderedTabs, tss.Pivot.Tab).firstOrDefault(function (t) {
                        return H5.rE(t.Id, id);
                    }, null);

                if (H5.is(tab, System.Object)) {
                    this.OrderedTabs.remove(tab);
                    var renderedTitle = { };

                    if (this.RenderedTitles.tryGetValue(tab, renderedTitle)) {
                        this.RenderedTabs.removeChild(renderedTitle.v);
                        this.RenderedTitles.remove(tab);
                    }

                    if (H5.rE(this._currentSelectedID, id)) {
                        if (this._isRendered && this.OrderedTabs.Count > 0) {
                            this.Select(System.Linq.Enumerable.from(this.OrderedTabs, tss.Pivot.Tab).first().Id);
                        }
                    }

                    if (H5.rE(this._initiallySelectedID, id)) {
                        this._initiallySelectedID = null;
                    }
                }
            },
            AttachEvents: function (id, title) {
                title.onclick = H5.fn.bind(this, function (e) {
                    tss.UI.StopEvent(e);
                    this.Select(id);
                });

                title.onmouseover = H5.fn.bind(this, function (e) {
                    this.HoveredNav = title;
                    this.TriggerAnimation();
                });

                title.onmouseleave = H5.fn.bind(this, function (e) {
                    if (H5.rE(this.HoveredNav, title)) {
                        this.HoveredNav = null;
                        this.TriggerAnimation();
                    }
                });
            },
            OnBeforeNavigate: function (onBeforeNavigate) {
                this.addBeforeNavigated(onBeforeNavigate);
                return this;
            },
            OnNavigate: function (onNavigate) {
                this.addNavigated(onNavigate);
                return this;
            },
            Select: function (id, refresh) {
                if (refresh === void 0) { refresh = false; }
                if (!H5.rE(this._currentSelectedID, id) || refresh) {
                    var tab = System.Linq.Enumerable.from(this.OrderedTabs, tss.Pivot.Tab).firstOrDefault(function (t) {
                            return H5.rE(t.Id, id);
                        }, null);
                    this.Select$1(tab);
                }
                return this;
            },
            Select$1: function (tab) {
                if (!this._isRendered) {
                    this._initiallySelectedID = tab.Id;
                    return this;
                }


                var pbne = new tss.Pivot.PivotBeforeNavigateEvent(this._currentSelectedID, tab.Id);

                !H5.staticEquals(this.BeforeNavigated, null) ? this.BeforeNavigated(this, pbne) : null;

                if (pbne.Canceled) {
                    return this;
                }

                var title = this.RenderedTitles.getItem(tab);

                var content = tss.UI.Div$2(tss.UI._());
                content.style.width = "100%";
                content.style.minHeight = "100%";

                try {
                    content = tab.RenderContent();
                } catch (E) {
                    E = System.Exception.create(E);
                    content.textContent = H5.toString(E);
                }

                tss.UI.ClearChildren(this.RenderedContent);
                this.RenderedContent.appendChild(content);

                this._currentSelectedID = tab.Id;
                this.UpdateTitleStyles(title);
                this.TriggerAnimation();

                var pne = new tss.Pivot.PivotNavigateEvent(this._currentSelectedID, tab.Id);

                !H5.staticEquals(this.Navigated, null) ? this.Navigated(this, pne) : null;

                return this;
            },
            UpdateTitleStyles: function (title) {
                var $t;
                $t = H5.getEnumerator(this.RenderedTitles.Values);
                try {
                    while ($t.moveNext()) {
                        var v = $t.Current;
                        if (H5.rE(v, title)) {
                            v.classList.add("tss-pivot-selected-title");
                        } else {
                            v.classList.remove("tss-pivot-selected-title");
                        }
                    }
                } finally {
                    if (H5.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                this.SelectedNav = title;
            },
            Render: function () {
                if (!this._isRendered) {
                    this._isRendered = true;

                    if (!H5.rE(this._initiallySelectedID, this._currentSelectedID)) {
                        this._firstRender = true;
                        this.Select(this._initiallySelectedID);
                    }

                    var ro = new tss.ResizeObserver();
                    ro.Observe(this.StylingContainer);
                    ro.OnResize = H5.fn.bind(this, function () {
                        this.TriggerAnimation();
                    });
                }

                return this.StylingContainer;
            },
            TriggerAnimation: function () {
                this.T0 = -1;
                window.requestAnimationFrame(H5.fn.bind(this, function (t) {
                    this.AnimateLine(t);
                }));
            },
            AnimateLine: function (time) {
                if (this.T0 < 0) {
                    var target = this.HoveredNav || this.SelectedNav;
                    if (target == null) {
                        return;
                    }
                    this.T0 = time;
                    var r = target.getBoundingClientRect();
                    this.TargetWidth = r.width;
                    this.TargetLeft = r.left;
                    this.Left0 = this.RenderedTabs.getBoundingClientRect().left;
                }

                var f = (time - this.T0) / 500;
                if (this._firstRender) {
                    f = 1;
                    this._firstRender = false;
                }

                if (f > 1) {
                    f = 1;
                }

                this.CurrentWidth += (this.TargetWidth - this.CurrentWidth) * f;
                this.CurrentLeft += (this.TargetLeft - this.CurrentLeft) * f;
                this.Line.style.width = System.Double.format(this.CurrentWidth) + "px";
                this.Line.style.marginLeft = System.Double.format((this.CurrentLeft - this.Left0)) + "px";

                if (Math.abs(this.CurrentLeft - this.TargetLeft) > 1E-05 || Math.abs(this.CurrentWidth - this.TargetWidth) > 1E-05) {
                    window.requestAnimationFrame(H5.fn.bind(this, function (t) {
                        this.AnimateLine(t);
                    }));
                }
            }
        }
    });

    H5.define("tss.ProgressIndicator", {
        inherits: [tss.IC,tss.IHFG],
        fields: {
            InnerElement: null,
            BarElement: null
        },
        props: {
            Foreground: {
                get: function () {
                    return this.BarElement.style.background;
                },
                set: function (value) {
                    if (this.BarElement.classList.contains("tss-progressindicator-bar-indeterminate")) {
                        this.BarElement.style.background = System.String.format("linear-gradient(to right, var(--tss-progress-background-color) 0%, {0} 50%, var(--tss-progress-background-color) 100%)", [value]);
                    } else {
                        this.BarElement.style.background = value;
                    }
                }
            }
        },
        alias: [
            "Foreground", "tss$IHFG$Foreground",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                this.BarElement = tss.UI.Div$2(tss.UI._$1("tss-progressindicator-bar"));
                this.InnerElement = tss.UI.Div(tss.UI._$1("tss-progressindicator"), this.BarElement);
            }
        },
        methods: {
            Progress: function (position, total) {
                return this.Progress$1(100.0 * position / total);
            },
            Progress$1: function (percent) {
                if (!this.BarElement.classList.contains("tss-progressindicator-bar")) {
                    this.BarElement.classList.add("tss-progressindicator-bar");
                    this.BarElement.classList.remove("tss-progressindicator-bar-indeterminate");
                }
                percent = Math.max(0.0, Math.min(100.0, percent));
                this.BarElement.style.width = System.String.format("{0}%", [H5.box(percent, System.Single, System.Single.format, System.Single.getHashCode)]);
                return this;
            },
            Indeterminated: function () {
                if (!this.BarElement.classList.contains("tss-progressindicator-bar-indeterminate")) {
                    this.BarElement.classList.remove("tss-progressindicator-bar");
                    this.BarElement.classList.add("tss-progressindicator-bar-indeterminate");
                }
                this.BarElement.style.width = "100%";
                return this;
            },
            Render: function () {
                return this.InnerElement;
            }
        }
    });

    H5.define("tss.Raw", {
        inherits: [tss.IC,tss.IHMP,tss.IHBG],
        fields: {
            InnerElement: null,
            _hasProperties: 0
        },
        props: {
            Background: {
                get: function () {
                    return this.InnerElement.style.background;
                },
                set: function (value) {
                    this._hasProperties = (this._hasProperties | 1) & 255;
                    this.InnerElement.style.background = value;
                }
            },
            Margin: {
                get: function () {
                    return this.InnerElement.style.margin;
                },
                set: function (value) {
                    this._hasProperties = (this._hasProperties | 2) & 255;
                    this.InnerElement.style.margin = value;
                }
            },
            Padding: {
                get: function () {
                    return this.InnerElement.style.padding;
                },
                set: function (value) {
                    this._hasProperties = (this._hasProperties | 4) & 255;
                    this.InnerElement.style.padding = value;
                }
            },
            Width: {
                get: function () {
                    return this.InnerElement.style.width;
                },
                set: function (value) {
                    this._hasProperties = (this._hasProperties | 8) & 255;
                    this.InnerElement.style.width = value;
                }
            },
            Height: {
                get: function () {
                    return this.InnerElement.style.height;
                },
                set: function (value) {
                    this._hasProperties = (this._hasProperties | 16) & 255;
                    this.InnerElement.style.height = value;
                }
            },
            MaxWidth: {
                get: function () {
                    return this.InnerElement.style.maxWidth;
                },
                set: function (value) {
                    this._hasProperties = (this._hasProperties | 32) & 255;
                    this.InnerElement.style.maxWidth = value;
                }
            },
            MaxHeight: {
                get: function () {
                    return this.InnerElement.style.maxHeight;
                },
                set: function (value) {
                    this._hasProperties = (this._hasProperties | 64) & 255;
                    this.InnerElement.style.maxHeight = value;
                }
            },
            FlexGrow: {
                get: function () {
                    return this.InnerElement.style.flexGrow;
                },
                set: function (value) {
                    this._hasProperties = (this._hasProperties | 128) & 255;
                    this.InnerElement.style.flexGrow = value;
                }
            },
            FlexShrink: {
                get: function () {
                    return this.InnerElement.style.flexShrink;
                },
                set: function (value) {
                    this._hasProperties = (this._hasProperties | 128) & 255;
                    this.InnerElement.style.flexShrink = value;
                }
            }
        },
        alias: [
            "Background", "tss$IHBG$Background",
            "Margin", "tss$IHMP$Margin",
            "Padding", "tss$IHMP$Padding",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            ctor: function (content) {
                if (content === void 0) { content = null; }

                this.$initialize();
                this.InnerElement = content || tss.UI.DIV();
            },
            $ctor1: function (component) {
                tss.Raw.ctor.call(this, component != null ? component.tss$IC$Render() : null);
            }
        },
        methods: {
            Content$1: function (component) {
                return this.Content(component.tss$IC$Render());
            },
            Content: function (element) {
                if (this._hasProperties > 0) {
                    this.CopyPropertiesTo(element);
                }

                if ((H5.is(this.InnerElement, System.Object)) && (H5.is(this.InnerElement.parentElement, System.Object))) {
                    this.InnerElement.parentElement.replaceChild(element, this.InnerElement);
                }

                this.InnerElement = element;
                return this;
            },
            CopyPropertiesTo: function (element) {
                if ((this._hasProperties & 1) === 1) {
                    element.style.background = this.InnerElement.style.background;
                }
                if ((this._hasProperties & 2) === 2) {
                    element.style.margin = this.InnerElement.style.margin;
                }
                if ((this._hasProperties & 4) === 4) {
                    element.style.padding = this.InnerElement.style.padding;
                }
                if ((this._hasProperties & 8) === 8) {
                    element.style.width = this.InnerElement.style.width;
                }
                if ((this._hasProperties & 16) === 16) {
                    element.style.height = this.InnerElement.style.height;
                }
                if ((this._hasProperties & 32) === 32) {
                    element.style.maxWidth = this.InnerElement.style.maxWidth;
                }
                if ((this._hasProperties & 64) === 64) {
                    element.style.maxHeight = this.InnerElement.style.maxHeight;
                }
                if ((this._hasProperties & 128) === 128) {
                    element.style.flexGrow = this.InnerElement.style.flexGrow;
                }
            },
            Render: function () {
                return this.InnerElement;
            }
        }
    });

    H5.define("tss.SearchableGroupedList", function (T) { return {
        inherits: [tss.IC,tss.ISCS],
        fields: {
            _groupedItemHeaderGenerator: null,
            _defered: null,
            _searchBoxContainer: null,
            _searchBoxContainerComponents: null,
            _stack: null,
            _searchBox: null,
            _list: null,
            _groupComparer: null,
            Items: null
        },
        props: {
            StylingContainer: {
                get: function () {
                    return this._stack.InnerElement;
                }
            },
            PropagateToStackItemParent: {
                get: function () {
                    return true;
                }
            }
        },
        alias: [
            "StylingContainer", "tss$ISCS$StylingContainer",
            "PropagateToStackItemParent", "tss$ISCS$PropagateToStackItemParent",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            ctor: function (items, groupedItemHeaderGenerator, columns) {
                if (columns === void 0) { columns = []; }

                tss.SearchableGroupedList(T).$ctor1.call(this, new (tss.ObservableList(T)).ctor(items || System.Array.init(0, function (){
                    return H5.getDefaultValue(T);
                }, T)), groupedItemHeaderGenerator, columns);
            },
            $ctor1: function (originalItems, groupedItemHeaderGenerator, columns) {
                if (columns === void 0) { columns = []; }

                this.$initialize();
                this._groupedItemHeaderGenerator = groupedItemHeaderGenerator;
                this._searchBox = tss.ICX.Grow(tss.SearchBox, tss.ICX.Width(tss.SearchBox, new tss.SearchBox().Underlined().SetPlaceholder("Type to search").SearchAsYouType(), tss.usX.px$1(100)));
                this._list = tss.UI.ItemsList(System.Array.init(0, null, tss.IC), columns);

                this._groupComparer = System.StringComparer.OrdinalIgnoreCase;

                this.Items = new (tss.ObservableList(tss.IC)).ctor();

                this._defered = tss.ICX.Grow(tss.IDefer, tss.ICX.WidthStretch(tss.IDefer, tss.UI.Defer$3(System.Collections.Generic.IReadOnlyList$1(tss.IC), this.Items, H5.fn.bind(this, function (item) {
                    var $t;
                    var searchTerms = System.String.split((($t = this._searchBox.Text, $t != null ? $t : "")), System.Array.init([32], System.Char).map(function (i) {{ return String.fromCharCode(i); }}), null, 1);
                    var filteredItems = System.Linq.Enumerable.from(originalItems).ofType(T).where(function (i) {
                        return searchTerms.length === 0 || System.Linq.Enumerable.from(searchTerms, System.String).all(function (st) {
                                return i.tss$ISearchableItem$IsMatch(st);
                            });
                    }).ToArray(T);
                    this.AddGroupedItems(filteredItems, this._list.Items, (H5.is(columns, System.Object) && columns.length > 1));
                    return tss.tX.AsTask(tss.ICX.Stretch(tss.ItemsList, this._list));
                }))));

                originalItems.Observe(H5.fn.bind(this, function (_) {
                    this._defered.tss$IDefer$Refresh();
                }));

                this._searchBox.OnSearch(H5.fn.bind(this, function (_, __) {
                    this._defered.tss$IDefer$Refresh();
                }));

                this._searchBoxContainer = tss.ICTX.Children$6(tss.S, tss.ICX.WidthStretch(tss.S, tss.UI.Stack().Horizontal()), [this._searchBox]).AlignItems("center");
                this._searchBoxContainerComponents = H5.fn.bind(this, function (_o1) {
                        _o1.add(this._searchBox);
                        return _o1;
                    })(new (System.Collections.Generic.List$1(tss.IC)).ctor());
                this._stack = tss.ICX.MaxHeight(tss.S, tss.ICX.WidthStretch(tss.S, tss.ICTX.Children$6(tss.S, tss.UI.Stack(), [this._searchBoxContainer, tss.ScrollBar.Scroll(tss.IDefer, this._defered)])), tss.usX.percent$1(100));
            }
        },
        methods: {
            WithNoResultsMessage: function (emptyListMessageGenerator) {
                this._list.WithEmptyMessage(emptyListMessageGenerator || (function () {
                    throw new System.ArgumentNullException.$ctor1("emptyListMessageGenerator");
                })());
                this._defered.tss$IDefer$Refresh();
                return this;
            },
            WithGroupOrdering: function (groupComparer) {
                this._groupComparer = groupComparer;
                this._defered.tss$IDefer$Refresh();
                return this;
            },
            SearchBox: function (sb) {
                sb(this._searchBox);
                return this;
            },
            CaptureSearchBox: function (sb) {
                sb.v = this._searchBox;
                return this;
            },
            BeforeSearchBox: function (beforeComponents) {
                var $t;
                if (beforeComponents === void 0) { beforeComponents = []; }
                $t = H5.getEnumerator(System.Linq.Enumerable.from(beforeComponents, tss.IC).reverse());
                try {
                    while ($t.moveNext()) {
                        var component = $t.Current;
                        this._searchBoxContainerComponents.insert(0, component);
                    }
                } finally {
                    if (H5.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                tss.ICTX.Children$1(tss.S, this._searchBoxContainer, this._searchBoxContainerComponents);
                return this;
            },
            AfterSearchBox: function (afterComponents) {
                if (afterComponents === void 0) { afterComponents = []; }
                this._searchBoxContainerComponents.AddRange(afterComponents);
                tss.ICTX.Children$1(tss.S, this._searchBoxContainer, this._searchBoxContainerComponents);
                return this;
            },
            Render: function () {
                return this._stack.Render();
            },
            AddGroupedItems: function (items, observableList, isGrid) {
                var $t, $t1;
                observableList.clear();

                if (H5.is(items, System.Object)) {
                    items = ($t = T, System.Linq.Enumerable.from(items, $t).toList($t));

                    if (System.Linq.Enumerable.from(items, T).any()) {
                        $t1 = H5.getEnumerator(System.Linq.Enumerable.from(items, T).groupBy(function (item) {
                                return item.tss$ISearchableGroupedItem$Group;
                            }).orderBy(function (g) {
                            return g.key();
                        }, this._groupComparer));
                        try {
                            while ($t1.moveNext()) {
                                var groupedItems = $t1.Current;
                                var header = new (tss.SearchableGroupedList.GroupedItemsHeader(T))(groupedItems.key(), this._groupedItemHeaderGenerator);
                                if (isGrid) {
                                    tss.ICX.GridColumn(tss.SearchableGroupedList.GroupedItemsHeader(T), header, 1, -1);
                                }

                                observableList.add(header);
                                observableList.AddRange(groupedItems.select(function (t) {
                                    return t.tss$ISearchableItem$Render();
                                }));
                            }
                        } finally {
                            if (H5.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }
                    }
                }
            }
        }
    }; });

    H5.define("tss.SearchableGroupedList.GroupedItemsHeader", function (T) { return {
        inherits: [tss.IC],
        $kind: "nested class",
        fields: {
            _component: null
        },
        alias: ["Render", "tss$IC$Render"],
        ctors: {
            ctor: function (group, groupedItemHeaderGenerator) {
                this.$initialize();
                this._component = groupedItemHeaderGenerator(group);
            }
        },
        methods: {
            Render: function () {
                return this._component.tss$IC$Render();
            }
        }
    }; });

    H5.define("tss.SearchableList", function (T) { return {
        inherits: [tss.IC,tss.ISCS],
        fields: {
            _defered: null,
            _searchBoxContainer: null,
            _searchBoxContainerComponents: null,
            _stack: null,
            _searchBox: null,
            _list: null,
            _minimumItemsToShowBox: 0,
            Items: null
        },
        props: {
            StylingContainer: {
                get: function () {
                    return this._stack.InnerElement;
                }
            },
            PropagateToStackItemParent: {
                get: function () {
                    return true;
                }
            }
        },
        alias: [
            "StylingContainer", "tss$ISCS$StylingContainer",
            "PropagateToStackItemParent", "tss$ISCS$PropagateToStackItemParent",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            init: function () {
                this._minimumItemsToShowBox = 0;
            },
            ctor: function (items, columns) {
                if (columns === void 0) { columns = []; }

                tss.SearchableList(T).$ctor1.call(this, new (tss.ObservableList(T)).ctor(items || System.Array.init(0, function (){
                    return H5.getDefaultValue(T);
                }, T)), columns);
            },
            $ctor1: function (items, columns) {
                if (columns === void 0) { columns = []; }

                this.$initialize();
                this.Items = items || new (tss.ObservableList(T)).ctor();
                this._searchBox = tss.ICX.Grow(tss.SearchBox, tss.ICX.Width(tss.SearchBox, new tss.SearchBox().Underlined().SetPlaceholder("Type to search").SearchAsYouType(), tss.usX.px$1(100)));
                this._list = tss.UI.ItemsList(System.Array.init(0, null, tss.IC), columns);
                this._defered = tss.ICX.Grow(tss.IDefer, tss.ICX.WidthStretch(tss.IDefer, tss.UI.Defer$3(System.Collections.Generic.IReadOnlyList$1(T), this.Items, H5.fn.bind(this, function (item) {
                    var $t;
                    var searchTerms = System.String.split((($t = this._searchBox.Text, $t != null ? $t : "")), System.Array.init([32], System.Char).map(function (i) {{ return String.fromCharCode(i); }}), null, 1);
                    var filteredItems = System.Linq.Enumerable.from(this.Items, T).where(function (i) {
                            return searchTerms.length === 0 || System.Linq.Enumerable.from(searchTerms, System.String).all(function (st) {
                                    return i.tss$ISearchableItem$IsMatch(st);
                                });
                        }).select(function (i) {
                        return i.tss$ISearchableItem$Render();
                    }).ToArray(tss.IC);

                    this._list.Items.clear();

                    if (System.Linq.Enumerable.from(filteredItems, tss.IC).any()) {
                        this._list.Items.AddRange(filteredItems);
                    }

                    if (filteredItems.length >= this._minimumItemsToShowBox) {
                        tss.ICX.Show(tss.SearchBox, this._searchBox);
                    } else {
                        tss.ICX.Collapse(tss.SearchBox, this._searchBox);
                    }

                    return tss.tX.AsTask(tss.ICX.Stretch(tss.ItemsList, this._list));
                }))), 1);

                this._searchBox.OnSearch(H5.fn.bind(this, function (_, __) {
                    this._defered.tss$IDefer$Refresh();
                }));
                this._searchBoxContainer = tss.ICTX.Children$6(tss.S, tss.ICX.WidthStretch(tss.S, tss.UI.Stack().Horizontal()), [this._searchBox]).AlignItems("center");
                this._searchBoxContainerComponents = H5.fn.bind(this, function (_o1) {
                        _o1.add(this._searchBox);
                        return _o1;
                    })(new (System.Collections.Generic.List$1(tss.IC)).ctor());
                this._stack = tss.ICX.MaxHeight(tss.S, tss.ICX.WidthStretch(tss.S, tss.ICTX.Children$6(tss.S, tss.UI.Stack(), [this._searchBoxContainer, tss.ScrollBar.Scroll(tss.IDefer, this._defered)])), tss.usX.percent$1(100));
            }
        },
        methods: {
            WithNoResultsMessage: function (emptyListMessageGenerator) {
                this._list.WithEmptyMessage(emptyListMessageGenerator || (function () {
                    throw new System.ArgumentNullException.$ctor1("emptyListMessageGenerator");
                })());
                this._defered.tss$IDefer$Refresh();
                return this;
            },
            SearchBox: function (sb) {
                sb(this._searchBox);
                return this;
            },
            CaptureSearchBox: function (sb) {
                sb.v = this._searchBox;
                return this;
            },
            HideSearchBoxIfLessThan: function (items) {
                this._minimumItemsToShowBox = items;
                return this;
            },
            BeforeSearchBox: function (beforeComponents) {
                var $t;
                if (beforeComponents === void 0) { beforeComponents = []; }
                $t = H5.getEnumerator(System.Linq.Enumerable.from(beforeComponents, tss.IC).reverse());
                try {
                    while ($t.moveNext()) {
                        var component = $t.Current;
                        this._searchBoxContainerComponents.insert(0, component);
                    }
                } finally {
                    if (H5.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                tss.ICTX.Children$1(tss.S, this._searchBoxContainer, this._searchBoxContainerComponents);
                return this;
            },
            AfterSearchBox: function (afterComponents) {
                if (afterComponents === void 0) { afterComponents = []; }
                this._searchBoxContainerComponents.AddRange(afterComponents);
                tss.ICTX.Children$1(tss.S, this._searchBoxContainer, this._searchBoxContainerComponents);
                return this;
            },
            Render: function () {
                return this._stack.Render();
            }
        }
    }; });

    /**
     * Encapsulates a variable of type T, and enables monitoring for changes as well as the ability to update that value (which will trigger a ValueChanged event)
     *
     * @public
     * @class tss.SettableObservableT
     * @augments tss.ReadOnlyObservableT
     * @param   {Function}    [name]    An immutable type to be observed. Be careful with non-imutable types, as you can change them in ways that will not be visible here
     */
    H5.define("tss.SettableObservableT", function (T) { return {
        inherits: [tss.ReadOnlyObservableT(T)],
        props: {
            Value$1: {
                get: function () {
                    return this.Value;
                },
                set: function (value) {
                    this.Value = value;
                }
            }
        },
        ctors: {
            ctor: function (value, comparer) {
                if (value === void 0) { value = H5.getDefaultValue(T); }
                if (comparer === void 0) { comparer = null; }

                this.$initialize();
                tss.ReadOnlyObservableT(T).ctor.call(this, value, comparer);
            }
        },
        methods: {
            Update: function (action) {
                action(this.Value$1);
                this.RaiseOnValueChanged();
            }
        }
    }; });

    H5.define("tss.Sidebar", {
        inherits: [tss.IC],
        statics: {
            fields: {
                SIDEBAR_TRANSITION_TIME: 0
            },
            ctors: {
                init: function () {
                    this.SIDEBAR_TRANSITION_TIME = 300;
                }
            }
        },
        fields: {
            _header: null,
            _middle: null,
            _footer: null,
            _closed: null,
            _closedTimeout: 0,
            _sidebar: null
        },
        props: {
            IsClosed: {
                get: function () {
                    return this._closed.Value$1;
                },
                set: function (value) {
                    this._closed.Value$1 = value;
                }
            }
        },
        alias: ["Render", "tss$IC$Render"],
        ctors: {
            ctor: function () {
                this.$initialize();
                this._header = new (tss.ObservableList(Tesserae.ISidebarItem)).ctor();
                this._middle = new (tss.ObservableList(Tesserae.ISidebarItem)).ctor();
                this._footer = new (tss.ObservableList(Tesserae.ISidebarItem)).ctor();
                this._closed = new (tss.SettableObservableT(System.Boolean))(false);
                this._sidebar = tss.UI.Class(tss.S, tss.UI.VStack(), "tss-sidebar");

                this._closed.Observe(H5.fn.bind(this, function (isClosed) {
                    window.clearTimeout(this._closedTimeout);

                    this._closedTimeout = window.setTimeout(H5.fn.bind(this, function (_) {
                        if (isClosed) {
                            tss.UI.Class(tss.S, this._sidebar, "tss-sidebar-closed");
                        } else {
                            tss.UI.RemoveClass(tss.S, this._sidebar, "tss-sidebar-closed");
                        }
                    }), 15);
                }));

                var combined = new (tss.CombinedObservableT4(System.Collections.Generic.IReadOnlyList$1(Tesserae.ISidebarItem),System.Collections.Generic.IReadOnlyList$1(Tesserae.ISidebarItem),System.Collections.Generic.IReadOnlyList$1(Tesserae.ISidebarItem),System.Boolean))(this._header, this._middle, this._footer, this._closed);

                combined.ObserveFutureChanges(H5.fn.bind(this, function (content) {
                    this.RenderSidebar(content.Item1, content.Item2, content.Item3, content.Item4);
                }));
            }
        },
        methods: {
            RenderSidebar: function (header, middle, footer, closed) {
                tss.ICTX.Children$6(tss.S, this._sidebar, [tss.ICTX.Children$1(tss.S, tss.ICX.NoShrink(tss.S, tss.ICX.WS(tss.S, tss.UI.Class(tss.S, tss.UI.VStack(), "tss-sidebar-header"))), System.Linq.Enumerable.from(header, Tesserae.ISidebarItem).select(function (si) {
                        return closed ? si.Tesserae$ISidebarItem$RenderClosed() : si.Tesserae$ISidebarItem$RenderOpen();
                    })), tss.ICTX.Children$1(tss.S, tss.ScrollBar.ScrollY(tss.S, tss.ICX.Grow(tss.S, tss.ICX.H(tss.S, tss.ICX.WS(tss.S, tss.UI.Class(tss.S, tss.UI.VStack(), "tss-sidebar-middle")), 10))), System.Linq.Enumerable.from(middle, Tesserae.ISidebarItem).select(function (si) {
                        return closed ? si.Tesserae$ISidebarItem$RenderClosed() : si.Tesserae$ISidebarItem$RenderOpen();
                    })), tss.ICTX.Children$1(tss.S, tss.ICX.NoShrink(tss.S, tss.ICX.WS(tss.S, tss.UI.Class(tss.S, tss.UI.VStack(), "tss-sidebar-footer"))), System.Linq.Enumerable.from(footer, Tesserae.ISidebarItem).select(function (si) {
                        return closed ? si.Tesserae$ISidebarItem$RenderClosed() : si.Tesserae$ISidebarItem$RenderOpen();
                    }))]);
            },
            Closed: function (isClosed) {
                if (isClosed === void 0) { isClosed = true; }
                this._closed.Value$1 = isClosed;
                return this;
            },
            Toggle: function () {
                this._closed.Value$1 = !this._closed.Value$1;
                return this;
            },
            AddHeader: function (item) {
                this._header.add(item);
                return this;
            },
            AddContent: function (item) {
                this._middle.add(item);
                return this;
            },
            AddFooter: function (item) {
                this._footer.add(item);
                return this;
            },
            Clear: function () {
                this.ClearHeader();
                this.ClearContent();
                this.ClearFooter();
            },
            ClearHeader: function () {
                this._header.clear();
            },
            ClearContent: function () {
                this._middle.clear();
            },
            ClearFooter: function () {
                this._footer.clear();
            },
            Render: function () {
                return this._sidebar.Render();
            }
        }
    });

    H5.define("Tesserae.SidebarCommand", {
        inherits: [tss.IC],
        fields: {
            _button: null,
            _tooltip: null,
            _menuGenerator: null,
            _badge: false
        },
        props: {
            IsBadge: {
                get: function () {
                    return this._badge;
                }
            }
        },
        alias: ["Render", "tss$IC$Render"],
        ctors: {
            $ctor4: function (icon, weight) {
                if (weight === void 0) { weight = "lal"; }

                Tesserae.SidebarCommand.ctor.call(this, System.String.format("{0} {1}", H5.box(weight, tss.LineAwesomeWeight, System.Enum.toStringFn(tss.LineAwesomeWeight)), H5.box(icon, Tesserae.LineAwesome, System.Enum.toStringFn(Tesserae.LineAwesome))));
            },
            $ctor2: function (icon) {
                Tesserae.SidebarCommand.ctor.call(this, System.String.format("ec {0}", [H5.box(icon, Tesserae.Emoji, System.Enum.toStringFn(Tesserae.Emoji))]));
            },
            $ctor1: function (badge, background, foreground) {
                this.$initialize();
                this._badge = true;
                this._button = tss.ISX.Background(tss.Button, tss.ISX.Foreground(tss.Button, tss.UI.Class(tss.Button, tss.UI.Button$1().SetText(badge), "tss-sidebar-command"), foreground), background);
                if (System.String.isNullOrEmpty(badge)) {
                    tss.ICX.Collapse(tss.Button, this._button);
                }
            },
            $ctor3: function (image) {
                this.$initialize();
                this._button = tss.UI.Class(tss.Button, tss.UI.Button$1().ReplaceContent(image), "tss-sidebar-command");
            },
            ctor: function (icon) {
                this.$initialize();
                this._button = tss.UI.Class(tss.Button, tss.UI.Button$1().SetIcon(icon), "tss-sidebar-command");
            }
        },
        methods: {
            Foreground: function (color) {
                tss.ISX.Foreground(tss.Button, this._button, color);
                return this;
            },
            Background: function (color) {
                tss.ISX.Background(tss.Button, this._button, color);
                return this;
            },
            Default: function () {
                this._button.IsPrimary = false;
                return this;
            },
            Primary: function () {
                this._button.IsPrimary = true;
                return this;
            },
            Success: function () {
                this._button.IsSuccess = true;
                return this;
            },
            Danger: function () {
                this._button.IsDanger = true;
                return this;
            },
            Tooltip$1: function (text) {
                this._tooltip = function (b) {
                    tss.ICX.Tooltip$1(tss.Button, b, text, "none", "top", 0, 0, false, 350, false);
                };
                this.RefreshTooltip();
                return this;
            },
            Tooltip$2: function (tooltip) {
                this._tooltip = function (b) {
                    tss.ICX.Tooltip(tss.Button, b, tooltip, false, "none", "top", 0, 0, true, false, 350, true, false);
                };
                this.RefreshTooltip();
                return this;
            },
            Tooltip: function (tooltip) {
                this._tooltip = function (b) {
                    tss.ICX.Tooltip(tss.Button, b, tooltip(), false, "none", "top", 0, 0, true, false, 350, true, false);
                };
                this.RefreshTooltip();
                return this;
            },
            OnClickMenu: function (generator) {
                this._menuGenerator = generator;
                this._button.OnClick$1(H5.fn.bind(this, function () {
                    this.ShowMenu();
                }));
                return this;
            },
            ShowMenu: function () {
                var $t;
                if (H5.staticEquals(this._menuGenerator, null)) {
                    throw new System.NullReferenceException.$ctor1("Need to configure the menu first");
                }

                var items = this._menuGenerator();

                var menuDiv = tss.UI.Div$2(tss.UI._$1("tss-sidebar-menu"));

                $t = H5.getEnumerator(items);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        var sbc;
                        if (((sbc = H5.as(item, Tesserae.SidebarCommands))) != null) {
                            menuDiv.appendChild(sbc.RenderOpenFull().tss$IC$Render());
                        } else {
                            menuDiv.appendChild(item.Tesserae$ISidebarItem$RenderOpen().tss$IC$Render());
                        }
                    }
                } finally {
                    if (H5.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                tss.domObs.WhenMounted(menuDiv, H5.fn.bind(this, function () {
                    this._button.Render().parentElement.classList.add("tss-sidebar-command-menu-is-open");

                    tss.domObs.WhenRemoved(menuDiv, H5.fn.bind(this, function () {
                        this._button.Render().parentElement.classList.remove("tss-sidebar-command-menu-is-open");
                        this.RefreshTooltip();
                    }));
                }));
                var hide = { };

                tss.tippy.ShowFor(this._button.Render(), menuDiv, hide, "none", "bottom-start", 0, 1000, 500, false, "tss-sidebar-tippy");

            },
            OnClick: function (action) {
                this._button.OnClick$1(action);
                return this;
            },
            OnClick$1: function (action) {
                this._button.OnClick(function (b, e) {
                    action(b, e);
                });
                return this;
            },
            OnContextMenu: function (action) {
                this._button.OnContextMenu$1(action);
                return this;
            },
            OnContextMenu$1: function (action) {
                this._button.OnContextMenu(function (b, e) {
                    action(b, e);
                });
                return this;
            },
            SetIcon: function (icon, color) {
                if (color === void 0) { color = ""; }
                this._button.SetIcon(icon, color);
                return this;
            },
            SetIcon$2: function (icon, color, weight) {
                if (color === void 0) { color = ""; }
                if (weight === void 0) { weight = "lal"; }
                this._button.SetIcon$2(icon, color, "tss-fontsize-medium", weight, false);
                return this;
            },
            SetIcon$1: function (icon) {
                this._button.SetIcon$1(icon);
                return this;
            },
            SetBadge: function (badge) {
                if (!this._badge) {
                    throw new System.Exception("Only supported for badges");
                }

                this._button.SetText(badge);

                if (System.String.isNullOrEmpty(badge)) {
                    tss.ICX.Collapse(tss.Button, this._button);
                } else {
                    tss.ICX.Show(tss.Button, this._button);
                }

                return this;
            },
            RefreshTooltip: function () {
                !H5.staticEquals(this._tooltip, null) ? this._tooltip(this._button) : null;
            },
            Render: function () {
                return this._button.Render();
            }
        }
    });

    H5.define("tss.SplitView", {
        inherits: [tss.IC],
        fields: {
            _splitContainer: null,
            _splitterSize: null,
            _leftComponent: null,
            _splitterComponent: null,
            _rightComponent: null,
            _resizable: false,
            _onResizeEnd: null
        },
        alias: ["Render", "tss$IC$Render"],
        ctors: {
            ctor: function (splitterSize) {
                if (splitterSize === void 0) { splitterSize = null; }

                this.$initialize();
                this._splitterSize = (H5.is(splitterSize, System.Object) && splitterSize.Unit !== "auto" && splitterSize.Unit !== "inherit") ? splitterSize.toString() : "8px";
                this._leftComponent = tss.UI.Raw$2(tss.UI.Div$2(tss.UI._()));
                var splitter = tss.UI.Div$2(tss.UI._$1("tss-splitter tss-no-splitter"));
                splitter.draggable = false;
                this._splitterComponent = tss.UI.Raw$2(splitter);
                this._rightComponent = tss.UI.Raw$2(tss.UI.Div$2(tss.UI._()));
                this._splitterComponent.Width = this._splitterSize;
                this._leftComponent.Height = "100%";
                this._splitterComponent.Height = "100%";
                this._rightComponent.Height = "100%";

                this._leftComponent.Width = "10px";
                this._rightComponent.Width = "10px";

                this._leftComponent.FlexGrow = "1";
                this._rightComponent.FlexGrow = "1";

                this._splitContainer = tss.UI.Div$2(tss.UI._$1("tss-splitview"), [this._leftComponent.Render(), this._splitterComponent.Render(), this._rightComponent.Render()]);
            }
        },
        methods: {
            Resizable: function (onResizeEnd) {
                if (onResizeEnd === void 0) { onResizeEnd = null; }
                this._resizable = true;
                this._onResizeEnd = onResizeEnd;
                tss.UI.RemoveClass(tss.Raw, this._splitterComponent, "tss-no-splitter");
                this._splitterComponent.Width = this._splitterSize;
                this.HookDragEvents(this._splitterComponent);
                return this;
            },
            HookDragEvents: function (dragArea) {
                var StopResize = null;
                var Resize = null;
                var el = dragArea.tss$IC$Render();

                var width = 0;
                var rect;
                var current;
                Resize = function (me) {
                    width = Math.min(rect.width - 16, Math.max(16, (me.clientX - rect.left)));
                    current.style.width = System.Double.format(width) + "px";
                    current.style.flexGrow = "0";
                    current.style.flexShrink = "1";
                };
                StopResize = H5.fn.bind(this, function (me) {
                    window.onmousemove = H5.fn.remove(window.onmousemove, Resize);
                    window.onmouseup = H5.fn.remove(window.onmouseup, StopResize);
                    !H5.staticEquals(this._onResizeEnd, null) ? this._onResizeEnd(H5.Int.clip32(width)) : null;
                    rect = null;
                });

                el.onmousedown = H5.fn.combine(el.onmousedown, H5.fn.bind(this, function (me) {
                    if (this._splitContainer.classList.contains("tss-split-right")) {
                        current = this._rightComponent.Render();
                    } else {
                        current = this._leftComponent.Render();
                    }
                    rect = this._splitContainer.getBoundingClientRect();
                    window.onmousemove = H5.fn.combine(window.onmousemove, Resize);
                    window.onmouseup = H5.fn.combine(window.onmouseup, StopResize);
                }));




            },
            Left: function (component, background) {
                if (background === void 0) { background = ""; }
                this._leftComponent.Content$1(component);
                if (!System.String.isNullOrEmpty(background)) {
                    this._leftComponent.Background = background;
                }

                return this;
            },
            Right: function (component, background) {
                if (background === void 0) { background = ""; }
                this._rightComponent.Content$1(component);
                if (!System.String.isNullOrEmpty(background)) {
                    this._rightComponent.Background = background;
                }

                return this;
            },
            PanelStyle: function () {
                this._splitContainer.classList.add("tss-splitview-panel-style");
                return this;
            },
            NoSplitter: function () {
                tss.UI.Class(tss.Raw, this._splitterComponent, "tss-no-splitter");
                this._splitterComponent.Width = "";
                return this;
            },
            SplitInMiddle: function () {
                this._rightComponent.MaxWidth = "";
                this._leftComponent.MaxWidth = "";
                this._splitContainer.classList.remove("tss-split-left");
                this._splitContainer.classList.remove("tss-split-right");
                return this;
            },
            Close: function () {
                if (this._splitContainer.classList.contains("tss-split-left")) {
                    tss.ICX.Collapse(tss.Raw, this._leftComponent);
                } else if (this._splitContainer.classList.contains("tss-split-right")) {
                    tss.ICX.Collapse(tss.Raw, this._rightComponent);
                } else {
                    throw new System.Exception("Only valid for left or right splits");
                }

                return this;
            },
            Open: function () {
                if (this._splitContainer.classList.contains("tss-split-left")) {
                    tss.ICX.Show(tss.Raw, this._leftComponent);
                } else if (this._splitContainer.classList.contains("tss-split-right")) {
                    tss.ICX.Show(tss.Raw, this._rightComponent);
                } else {
                    throw new System.Exception("Only valid for left or right splits");
                }

                return this;
            },
            LeftIsSmaller: function (leftSize, maxLeftSize) {
                var $t;
                if (maxLeftSize === void 0) { maxLeftSize = null; }
                this._leftComponent.Width = leftSize.toString();
                this._leftComponent.MaxWidth = ($t = (maxLeftSize != null ? maxLeftSize.toString() : null), $t != null ? $t : "");
                this._leftComponent.FlexGrow = "";
                this._leftComponent.FlexShrink = "";

                this._rightComponent.Width = "10px";
                this._rightComponent.MaxWidth = "";
                this._rightComponent.FlexGrow = "1";
                this._rightComponent.FlexShrink = "";
                this._splitContainer.classList.add("tss-split-left");
                this._splitContainer.classList.remove("tss-split-right");

                return this;
            },
            RightIsSmaller: function (rightSize, maxRightSize) {
                var $t;
                if (maxRightSize === void 0) { maxRightSize = null; }
                this._rightComponent.Width = rightSize.toString();
                this._rightComponent.MaxWidth = ($t = (maxRightSize != null ? maxRightSize.toString() : null), $t != null ? $t : "");
                this._rightComponent.FlexGrow = "";
                this._rightComponent.FlexShrink = "";

                this._leftComponent.Width = "10px";
                this._leftComponent.MaxWidth = "";
                this._leftComponent.FlexGrow = "1";
                this._leftComponent.FlexShrink = "";
                this._splitContainer.classList.add("tss-split-right");
                this._splitContainer.classList.remove("tss-split-left");
                return this;
            },
            Render: function () {
                return this._splitContainer;
            }
        }
    });

    H5.define("tss.StepsSlider", function (T) { return {
        inherits: [tss.IC],
        fields: {
            _steps: null,
            _slider: null,
            _equalityComparer: null
        },
        props: {
            Value: {
                get: function () {
                    return this._steps[System.Array.index(this._slider.Value, this._steps)];
                },
                set: function (value) {
                    this._slider.Value = System.Array.findIndex(this._steps, H5.fn.bind(this, function (p) {
                            return this._equalityComparer[H5.geti(this._equalityComparer, "System$Collections$Generic$IEqualityComparer$1$" + H5.getTypeAlias(T) + "$equals2", "System$Collections$Generic$IEqualityComparer$1$equals2")](p, this.Value);
                        }));
                }
            },
            IsEnabled: {
                get: function () {
                    return this._slider.IsEnabled;
                },
                set: function (value) {
                    this._slider.IsEnabled = value;
                }
            },
            Orientation: {
                get: function () {
                    return this._slider.Orientation;
                },
                set: function (value) {
                    this._slider.Orientation = value;
                }
            }
        },
        alias: ["Render", "tss$IC$Render"],
        ctors: {
            ctor: function (steps) {
                if (steps === void 0) { steps = []; }

                this.$initialize();
                this._steps = steps;
                this._slider = tss.UI.Slider(0, 0, ((this._steps.length - 1) | 0), 1);
                this._equalityComparer = System.Collections.Generic.EqualityComparer$1(T).def;
            }
        },
        methods: {
            Comparer: function (equalityComparer) {
                this._equalityComparer = equalityComparer;
                return this;
            },
            SetValue: function (val) {
                this.Value = val;
                return this;
            },
            OnChange: function (onChange) {
                this._slider.OnChange(H5.fn.bind(this, function (s, e) {
                    !H5.staticEquals(onChange, null) ? onChange(this.Value) : null;
                }));

                this._slider.OnInput(H5.fn.bind(this, function (s, e) {
                    !H5.staticEquals(onChange, null) ? onChange(this.Value) : null;
                }));
                return this;
            },
            Disabled: function (value) {
                if (value === void 0) { value = true; }
                this.IsEnabled = !value;
                return this;
            },
            Horizontal: function () {
                this.Orientation = tss.Slider.SliderOrientation.Horizontal;
                return this;
            },
            Vertical: function () {
                this.Orientation = tss.Slider.SliderOrientation.Vertical;
                return this;
            },
            Render: function () {
                return this._slider.Render();
            }
        }
    }; });

    H5.define("tss.ToggleButton", {
        inherits: [tss.IC],
        fields: {
            _button: null
        },
        events: {
            Changed: null
        },
        props: {
            IsChecked: {
                get: function () {
                    return !this._button.Render().classList.contains("tss-toggle-btn-unchecked");
                },
                set: function (value) {
                    var current = this.IsChecked;

                    if (value) {
                        this._button.Render().classList.remove("tss-toggle-btn-unchecked");
                    } else {
                        this._button.Render().classList.add("tss-toggle-btn-unchecked");
                    }
                }
            },
            IsEnabled: {
                get: function () {
                    return this._button.IsEnabled;
                },
                set: function (value) {
                    this._button.IsEnabled = value;
                }
            }
        },
        alias: ["Render", "tss$IC$Render"],
        ctors: {
            ctor: function (button) {
                this.$initialize();
                this._button = button;
                this._button.OnClick$1(H5.fn.bind(this, function () {
                    this.IsChecked = !this.IsChecked;
                    !H5.staticEquals(this.Changed, null) ? this.Changed(this, null) : null;
                }));

                this.IsChecked = false;
            }
        },
        methods: {
            OnChange: function (onChange) {
                this.addChanged(onChange);
                return this;
            },
            Render: function () {
                return H5.cast(this._button, tss.IC).tss$IC$Render();
            },
            Disabled: function (value) {
                if (value === void 0) { value = true; }
                this.IsEnabled = !value;
                return this;
            },
            Checked: function (value) {
                if (value === void 0) { value = true; }
                this.IsChecked = value;
                return this;
            }
        }
    });

    H5.define("tss.TutorialModal", {
        inherits: [tss.IC,tss.ISCS],
        fields: {
            _modal: null,
            _footerCommands: null,
            _content: null,
            _title: null,
            _helpText: null,
            _illustration: null,
            _leftStack: null,
            _rightStack: null
        },
        props: {
            StylingContainer: {
                get: function () {
                    return this._modal.StylingContainer;
                }
            },
            PropagateToStackItemParent: {
                get: function () {
                    return this._modal.PropagateToStackItemParent;
                }
            }
        },
        alias: [
            "StylingContainer", "tss$ISCS$StylingContainer",
            "PropagateToStackItemParent", "tss$ISCS$PropagateToStackItemParent",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            ctor: function (title, helpText, imageSrc) {
                if (imageSrc === void 0) { imageSrc = null; }

                this.$initialize();
                this._footerCommands = tss.ICX.WS(tss.S, tss.ICX.Padding(tss.S, tss.UI.HStack(), tss.usX.px$1(10))).AlignItems("flex-end");
                this._content = tss.ISX.Padding(tss.S, tss.UI.VStack(), "38px 32px 0px 32px");
                this._title = tss.ICX.PaddingBottom(tss.txt, tss.ICX.PaddingTop(tss.txt, tss.ITFX.Bold(tss.txt, tss.ITFX.Large(tss.txt, tss.UI.TextBlock(title))), tss.usX.px$1(10)), tss.usX.px$1(20));
                this._helpText = tss.ISX.Padding(tss.txt, tss.UI.TextBlock(helpText), "20px 30px 0 0");
                this._illustration = tss.ICX.H(tss.Raw, tss.ICX.W(tss.Raw, tss.UI.Raw$1(), 196), 196);

                if (!System.String.isNullOrWhiteSpace(imageSrc)) {
                    this.SetImageSrc(imageSrc, tss.usX.px$1(16));
                }

                this._leftStack = tss.ICTX.Children$6(tss.S, tss.ISX.Background(tss.S, tss.ISX.Padding(tss.S, tss.ICX.Width(tss.S, tss.UI.Class(tss.S, tss.UI.VStack().OverflowHidden(), "tss-tutorial-modal-explanation").RemovePropagation(), tss.usX.px$1(300)), "40px 32px 32px 32px"), tss.UI.Theme.Secondary.Background), [tss.ICTX.Children$6(tss.S, tss.ICX.S(tss.S, tss.UI.VStack()).JustifyContent("space-between"), [this._title, this._helpText, tss.ICX.Grow(tss.Raw, tss.ICX.H$1(tss.Raw, tss.UI.Raw$1(), tss.usX.px$1(48))), this._illustration])]);

                this._rightStack = tss.ICTX.Children$6(tss.S, tss.ICX.Grow(tss.S, tss.ICX.W$1(tss.S, tss.ICX.HS(tss.S, tss.UI.Class(tss.S, tss.UI.VStack(), "tss-tutorial-modal-content").OverflowHidden()), tss.usX.px$1(10))).JustifyContent("flex-end"), [tss.ICX.Grow(tss.S, tss.ICX.H$1(tss.S, this._content, tss.usX.px$1(10))), this._footerCommands]);

                this._modal = tss.LayerExtensions.Content(tss.Modal, tss.UI.Modal$1().NoContentPadding().LightDismiss().Dark(), tss.ICTX.Children$6(tss.S, tss.ICX.S(tss.S, tss.UI.HStack()), [this._leftStack, this._rightStack]));

                this.Height(tss.usX.px$1(500));
                this.Width(tss.usX.px$1(800));
            }
        },
        methods: {
            SetFooterCommands: function (commands) {
                if (commands === void 0) { commands = []; }
                this._footerCommands.Clear();
                tss.ICTX.Children$6(tss.S, this._footerCommands, commands);
                return this;
            },
            SetContent: function (content) {
                this._content.Clear();
                tss.ICTX.Children$6(tss.S, this._content, [content]);
                return this;
            },
            Height: function (height) {
                tss.ICX.Height(tss.S, this._leftStack, height);
                tss.ICX.Height(tss.S, this._rightStack, height);
                return this;
            },
            H: function (height) {
                return this.Height(height);
            },
            Width: function (width) {
                tss.ICX.Width(tss.Modal, this._modal, width);
                return this;
            },
            W: function (width) {
                return this.Width(width);
            },
            SetTitle: function (title) {
                this._title.Text = title;
                return this;
            },
            SetHelpText: function (helpText, treatAsHTML) {
                if (treatAsHTML === void 0) { treatAsHTML = false; }
                if (treatAsHTML) {
                    this._helpText.Text = null;
                    this._helpText.HTML = helpText;
                } else {
                    this._helpText.HTML = null;
                    this._helpText.Text = helpText;
                }
                return this;
            },
            SetImageSrc: function (imageSrc, padding) {
                this._illustration.Content$1(tss.ICX.MaxHeight(tss.Image, tss.ICX.MaxWidth(tss.Image, tss.UI.Image$1(imageSrc).Contain(), tss.usX.percent$1(100)), tss.usX.percent$1(100)));
                tss.ICX.Padding(tss.Raw, this._illustration, padding);
                return this;
            },
            SetImage: function (image, padding) {
                this._illustration.Content$1(image);
                tss.ICX.Padding(tss.Raw, this._illustration, padding);
                return this;
            },
            LightDismiss: function () {
                this._modal.LightDismiss();
                return this;
            },
            NoLightDismiss: function () {
                this._modal.NoLightDismiss();
                return this;
            },
            ContentPadding: function (padding) {
                tss.ISX.Padding(tss.S, this._content, padding);
                return this;
            },
            ShowEmbedded: function () {
                return tss.UI.Raw$3(this._modal);
            },
            Border: function (color, size) {
                if (size === void 0) { size = null; }
                size = size || tss.usX.px$1(1);
                this._modal.StylingContainer.style.borderColor = color;
                this._modal.StylingContainer.style.borderWidth = size.toString();
                this._modal.StylingContainer.style.borderStyle = "solid";
                return this;
            },
            Show: function () {
                this._modal.Show();
                return this;
            },
            OnHide: function (onHide) {
                this._modal.OnHide(onHide);
                return this;
            },
            OnShow: function (onShow) {
                this._modal.OnShow(onShow);
                return this;
            },
            Hide: function (onHidden) {
                if (onHidden === void 0) { onHidden = null; }
                this._modal.Hide(onHidden);
            },
            Render: function () {
                return this._modal.Render();
            }
        }
    });

    H5.define("tss.VirtualizedList", {
        inherits: [tss.IC],
        statics: {
            fields: {
                PagesToVirtualize: 0,
                InitialPagesToCreate: 0
            },
            ctors: {
                init: function () {
                    this.PagesToVirtualize = 5;
                    this.InitialPagesToCreate = 5;
                }
            },
            methods: {
                GetComponentSize: function (itemsCount) {
                    return tss.usX.percent$1((((H5.Int.div(100, itemsCount)) | 0))).toString();
                },
                CreateInnerElementHtmlDivElement: function () {
                    return tss.UI.Div$2(tss.UI._());
                },
                CreateSpacingHtmlDivElement: function (className) {
                    return tss.UI.Div$2(tss.UI._$1(className));
                },
                SetHtmlElementHeight: function (htmlElement, height) {
                    tss.UI.SetStyle(HTMLElement, htmlElement, function (cssStyleDeclaration) {
                        cssStyleDeclaration.height = height.toString();
                    });
                },
                CreatePage: function (page, renderingAction) {
                    renderingAction(page);
                }
            }
        },
        fields: {
            _listPageCache: null,
            _pagesToVirtualizeUpperBoundary: 0,
            _pagesToVirtualizeLowerBoundary: 0,
            _componentHeightInPercentage: null,
            _componentWidthInPercentage: null,
            _innerElement: null,
            _basicListContainer: null,
            _topSpacingDiv: null,
            _bottomSpacingDiv: null,
            _initialPagesCreated: false,
            _emptyListMessageGenerator: null,
            _currentPage: 0,
            _componentHeight: null,
            _pageHeight: null,
            _currentScrollPosition: 0
        },
        alias: ["Render", "tss$IC$Render"],
        ctors: {
            ctor: function (rowsPerPage, columnsPerRow) {
                if (rowsPerPage === void 0) { rowsPerPage = 4; }
                if (columnsPerRow === void 0) { columnsPerRow = 4; }

                this.$initialize();
                if (rowsPerPage <= 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("rowsPerPage");
                }

                if (columnsPerRow <= 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("columnsPerRow");
                }

                this._listPageCache = new (tss.ListPageCache(tss.IC))(rowsPerPage, columnsPerRow, H5.fn.cacheBind(this, this.CreatePageHtmlElement), H5.fn.cacheBind(this, this.CreateComponentContainerHtmlElement));

                this._pagesToVirtualizeUpperBoundary = H5.Int.clip32(Math.floor(2.5));
                this._pagesToVirtualizeLowerBoundary = H5.Int.clip32(Math.ceil(2.5));

                this._componentHeightInPercentage = tss.VirtualizedList.GetComponentSize(rowsPerPage);
                this._componentWidthInPercentage = tss.VirtualizedList.GetComponentSize(columnsPerRow);

                this._innerElement = tss.VirtualizedList.CreateInnerElementHtmlDivElement();
                this._basicListContainer = this.CreateBasicListContainerHtmlDivElement();
                this._topSpacingDiv = this.CreateTopSpacingHtmlDivElement();
                this._bottomSpacingDiv = this.CreateBottomSpacingHtmlDivElement();

                this._innerElement.appendChild(this._basicListContainer);
                this.AppendChildrenToBasicListContainerHtmlDivElement([this._topSpacingDiv, this._bottomSpacingDiv]);
            }
        },
        methods: {
            WithEmptyMessage: function (emptyListMessageGenerator) {
                this._emptyListMessageGenerator = emptyListMessageGenerator || (function () {
                    throw new System.ArgumentNullException.$ctor1("emptyListMessageGenerator");
                })();

                return this;
            },
            WithListItems: function (listItems) {
                if (listItems == null) {
                    throw new System.ArgumentNullException.$ctor1("listItems");
                }

                this._listPageCache.AddComponents(listItems);

                if (this._listPageCache.HasComponents && !this._initialPagesCreated) {
                    this.CreatePagesDownwards(this.GetInitialPages());

                    this.AttachOnLastComponentMountedEvent();
                    this.AttachBasicListContainerOnScrollEvent();

                    this._initialPagesCreated = true;
                } else if (!H5.staticEquals(this._emptyListMessageGenerator, null)) {
                    this._basicListContainer.appendChild(this._emptyListMessageGenerator().tss$IC$Render());
                }

                return this;
            },
            Render: function () {
                return this._innerElement;
            },
            CreateBasicListContainerHtmlDivElement: function () {
                return tss.UI.Div$2(tss.UI._$1("tss-basiclist").WithRole("list"));
            },
            AppendChildrenToBasicListContainerHtmlDivElement: function (htmlElements) {
                if (htmlElements === void 0) { htmlElements = []; }
                tss.UI.AppendChildren(this._basicListContainer, htmlElements);
            },
            CreateTopSpacingHtmlDivElement: function () {
                return tss.VirtualizedList.CreateSpacingHtmlDivElement("tss-basiclist-top-spacing");
            },
            CreateBottomSpacingHtmlDivElement: function () {
                return tss.VirtualizedList.CreateSpacingHtmlDivElement("tss-basiclist-bottom-spacing");
            },
            SetBasicListContainerHeight: function () {
                tss.VirtualizedList.SetHtmlElementHeight(this._basicListContainer, this._pageHeight);
            },
            SetTopSpacingDivHeight: function (height) {
                tss.VirtualizedList.SetHtmlElementHeight(this._topSpacingDiv, height);
            },
            SetBottomSpacingDivHeight: function (height) {
                tss.VirtualizedList.SetHtmlElementHeight(this._bottomSpacingDiv, height);
            },
            GetInitialPages: function () {
                return this.RetrievePagesFromCache(System.Linq.Enumerable.range(1, tss.VirtualizedList.InitialPagesToCreate));
            },
            RetrievePagesFromCache: function (rangeOfPageNumbersToRetrieve) {
                return this._listPageCache.RetrievePagesFromCache(rangeOfPageNumbersToRetrieve);
            },
            RetrievePageFromCache: function (pageNumberToRetrieve) {
                return this._listPageCache.RetrievePageFromCache(pageNumberToRetrieve);
            },
            CreatePageHtmlElement: function (pageNumber) {
                return tss.UI.Div$2(tss.UI._$1("tss-basiclist-page").WithRole("presentation").WithData("tss-basiclist-pagenumber", H5.toString(pageNumber)));
            },
            CreateComponentContainerHtmlElement: function (componentAndKey) {
                var key = { };
                var component = { };
                H5.Deconstruct(componentAndKey.$clone(), key, component);

                return tss.UI.Div(tss.UI._$2("tss-basiclist-item", void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, H5.fn.bind(this, function (cssStyleDeclaration) {
                    cssStyleDeclaration.height = this._componentHeightInPercentage;
                    cssStyleDeclaration.width = this._componentWidthInPercentage;
                })).WithRole("listitems").WithData("tss-basiclist-componentnumber", H5.toString(key.v)), component.v.tss$IC$Render());
            },
            CreatePageUpwards: function (page) {
                tss.VirtualizedList.CreatePage(page, H5.fn.bind(this, function (pageToCreate) {
                    this._topSpacingDiv.insertAdjacentElement("afterend", pageToCreate);
                }));
            },
            CreatePagesDownwards: function (pages) {
                var $t;
                $t = H5.getEnumerator(pages, HTMLElement);
                try {
                    while ($t.moveNext()) {
                        var page = $t.Current;
                        this.CreatePageDownwards(page);
                    }
                } finally {
                    if (H5.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            CreatePageDownwards: function (page) {
                tss.VirtualizedList.CreatePage(page, H5.fn.bind(this, function (pageToCreate) {
                    this._basicListContainer.insertBefore(page, this._bottomSpacingDiv);
                }));
            },
            GetRenderedPages: function () {
                return this._basicListContainer.getElementsByClassName("tss-basiclist-page");
            },
            RemoveFirstPageFromBasicListContainer: function () {
                this.RemovePageFromBasicListContainer(this.GetRenderedPages(), 0);
            },
            RemoveLastPageFromBasicListContainer: function () {
                var pages = this.GetRenderedPages();

                this.RemovePageFromBasicListContainer(pages, ((H5.Int.clip32(pages.length) - 1) | 0));
            },
            RemovePageFromBasicListContainer: function (pages, index) {
                this._basicListContainer.removeChild(pages[index]);
            },
            AttachOnLastComponentMountedEvent: function () {
                var lastComponentMounted = this._basicListContainer.lastElementChild.previousElementSibling.lastChild;

                tss.domObs.WhenMounted(lastComponentMounted, H5.fn.bind(this, function () {
                    this.OnLastComponentMounted(lastComponentMounted.clientHeight);
                }));
            },
            AttachBasicListContainerOnScrollEvent: function () {
                this._basicListContainer.addEventListener("scroll", H5.fn.cacheBind(this, this.OnBasicListContainerScroll));
            },
            OnLastComponentMounted: function (lastComponentMountedClientHeight) {
                if (lastComponentMountedClientHeight <= 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("lastComponentMountedClientHeight");
                }

                this._componentHeight = tss.usX.px$1(lastComponentMountedClientHeight);
                this._pageHeight = tss.usX.px$2((this._componentHeight.Size * this._listPageCache.RowsPerPage));

                this.SetBasicListContainerHeight();
                this.SetTopSpacingDivHeight(tss.usX.px$1(0));

                var initialBottomSpacingDivHeight = tss.usX.px$2(((((this._listPageCache.PagesCount - tss.VirtualizedList.InitialPagesToCreate) | 0)) * this._pageHeight.Size));

                this.SetBottomSpacingDivHeight(initialBottomSpacingDivHeight);
            },
            OnBasicListContainerScroll: function (listener) {
                var scrollTop = this._basicListContainer.scrollTop;
                var scrollDirection = this.GetScrollDirection(scrollTop);

                if (scrollDirection === tss.VirtualizedList.ScrollDirection.Neutral) {
                    console.log("Scroll neutral");
                }

                var scrollPosition = scrollTop;

                var newPage = H5.Int.clip32(H5.Math.round(scrollPosition / this._pageHeight.Size, 0, 4));

                if ((newPage !== this._currentPage) && newPage > this._pagesToVirtualizeLowerBoundary) {
                    if (scrollDirection === tss.VirtualizedList.ScrollDirection.Down) {
                        console.log(System.String.format("Scroll down - new page: {0}", [H5.box(newPage, System.Int32)]));

                        this.RemoveFirstPageFromBasicListContainer();

                        var newTopSpacingDivHeight = tss.usX.px$2(((((newPage - this._pagesToVirtualizeLowerBoundary) | 0)) * this._pageHeight.Size));
                        this.SetTopSpacingDivHeight(newTopSpacingDivHeight);

                        var pageNumberToAdd = (newPage + this._pagesToVirtualizeUpperBoundary) | 0;
                        this.CreatePageDownwards(this.RetrievePageFromCache(pageNumberToAdd));

                        var newBottomSpacingDivHeight = tss.usX.px$2(((((this._listPageCache.PagesCount - (((newPage + this._pagesToVirtualizeUpperBoundary) | 0))) | 0)) * this._pageHeight.Size));

                        this.SetBottomSpacingDivHeight(newBottomSpacingDivHeight);
                    } else if (scrollDirection === tss.VirtualizedList.ScrollDirection.Up) {
                        console.log(System.String.format("Scroll up - new page: {0}", [H5.box(newPage, System.Int32)]));

                        this.RemoveLastPageFromBasicListContainer();

                        var newTopSpacingDivHeight1 = tss.usX.px$2(((((newPage - (((this._pagesToVirtualizeUpperBoundary - 1) | 0))) | 0)) * this._pageHeight.Size));
                        this.SetTopSpacingDivHeight(newTopSpacingDivHeight1);

                        var pageNumberToAdd1 = (newPage - this._pagesToVirtualizeUpperBoundary) | 0;
                        this.CreatePageUpwards(this.RetrievePageFromCache(pageNumberToAdd1));

                        var newBottomSpacingDivHeight1 = tss.usX.px$2(((((this._listPageCache.PagesCount - (((newPage + this._pagesToVirtualizeLowerBoundary) | 0))) | 0)) * this._pageHeight.Size));

                        this.SetBottomSpacingDivHeight(newBottomSpacingDivHeight1);
                    }
                }

                this._currentPage = newPage;
                this._currentScrollPosition = scrollPosition;
            },
            GetScrollDirection: function (scrollTop) {
                if (scrollTop > this._currentScrollPosition) {
                    return tss.VirtualizedList.ScrollDirection.Down;
                }

                if (scrollTop < this._currentScrollPosition) {
                    return tss.VirtualizedList.ScrollDirection.Up;
                }

                return tss.VirtualizedList.ScrollDirection.Neutral;
            }
        }
    });

    H5.define("tss.VisibilitySensor", {
        inherits: [tss.IC],
        fields: {
            InnerElement: null,
            _debounceTimeout: 0,
            _debounce: 0,
            _onVisible: null,
            _maxCalls: 0,
            _observer: null
        },
        alias: ["Render", "tss$IC$Render"],
        ctors: {
            init: function () {
                this._debounceTimeout = 50;
            },
            ctor: function (onVisible, singleCall, message) {
                if (singleCall === void 0) { singleCall = true; }
                if (message === void 0) { message = null; }

                this.$initialize();
                this.InnerElement = tss.UI.DIV();

                if (H5.is(message, System.Object)) {
                    this.InnerElement.appendChild(message.tss$IC$Render());
                }

                this._onVisible = onVisible;

                this._maxCalls = singleCall ? 1 : 2147483647;

                tss.domObs.WhenMounted(this.InnerElement, H5.fn.cacheBind(this, this.HookCheck));
            }
        },
        methods: {
            Render: function () {
                return this.InnerElement;
            },
            Reset: function () {
                tss.domObs.WhenMounted(this.InnerElement, H5.fn.cacheBind(this, this.HookCheck));
                if (this._maxCalls < 1) {
                    this._maxCalls = 1;
                }
            },
            HookCheck: function () {
                var observerListener = H5.fn.bind(this, function (entries, obs) {
                    if (System.Linq.Enumerable.from(entries, IntersectionObserverEntry).any(function (e) {
                            return e.isIntersecting;
                        })) {
                        this.OnScroll(null);
                    }
                });

                this._observer = new (IntersectionObserver)(observerListener);
                this._observer.observe(this.InnerElement);

                window.addEventListener("focus", H5.fn.cacheBind(this, this.OnScroll), true);
                tss.domObs.WhenRemoved(this.InnerElement, H5.fn.cacheBind(this, this.UnHookCheck));
                this.OnScroll(null);
            },
            UnHookCheck: function () {
                window.removeEventListener("focus", H5.fn.cacheBind(this, this.OnScroll));
                this._observer != null ? this._observer.disconnect() : null;
                this._observer = null;
            },
            OnScroll: function (ev) {
                window.clearTimeout(this._debounce);
                this._debounce = window.setTimeout(H5.fn.cacheBind(this, this.CheckVisibility), this._debounceTimeout);
            },
            CheckVisibility: function (t) {
                var viewport_top = window.scrollY;
                var viewport_bottom = window.scrollY + window.innerHeight;
                var rect = this.InnerElement.getBoundingClientRect();
                if (rect.top > viewport_top && rect.bottom < viewport_bottom) {
                    if (this._maxCalls > 0) {
                        this._maxCalls = (this._maxCalls - 1) | 0;
                        this._onVisible(this);
                    }

                    if (this._maxCalls === 0) {
                        this.UnHookCheck();
                    }
                }
            }
        }
    });

    H5.define("tss.Breadcrumb", {
        inherits: function () { return [tss.IC,tss.ICBTTC(tss.Breadcrumb,tss.IC)]; },
        statics: {
            methods: {
                Clone: function (node) {
                    var c = node.cloneNode(true);
                    c.classList.remove("tss-breadcrumb-collapse");
                    return tss.UI.Raw$2(c);
                }
            }
        },
        fields: {
            _childContainer: null,
            _resizeObserver: null,
            _maximumItemsToDisplay: 0,
            _overflowIndex: 0,
            _cacheSizes: false,
            _cachedFullWidth: 0,
            _chevronToUseAsButton: null,
            _chevronIcon: null,
            _cachedSizes: null
        },
        props: {
            MaximumItemsToDisplay: {
                get: function () {
                    return this._maximumItemsToDisplay;
                },
                set: function (value) {
                    this._maximumItemsToDisplay = value;
                    this.Recompute();
                }
            },
            OverflowIndex: {
                get: function () {
                    return this._overflowIndex;
                },
                set: function (value) {
                    this._overflowIndex = value;
                    this.Recompute();
                }
            },
            IsSmall: {
                get: function () {
                    return this._childContainer.classList.contains("tss-small");
                },
                set: function (value) {
                    if (value) {
                        this._childContainer.classList.add("tss-small");
                    } else {
                        this._childContainer.classList.remove("tss-small");
                    }
                }
            }
        },
        alias: [
            "Clear", "tss$ICBT$tss$IC$Clear",
            "Replace", "tss$ICBT$tss$IC$Replace",
            "Add", "tss$ICBT$tss$IC$Add",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            init: function () {
                this._maximumItemsToDisplay = 10;
                this._overflowIndex = 0;
                this._cachedFullWidth = 0;
                this._chevronIcon = System.String.format("{0}", [H5.box(242, Tesserae.LineAwesome, System.Enum.toStringFn(Tesserae.LineAwesome))]);
                this._cachedSizes = new (System.Collections.Generic.Dictionary$2(HTMLElement,System.Double)).ctor();
            },
            ctor: function () {
                this.$initialize();
                this._childContainer = tss.UI.Div$2(tss.UI._$1("tss-breadcrumb"));
                tss.domObs.WhenMounted(this._childContainer, H5.fn.cacheBind(this, this.Recompute));
                this._resizeObserver = new tss.ResizeObserver();
                this._resizeObserver.Observe(document.body);
                this._resizeObserver.OnResize = H5.fn.cacheBind(this, this.Recompute);
            }
        },
        methods: {
            Recompute: function () {
                var isChevron = null;

                var childElementCount = H5.Int.clip32(this._childContainer.childElementCount);
                if (childElementCount === 0) {
                    return;
                }


                if (H5.is(this._chevronToUseAsButton, System.Object)) {
                    this._chevronToUseAsButton.classList.add(this._chevronIcon, "tss-breadcrumb-collapse");
                    this._chevronToUseAsButton.classList.remove("la-ellipsis-h", "tss-breadcrumb-opencolapsed");

                    this._chevronToUseAsButton.onclick = null;
                    this._chevronToUseAsButton = null;
                }

                this.UpdateChildrenSizes();



                var keep = System.Array.init(childElementCount, 0, System.Int32);

                var KEEP = 2;
                var COLLAPSE = 1;
                var NOTMEASURED = 0;
                isChevron = function (e) {
                    return e.classList.contains("tss-breadcrumb-chevron");
                };


                if (this._overflowIndex >= 0) {
                    for (var i = 0; i <= Math.min(((keep.length - 1) | 0), (H5.Int.mul((this._overflowIndex), 2))); i = (i + 1) | 0) {
                        keep[System.Array.index(i, keep)] = KEEP;
                        if ((((i + 1) | 0) < ((this._overflowIndex - 2) | 0))) {
                            var child = this._childContainer.children[(((i >>> 0) + 1) >>> 0)];
                            if (isChevron(child)) {
                                keep[System.Array.index(((i + 1) | 0), keep)] = KEEP;
                            }
                        }
                    }


                    keep[System.Array.index(((keep.length - 1) | 0), keep)] = KEEP;

                    var debt = this._cachedFullWidth - System.Linq.Enumerable.from(this._cachedSizes.Values, System.Double).sum() - 64;
                    while (debt < 0) {
                        var candidate = System.Array.indexOfT(keep, NOTMEASURED);
                        if (candidate >= 0) {
                            keep[System.Array.index(candidate, keep)] = COLLAPSE;
                            var child1 = this._childContainer.children[(candidate >>> 0)];
                            debt += this._cachedSizes.getItem(child1);
                        } else {
                            break;
                        }
                    }

                    var hidden = new (System.Collections.Generic.List$1(HTMLElement)).ctor();

                    for (var i1 = 0; i1 < this._childContainer.childElementCount; i1 = (i1 + 1) >>> 0) {
                        var child2 = this._childContainer.children[i1];
                        if (keep[System.Array.index(i1, keep)] === COLLAPSE) {
                            if (this._chevronToUseAsButton == null) {
                                if (isChevron(child2)) {
                                    this._chevronToUseAsButton = child2;
                                    continue;
                                } else if (i1 > 0) {
                                    this._chevronToUseAsButton = this._childContainer.children[((i1 - 1) >>> 0)];
                                }
                            }

                            if (!isChevron(child2)) {
                                hidden.add(child2);
                            }
                            child2.classList.add("tss-breadcrumb-collapse");
                        } else {
                            child2.classList.remove("tss-breadcrumb-collapse");
                        }
                    }


                    if (H5.is(this._chevronToUseAsButton, System.Object)) {
                        this._chevronToUseAsButton.classList.add("la-ellipsis-h", "tss-breadcrumb-opencolapsed");
                        this._chevronToUseAsButton.classList.remove(this._chevronIcon, "tss-breadcrumb-collapse");
                        this._chevronToUseAsButton.onclick = H5.fn.bind(this, function (e) {
                            tss.UI.StopEvent(e);
                            var clones = System.Linq.Enumerable.from(hidden, HTMLElement).select(function (element) {
                                    return tss.UI.ContextMenuItem$1(tss.Breadcrumb.Clone(element)).OnClick$2(function (s2, e2) {
                                        element.click();
                                    });
                                }).ToArray(tss.ContextMenu.Item);
                            tss.UI.ContextMenu().Items(clones).ShowFor(this._chevronToUseAsButton);
                        });
                    }

                }


            },
            UpdateChildrenSizes: function () {
                var $t;
                if (!this._cacheSizes) {
                    this._cachedSizes.clear();

                    for (var i = 0; i < this._childContainer.childElementCount; i = (i + 1) >>> 0) {
                        var child = this._childContainer.children[i];
                        child.classList.remove("tss-breadcrumb-collapse");
                    }

                    var rect = this._childContainer.getBoundingClientRect();
                    this._cachedFullWidth = rect.width;
                }


                $t = H5.getEnumerator(this._childContainer.children, Element);
                try {
                    while ($t.moveNext()) {
                        var child1 = H5.cast($t.Current, HTMLElement);
                        if (!this._cachedSizes.containsKey(child1)) {
                            var childRect = child1.getBoundingClientRect();
                            this._cachedSizes.setItem(child1, childRect.width);
                        }
                    }
                } finally {
                    if (H5.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            Clear: function () {
                tss.UI.ClearChildren(this._childContainer);
            },
            Replace: function (newComponent, oldComponent) {
                this._childContainer.replaceChild(newComponent.tss$IC$Render(), oldComponent.tss$IC$Render());
            },
            Add: function (component) {
                if (this._childContainer.childElementCount > 0) {
                    this._childContainer.appendChild(tss.UI.I(tss.UI._$1("tss-breadcrumb-chevron las " + (this._chevronIcon || ""))));
                }
                this._childContainer.appendChild(component.tss$IC$Render());
            },
            Items: function (children) {
                if (children === void 0) { children = []; }
                children.forEach(H5.fn.bind(this, function (x) {
                        this.Add(x);
                    }));
                return this;
            },
            DisableSizeCache: function () {
                this._cacheSizes = false;
                return this;
            },
            SetOverflowIndex: function (i) {
                this._overflowIndex = i;
                return this;
            },
            SetChevron: function (icon) {
                this._chevronIcon = icon;
                return this;
            },
            SetChevron$1: function (icon) {
                this._chevronIcon = System.String.format("{0}", [H5.box(icon, Tesserae.LineAwesome, System.Enum.toStringFn(Tesserae.LineAwesome))]);
                return this;
            },
            Small: function () {
                this.IsSmall = true;
                return this;
            },
            Render: function () {
                return this._childContainer;
            }
        }
    });

    H5.define("tss.Button", {
        inherits: function () { return [tss.CB(tss.Button,HTMLButtonElement),tss.ITF,tss.IHBG,tss.IHFG,tss.ICW]; },
        fields: {
            _textSpan: null,
            _iconSpan: null,
            _beforeReplace: null
        },
        props: {
            Background: {
                get: function () {
                    return this.InnerElement.style.background;
                },
                set: function (value) {
                    this.InnerElement.style.background = value;
                }
            },
            Foreground: {
                get: function () {
                    return this.InnerElement.style.color;
                },
                set: function (value) {
                    this.InnerElement.style.color = value;
                }
            },
            /**
             * Gets or sets button text
             *
             * @instance
             * @public
             * @memberof tss.Button
             * @function Text
             * @type string
             */
            Text: {
                get: function () {
                    return this._textSpan.innerText;
                },
                set: function (value) {
                    this._textSpan.innerText = value;
                    this.InnerElement.style.minWidth = System.String.isNullOrEmpty(value) ? "unset" : "";
                }
            },
            /**
             * Gets or sets button title
             *
             * @instance
             * @public
             * @memberof tss.Button
             * @function Title
             * @type string
             */
            Title: {
                get: function () {
                    return this.InnerElement.title;
                },
                set: function (value) {
                    this.InnerElement.title = value;
                }
            },
            /**
             * Gets or sets button icon (icon class)
             *
             * @instance
             * @public
             * @memberof tss.Button
             * @function Icon
             * @type string
             */
            Icon: {
                get: function () {
                    return this._iconSpan != null ? this._iconSpan.className : null;
                },
                set: function (value) {
                    if (System.String.isNullOrEmpty(value) && this._iconSpan != null) {
                        this.InnerElement.removeChild(this._iconSpan);
                        this._iconSpan = null;
                        return;
                    }

                    if (this._iconSpan == null) {
                        this._iconSpan = tss.UI.I(tss.UI._());
                        this.InnerElement.insertBefore(this._iconSpan, this._textSpan);
                    }

                    this._iconSpan.className = value;
                }
            },
            /**
             * Gets or set whenever button is rendered in a compact form
             *
             * @instance
             * @public
             * @memberof tss.Button
             * @function IsCompact
             * @type boolean
             */
            IsCompact: {
                get: function () {
                    return this.InnerElement.classList.contains("tss-small");
                },
                set: function (value) {
                    tss.UI.UpdateClassIf(this.InnerElement, value, "tss-small");
                }
            },
            /**
             * Gets or set whenever button is rendered like a link
             *
             * @instance
             * @public
             * @memberof tss.Button
             * @function IsLink
             * @type boolean
             */
            IsLink: {
                get: function () {
                    return this.InnerElement.classList.contains("tss-btn-link");
                },
                set: function (value) {
                    tss.UI.UpdateClassIf(this.InnerElement, value, "tss-btn-link");
                }
            },
            /**
             * Gets or set whenever button is primary
             *
             * @instance
             * @public
             * @memberof tss.Button
             * @function IsPrimary
             * @type boolean
             */
            IsPrimary: {
                get: function () {
                    return this.InnerElement.classList.contains("tss-btn-primary");
                },
                set: function (value) {
                    if (value) {
                        this.InnerElement.classList.add("tss-btn-primary");
                        this.InnerElement.classList.remove("tss-btn-default", "tss-btn-success", "tss-btn-danger");
                    } else {
                        this.InnerElement.classList.add("tss-btn-default");
                        this.InnerElement.classList.remove("tss-btn-success", "tss-btn-danger", "tss-btn-primary");
                    }
                }
            },
            /**
             * Gets or set whenever button is primary
             *
             * @instance
             * @public
             * @memberof tss.Button
             * @function IsSuccess
             * @type boolean
             */
            IsSuccess: {
                get: function () {
                    return this.InnerElement.classList.contains("tss-btn-success");
                },
                set: function (value) {
                    if (value) {
                        this.InnerElement.classList.add("tss-btn-success");
                        this.InnerElement.classList.remove("tss-btn-default", "tss-btn-primary", "tss-btn-danger");
                    } else {
                        this.InnerElement.classList.add("tss-btn-default");
                        this.InnerElement.classList.remove("tss-btn-success", "tss-btn-danger", "tss-btn-primary");
                    }
                }
            },
            /**
             * Gets or set whenever button is danger
             *
             * @instance
             * @public
             * @memberof tss.Button
             * @function IsDanger
             * @type boolean
             */
            IsDanger: {
                get: function () {
                    return this.InnerElement.classList.contains("tss-btn-danger");
                },
                set: function (value) {
                    if (value) {
                        this.InnerElement.classList.add("tss-btn-danger");
                        this.InnerElement.classList.remove("tss-btn-default", "tss-btn-primary", "tss-btn-success");
                    } else {
                        this.InnerElement.classList.add("tss-btn-default");
                        this.InnerElement.classList.remove("tss-btn-success", "tss-btn-danger", "tss-btn-primary");
                    }
                }
            },
            /**
             * Gets or sets whenever button is enabled
             *
             * @instance
             * @public
             * @memberof tss.Button
             * @function IsEnabled
             * @type boolean
             */
            IsEnabled: {
                get: function () {
                    return !this.InnerElement.classList.contains("tss-disabled");
                },
                set: function (value) {
                    tss.UI.UpdateClassIfNot(this.InnerElement, value, "tss-disabled");
                }
            },
            CanWrap: {
                get: function () {
                    return !this.InnerElement.classList.contains("tss-btn-nowrap");
                },
                set: function (value) {
                    tss.UI.UpdateClassIfNot(this.InnerElement, value, "tss-btn-nowrap");
                }
            },
            EnableEllipsis: {
                get: function () {
                    return !this.InnerElement.classList.contains("tss-text-ellipsis");
                },
                set: function (value) {
                    tss.UI.UpdateClassIf(this.InnerElement, value, "tss-text-ellipsis");
                }
            },
            Size: {
                get: function () {
                    return tss.ITFX.FromClassList$1(this.InnerElement, "tss-fontsize-small");
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.TS, this.Size));
                    this.InnerElement.classList.add(System.Enum.toString(tss.TS, value));
                }
            },
            Weight: {
                get: function () {
                    return tss.ITFX.FromClassList$2(this.InnerElement, "tss-fontweight-regular");
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.TW, this.Weight));
                    this.InnerElement.classList.add(System.Enum.toString(tss.TW, value));
                }
            },
            TextAlign: {
                get: function () {
                    return tss.ITFX.FromClassList(this.InnerElement, "tss-textalign-center");
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.TA, this.TextAlign));
                    this.InnerElement.classList.add(System.Enum.toString(tss.TA, value));
                }
            }
        },
        alias: [
            "Background", "tss$IHBG$Background",
            "Foreground", "tss$IHFG$Foreground",
            "CanWrap", "tss$ICW$CanWrap",
            "Size", "tss$ITF$Size",
            "Weight", "tss$ITF$Weight",
            "TextAlign", "tss$ITF$TextAlign",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            ctor: function (text) {
                if (text === void 0) { text = ""; }

                this.$initialize();
                tss.CB(tss.Button,HTMLButtonElement).ctor.call(this);
                this._textSpan = tss.UI.Span(tss.UI._$2(void 0, void 0, void 0, void 0, void 0, void 0, text, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0));
                this.InnerElement = tss.UI.Button(tss.UI._$1("tss-btn tss-btn-default tss-default-component-margin"), [this._textSpan]);
                this.Weight = "tss-fontweight-regular";
                this.Size = "tss-fontsize-small";

                this.AttachClick();
                this.AttachContextMenu();
                this.AttachFocus();
                this.AttachBlur();

                if (System.String.isNullOrEmpty(text)) {
                    this.InnerElement.style.minWidth = "unset";
                }
            }
        },
        methods: {
            Render: function () {
                return this.InnerElement;
            },
            Compact: function () {
                this.IsCompact = true;
                return this;
            },
            NoMargin: function () {
                this.InnerElement.classList.add("tss-btn-remove-margin");
                return this;
            },
            NoPadding: function () {
                this.InnerElement.classList.add("tss-btn-remove-padding");
                return this;
            },
            LessPadding: function () {
                this.InnerElement.classList.add("tss-btn-less-padding");
                return this;
            },
            Link: function () {
                this.IsLink = true;
                return this;
            },
            DefaultLink: function () {
                this.IsLink = true;
                this.InnerElement.classList.add("tss-dark");
                return this;
            },
            DangerLink: function () {
                this.IsLink = true;
                this.InnerElement.classList.add("tss-danger");
                return this;
            },
            ToSpinner: function (text) {
                if (text === void 0) { text = null; }
                if (this._beforeReplace == null) {
                    var rect = this.InnerElement.getBoundingClientRect();

                    if (this.InnerElement.hasOwnProperty("_tippy")) {
                        this.InnerElement._tippy.disable();
                    }

                    this._beforeReplace = this.InnerElement;
                    var newChild = this.InnerElement.cloneNode(false);
                    newChild.style.minHeight = tss.usX.px(rect.height).toString();
                    newChild.classList.add("tss-btn-nominsize", "tss-disabled");
                    tss.UI.ClearChildren(newChild);
                    newChild.appendChild(tss.UI.Spinner(text).Medium().Render());

                    this.InnerElement.parentElement.replaceChild(newChild, this.InnerElement);
                    this.InnerElement = newChild;
                }
            },
            UndoSpinner: function () {
                if (H5.is(this._beforeReplace, System.Object)) {
                    this.InnerElement.parentElement.replaceChild(this._beforeReplace, this.InnerElement);
                    this.InnerElement = this._beforeReplace;
                    if (this.InnerElement.hasOwnProperty("_tippy")) {
                        this.InnerElement._tippy.enable();
                    }
                    this._beforeReplace = null;
                }
            },
            OnClickSpinWhile: function (action, text, onError) {
                if (text === void 0) { text = null; }
                if (onError === void 0) { onError = null; }
                return this.OnClick(H5.fn.bind(this, function (_, e) {
                    tss.UI.StopEvent(e);
                    tss.tX.fireAndForget(System.Threading.Tasks.Task.run(H5.fn.bind(this, function () {
                        var $s = 0,
                            $t1, 
                            $jff, 
                            $tcs = new H5.TCS(), 
                            $rv, 
                            innerException, 
                            E, 
                            $ae, 
                            $ae1, 
                            $ab = H5.fn.bind(this, function () {
                                try {
                                    for (;;) {
                                        $s = H5.STEP([0,1,2,3,4,5], $s);
                                        switch ($s) {
                                            case 0: {
                                                innerException = null;
                                                this.ToSpinner(text);
                                                $s = 1;
                                                continue;
                                            }
                                            case 1: {
                                                $t1 = action();
                                                $s = 2;
                                                if ($t1.isC()) {
                                                    continue;
                                                }
                                                $t1.c($ab);
                                                return;
                                            }
                                            case 2: {
                                                $t1.gAR();
                                                $s = 4;
                                                continue;
                                            }
                                            case 3: {
                                                innerException = E;
                                                throw $ae;
                                                $ae = null;
                                                $s = 4;
                                                continue;
                                            }
                                            case 4: {
                                                this.UndoSpinner();
                                                if (H5.is(innerException, System.Object)) {
                                                    if (H5.is(onError, System.Object)) {
                                                        onError(this, innerException);
                                                    } else {
                                                        console.error(innerException);
                                                    }
                                                }


                                                if ($jff > -1) {
                                                    $s = $jff;
                                                    $jff = null;
                                                } else if ($ae) {
                                                    $tcs.sE($ae);
                                                    return;
                                                } else if (H5.isDefined($rv)) {
                                                    $tcs.sR($rv);
                                                    return;
                                                }
                                                $s = 5;
                                                continue;
                                            }
                                            case 5: {
                                                $tcs.sR(null);
                                                return;
                                            }
                                            default: {
                                                $tcs.sR(null);
                                                return;
                                            }
                                        }
                                    }
                                } catch($ae1) {
                                    $ae = System.Exception.create($ae1);
                                    if ( $s >= 1 && $s <= 2 ) {
                                        E = $ae;
                                        $s = 3;
                                        $ab();
                                        return;
                                    }
                                    if ($s >= 1 && $s <= 3) {
                                        $s = 4;
                                        $ab();
                                        return;
                                    }
                                    $tcs.sE($ae);
                                }
                            }, arguments);

                        $ab();
                        return $tcs.task;
                    })));
                }));
            },
            OnClick$1: function (action) {
                return this.OnClick(function (_, e) {
                    tss.UI.StopEvent(e);
                    action();
                });
            },
            OnContextMenu$1: function (action) {
                return this.OnContextMenu(function (_, e) {
                    tss.UI.StopEvent(e);
                    action();
                });
            },
            SpinWhile: function (action, text, onError) {
                if (text === void 0) { text = null; }
                if (onError === void 0) { onError = null; }
                tss.tX.fireAndForget(System.Threading.Tasks.Task.run(H5.fn.bind(this, function () {
                    var $s = 0,
                        $t1, 
                        $jff, 
                        $tcs = new H5.TCS(), 
                        $rv, 
                        innerException, 
                        e, 
                        $ae, 
                        $ae1, 
                        $ab = H5.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $s = H5.STEP([0,1,2,3,4,5], $s);
                                    switch ($s) {
                                        case 0: {
                                            innerException = null;
                                            this.ToSpinner(text);
                                            $s = 1;
                                            continue;
                                        }
                                        case 1: {
                                            $t1 = action();
                                            $s = 2;
                                            if ($t1.isC()) {
                                                continue;
                                            }
                                            $t1.c($ab);
                                            return;
                                        }
                                        case 2: {
                                            $t1.gAR();
                                            $s = 4;
                                            continue;
                                        }
                                        case 3: {
                                            innerException = e;
                                            throw $ae;
                                            $ae = null;
                                            $s = 4;
                                            continue;
                                        }
                                        case 4: {
                                            this.UndoSpinner();
                                            if (H5.is(innerException, System.Object)) {
                                                if (H5.is(onError, System.Object)) {
                                                    onError(this, innerException);
                                                } else {
                                                    console.error(innerException);
                                                }
                                            }


                                            if ($jff > -1) {
                                                $s = $jff;
                                                $jff = null;
                                            } else if ($ae) {
                                                $tcs.sE($ae);
                                                return;
                                            } else if (H5.isDefined($rv)) {
                                                $tcs.sR($rv);
                                                return;
                                            }
                                            $s = 5;
                                            continue;
                                        }
                                        case 5: {
                                            this.UndoSpinner();
                                            $tcs.sR(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.sR(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($ae1) {
                                $ae = System.Exception.create($ae1);
                                if ( $s >= 1 && $s <= 2 ) {
                                    e = $ae;
                                    $s = 3;
                                    $ab();
                                    return;
                                }
                                if ($s >= 1 && $s <= 3) {
                                    $s = 4;
                                    $ab();
                                    return;
                                }
                                $tcs.sE($ae);
                            }
                        }, arguments);

                    $ab();
                    return $tcs.task;
                })));
            },
            Primary: function () {
                this.IsPrimary = true;
                return this;
            },
            Success: function () {
                this.IsSuccess = true;
                return this;
            },
            Danger: function () {
                this.IsDanger = true;
                return this;
            },
            Disabled: function (value) {
                if (value === void 0) { value = true; }
                this.IsEnabled = !value;
                return this;
            },
            NoBorder: function () {
                this.InnerElement.classList.add("tss-btn-noborder");
                return this;
            },
            NoMinSize: function () {
                this.InnerElement.classList.add("tss-btn-nominsize");
                return this;
            },
            NoBackground: function () {
                this.InnerElement.classList.add("tss-btn-nobg");
                return this;
            },
            LinkOnHover: function () {
                this.InnerElement.classList.add("tss-btn-linkonhover");
                return this;
            },
            NoHover: function () {
                this.InnerElement.classList.add("tss-btn-nohover");
                return this;
            },
            Color: function (background, textColor, borderColor, iconColor) {
                if (textColor === void 0) { textColor = "white"; }
                if (borderColor === void 0) { borderColor = "white"; }
                if (iconColor === void 0) { iconColor = ""; }
                this.InnerElement.classList.add("tss-btn-nobg");
                this.InnerElement.style.background = background;
                this.InnerElement.style.color = textColor;
                this.InnerElement.style.borderColor = borderColor;
                if (H5.is(this._iconSpan, System.Object)) {
                    this._iconSpan.style.color = iconColor;
                }
                return this;
            },
            SetText: function (text) {
                this.Text = text;
                return this;
            },
            SetTitle: function (title) {
                this.Title = title;
                return this;
            },
            SetIcon: function (icon, color, afterText) {
                if (color === void 0) { color = ""; }
                if (afterText === void 0) { afterText = false; }
                this.Icon = icon;
                if (H5.is(this._iconSpan, System.Object)) {
                    this._iconSpan.style.color = color;
                    if (afterText) {
                        this.InnerElement.removeChild(this._iconSpan);
                        this.InnerElement.appendChild(this._iconSpan);
                    } else {
                        this.InnerElement.insertBefore(this._iconSpan, this._textSpan);
                    }
                }
                return this;
            },
            SetIcon$1: function (icon, afterText) {
                if (afterText === void 0) { afterText = false; }
                this.Icon = System.String.format("ec {0}", [H5.box(icon, Tesserae.Emoji, System.Enum.toStringFn(Tesserae.Emoji))]);
                if (H5.is(this._iconSpan, System.Object)) {
                    this._iconSpan.style.color = "";
                    if (afterText) {
                        this.InnerElement.removeChild(this._iconSpan);
                        this.InnerElement.appendChild(this._iconSpan);
                    } else {
                        this.InnerElement.insertBefore(this._iconSpan, this._textSpan);
                    }
                }
                return this;
            },
            SetIcon$2: function (icon, color, size, weight, afterText) {
                if (color === void 0) { color = ""; }
                if (size === void 0) { size = "tss-fontsize-medium"; }
                if (weight === void 0) { weight = "lal"; }
                if (afterText === void 0) { afterText = false; }
                this.Icon = System.String.format("{0} {1} {2}", H5.box(weight, tss.LineAwesomeWeight, System.Enum.toStringFn(tss.LineAwesomeWeight)), H5.box(icon, Tesserae.LineAwesome, System.Enum.toStringFn(Tesserae.LineAwesome)), H5.box(size, tss.TS, System.Enum.toStringFn(tss.TS)));
                if (H5.is(this._iconSpan, System.Object)) {
                    this._iconSpan.style.color = color;
                    if (afterText) {
                        this.InnerElement.removeChild(this._iconSpan);
                        this.InnerElement.appendChild(this._iconSpan);
                    } else {
                        this.InnerElement.insertBefore(this._iconSpan, this._textSpan);
                    }
                }
                return this;
            },
            OnIconClick: function (action) {
                this._iconSpan.onclick = H5.fn.combine(this._iconSpan.onclick, H5.fn.bind(this, function (e) {
                    tss.UI.StopEvent(e);
                    action(this._iconSpan, e);
                }));
            },
            IconOnHover: function () {
                this.InnerElement.classList.add("tss-btn-icononhover");
                return this;
            },
            ReplaceContent: function (content) {
                tss.UI.ClearChildren(this.InnerElement);
                this.InnerElement.appendChild(content.tss$IC$Render());
                return this;
            },
            Wrap: function () {
                this.CanWrap = true;
                return this;
            },
            Ellipsis: function () {
                this.EnableEllipsis = true;
                return this;
            },
            NoWrap: function () {
                this.CanWrap = false;
                return this;
            },
            RaiseOnClick$1: function (e, handler) {
                if (this.IsEnabled) {
                    this.RaiseOnClick(null);
                }
            },
            Focus: function () {
                tss.domObs.WhenMounted(this.InnerElement, H5.fn.bind(this, function () {
                    try {
                        this.InnerElement.scrollIntoViewIfNeeded();
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        this.InnerElement.scrollIntoView();
                    }

                    this.InnerElement.focus();
                }));
                return this;
            },
            WithHotKey: function (keys, options) {
                if (options === void 0) { options = null; }
                tss.domObs.WhenMounted(this.InnerElement, H5.fn.bind(this, function () {
                    if (options == null) {
                        tss.Hotkeys.BindGlobal(keys, H5.fn.cacheBind(this, this.RaiseOnClick$1));
                    } else {
                        tss.Hotkeys.Bind(keys, options, H5.fn.cacheBind(this, this.RaiseOnClick$1));
                    }

                    tss.domObs.WhenRemoved(this.InnerElement, H5.fn.bind(this, function () {
                        if (options == null) {
                            tss.Hotkeys.UnbindGlobal(keys, H5.fn.cacheBind(this, this.RaiseOnClick$1));
                        } else {
                            tss.Hotkeys.Unbind(keys, options, H5.fn.cacheBind(this, this.RaiseOnClick$1));
                        }
                    }));
                }));
                return this;
            }
        }
    });

    H5.define("tss.Card", {
        inherits: function () { return [tss.CB(tss.Card,HTMLElement)]; },
        fields: {
            _cardContainer: null
        },
        props: {
            /**
             * Gets or set whenever the card is rendered in a compact form
             *
             * @instance
             * @public
             * @memberof tss.Card
             * @function IsCompact
             * @type boolean
             */
            IsCompact: {
                get: function () {
                    return this._cardContainer.classList.contains("tss-small");
                },
                set: function (value) {
                    tss.UI.UpdateClassIf(this._cardContainer, value, "tss-small");
                }
            }
        },
        alias: ["Render", "tss$IC$Render"],
        ctors: {
            ctor: function (content) {
                this.$initialize();
                tss.CB(tss.Card,HTMLElement).ctor.call(this);
                this.InnerElement = tss.UI.Div(tss.UI._$1("tss-card"), content.tss$IC$Render());
                this._cardContainer = tss.UI.Div(tss.UI._$1("tss-card-container"), this.InnerElement);
                tss.domObs.WhenMounted(this.InnerElement, H5.fn.bind(this, function () {
                    this.InnerElement.classList.add("tss-ismounted");
                }));
                this.AttachClick();
                this.AttachContextMenu();
            }
        },
        methods: {
            OnClick: function (onClick, clearPrevious) {
                if (clearPrevious === void 0) { clearPrevious = true; }
                this.InnerElement.style.cursor = "pointer";
                return tss.CB(tss.Card,HTMLElement).prototype.OnClick.call(this, onClick, clearPrevious);
            },
            OnClick$1: function (action) {
                return this.OnClick(function (_, __) {
                    action();
                });
            },
            SetContent: function (content) {
                tss.UI.ClearChildren(this.InnerElement);
                this.InnerElement.appendChild(content.tss$IC$Render());
                return this;
            },
            Compact: function () {
                this.IsCompact = true;
                return this;
            },
            NoAnimation: function () {
                this.InnerElement.classList.add("tss-noanimation", "tss-ismounted");
                return this;
            },
            BackgroundColor: function (color) {
                this.InnerElement.style.backgroundColor = color;
                return this;
            },
            Border: function (color, size) {
                if (size === void 0) { size = null; }
                size = size || tss.usX.px$1(1);
                this.InnerElement.style.borderColor = color;
                this.InnerElement.style.borderWidth = size.toString();
                this.InnerElement.style.borderStyle = "solid";
                return this;
            },
            NoPadding: function () {
                this.InnerElement.style.padding = "0px";
                return this;
            },
            HoverColor: function (enabled) {
                if (enabled === void 0) { enabled = true; }
                if (enabled) {
                    this.InnerElement.classList.add("tss-card-hover");
                } else {
                    this.InnerElement.classList.remove("tss-card-hover");
                }
                return this;
            },
            Render: function () {
                return this._cardContainer;
            }
        }
    });

    H5.define("tss.ChecBox", {
        inherits: function () { return [tss.CB(tss.ChecBox,HTMLInputElement),tss.IObservableComponent(System.Boolean)]; },
        fields: {
            _checkSpan: null,
            _label: null,
            _observable: null
        },
        props: {
            /**
             * Gets or sets button text
             *
             * @instance
             * @public
             * @memberof tss.ChecBox
             * @function Text
             * @type string
             */
            Text: {
                get: function () {
                    return this._label.innerText;
                },
                set: function (value) {
                    this._label.innerText = value;
                }
            },
            /**
             * Gets or sets whenever CheckBox is enabled
             *
             * @instance
             * @public
             * @memberof tss.ChecBox
             * @function IsEnabled
             * @type boolean
             */
            IsEnabled: {
                get: function () {
                    return !this._label.classList.contains("tss-disabled");
                },
                set: function (value) {
                    if (value) {
                        this._label.classList.remove("tss-disabled");
                    } else {
                        this._label.classList.add("tss-disabled");
                    }
                }
            },
            /**
             * Gets or sets whenever CheckBox is checked
             *
             * @instance
             * @public
             * @memberof tss.ChecBox
             * @function IsChecked
             * @type boolean
             */
            IsChecked: {
                get: function () {
                    return this.InnerElement.checked;
                },
                set: function (value) {
                    this.InnerElement.checked = value;
                    this._observable.Value$1 = value;
                }
            }
        },
        alias: [
            "Render", "tss$IC$Render",
            "AsObservable", "tss$IObservableComponent$System$Boolean$AsObservable"
        ],
        ctors: {
            init: function () {
                this._observable = new (tss.SettableObservableT(System.Boolean))();
            },
            ctor: function (text) {
                if (text === void 0) { text = ""; }

                this.$initialize();
                tss.CB(tss.ChecBox,HTMLInputElement).ctor.call(this);
                this.InnerElement = tss.UI.CheckBox(tss.UI._$1("tss-checkbox"));
                this._checkSpan = tss.UI.Span(tss.UI._$1("tss-checkbox-mark"));
                this._label = tss.UI.Label(tss.UI._$2("tss-checkbox-container tss-default-component-margin", void 0, void 0, void 0, void 0, void 0, text, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0), [this.InnerElement, this._checkSpan]);
                this.AttachClick();
                this.AttachChange();
                this.AttachFocus();
                this.AttachBlur();

                this.InnerElement.onchange = H5.fn.bind(this, function (_) {
                    this._observable.Value$1 = this.InnerElement.checked;
                });
            }
        },
        methods: {
            Render: function () {
                return this._label;
            },
            Disabled: function (value) {
                if (value === void 0) { value = true; }
                this.IsEnabled = !value;
                return this;
            },
            Checked: function (value) {
                if (value === void 0) { value = true; }
                this.IsChecked = value;
                return this;
            },
            SetText: function (text) {
                this.Text = text;
                return this;
            },
            AsObservable: function () {
                return this._observable;
            }
        }
    });

    H5.define("tss.ChoiceGroup.Choice", {
        inherits: function () { return [tss.CB(tss.ChoiceGroup.Choice,HTMLInputElement)]; },
        $kind: "nested class",
        fields: {
            _radioSpan: null,
            _label: null
        },
        events: {
            SelectedItem: null
        },
        props: {
            IsEnabled: {
                get: function () {
                    return !this._label.classList.contains("tss-disabled");
                },
                set: function (value) {
                    if (value !== this.IsEnabled) {
                        if (value) {
                            this._label.classList.remove("tss-disabled");
                        } else {
                            this._label.classList.add("tss-disabled");
                        }
                    }
                }
            },
            IsSelected: {
                get: function () {
                    return this.InnerElement.checked;
                },
                set: function (value) {
                    if (value !== this.IsSelected) {
                        this.InnerElement.checked = value;
                    }
                }
            },
            Text: {
                get: function () {
                    return this._label.innerText;
                },
                set: function (value) {
                    this._label.innerText = value;
                }
            }
        },
        alias: ["Render", "tss$IC$Render"],
        ctors: {
            ctor: function (text) {
                this.$initialize();
                tss.CB(tss.ChoiceGroup.Choice,HTMLInputElement).ctor.call(this);
                this.InnerElement = tss.UI.RadioButton(tss.UI._$1("tss-option"));
                this._radioSpan = tss.UI.Span(tss.UI._$1("tss-option-mark"));
                this._label = tss.UI.Label(tss.UI._$2("tss-option-container tss-default-component-margin", void 0, void 0, void 0, void 0, void 0, text, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0), [this.InnerElement, this._radioSpan]);
                this.AttachClick();
                this.AttachChange();
                this.AttachFocus();
                this.AttachBlur();
                this.addChanged(H5.fn.bind(this, function (s, e) {
                    if (this.IsSelected) {
                        !H5.staticEquals(this.SelectedItem, null) ? this.SelectedItem(this) : null;
                    }
                }));
            }
        },
        methods: {
            Render: function () {
                return this._label;
            },
            Disabled: function (value) {
                if (value === void 0) { value = true; }
                this.IsEnabled = !value;
                return this;
            },
            Selected: function () {
                this.IsSelected = true;
                return this;
            },
            SelectedIf: function (shouldSelect) {
                if (shouldSelect) {
                    this.IsSelected = true;
                }
                return this;
            },
            OnSelected: function (onSelected) {
                this.addSelectedItem(onSelected);
                return this;
            },
            SetText: function (text) {
                this.Text = text;
                return this;
            }
        }
    });

    H5.definei("tss.ICVT", function (T) { return {
        inherits: [tss.ICV],
        $kind: "interface"
    }; });

    /**
     * This generic version of Layer should only be used to create derived classes from (such as the ContextMenu, for example). If you require no additional functionality on top of a standard layer then use the non-generic Layer class. The reason for the two classes
     is to avoid confusion as this can NOT be derived from and the generic version MUST be derived from. The generic version exists to maintain the type of component in chained calls made on the ComponentBase class that they both are derived from (when the OnClick
     method is called on a ContextMenu then you expect a ContextMenu to be returned and not simply a Layer instance).
     *
     * @abstract
     * @public
     * @class tss.LayerT
     * @augments tss.CB
     */
    H5.define("tss.LayerT", function (T) { return {
        inherits: [tss.CB(T,HTMLDivElement)],
        fields: {
            _content: null,
            _contentHtml: null,
            _renderedContent: null,
            _host: null,
            _isVisible: false,
            _isTransparent: false,
            _onLayerClick: null
        },
        props: {
            Host: {
                get: function () {
                    return this._host;
                },
                set: function (value) {
                    if (this.IsVisible) {
                        this.Hide();
                    }
                    this._host = value;
                    if (this.IsVisible) {
                        this.Show();
                    }
                }
            },
            Content: {
                get: function () {
                    return this._content;
                },
                set: function (value) {
                    this._content = value;
                    if (this.IsVisible) {
                        this.Hide();
                        this.Show();
                    }
                }
            },
            IsVisible: {
                get: function () {
                    return this._isVisible;
                },
                set: function (value) {
                    if (value) {
                        this.Show();
                    } else {
                        this.Hide();
                    }
                }
            },
            IsTransparent: {
                get: function () {
                    return this._isTransparent;
                },
                set: function (value) {
                    this._isTransparent = value;
                    if (this.IsVisible) {
                        this.Hide();
                        this.Show();
                    }
                }
            }
        },
        alias: ["Render", "tss$IC$Render"],
        ctors: {
            ctor: function () {
                this.$initialize();
                tss.CB(T,HTMLDivElement).ctor.call(this);
                this.InnerElement = tss.UI.Div$2(tss.UI._$1("tss-layer-base"));
            }
        },
        methods: {
            Render: function () {
                return this.InnerElement;
            },
            Show: function () {
                if (H5.is(this._content, System.Object) || H5.is(this._contentHtml, System.Object)) {
                    if (this._host == null) {
                        var oldLayer = this._renderedContent;

                        this._renderedContent = tss.UI.Div(tss.UI._$1("tss-layer tss-fade"), this.BuildRenderedContent());
                        this._renderedContent.style.zIndex = tss.Layers.PushLayer(this._renderedContent);
                        document.body.appendChild(this._renderedContent);
                        window.requestAnimationFrame(H5.fn.bind(this, function (_) {
                            this._renderedContent != null ? this._renderedContent.classList.add("tss-show") : null;
                        }));

                        oldLayer != null ? oldLayer.remove() : null;
                    } else {
                        this._renderedContent = this.BuildRenderedContent();
                        this._host.InnerElement.appendChild(this._renderedContent);
                    }

                    this._isVisible = true;

                    tss.tippy.HideAll();
                }
                return H5.cast(this, T);
            },
            Hide: function (onHidden) {
                if (onHidden === void 0) { onHidden = null; }
                if (H5.is(this._renderedContent, System.Object)) {
                    if (this._host == null) {
                        this._renderedContent.classList.remove("tss-show");
                        var tr = this._renderedContent;
                        window.setTimeout(function (_) {
                            document.body.removeChild(tr);
                            !H5.staticEquals(onHidden, null) ? onHidden() : null;
                        }, 150);
                    } else {
                        this._host.InnerElement.removeChild(this._renderedContent);
                    }
                    this._renderedContent = null;
                    this._isVisible = false;
                }
            },
            OnBackgroundClick: function (action) {
                this._onLayerClick = action;
            },
            BuildRenderedContent: function () {
                if (H5.is(this._contentHtml, System.Object)) {
                    return this._contentHtml;
                }

                var div = tss.UI.Div(tss.UI._$1("tss-layer-content"), this._content.tss$IC$Render());
                if (this._isTransparent) {
                    div.classList.add("tss-layer-content-transparent");
                }

                if (H5.is(this._onLayerClick, System.Object)) {
                    div.onclick = H5.fn.combine(div.onclick, H5.fn.bind(this, function (e) {
                        this._onLayerClick(e);
                    }));
                }
                return div;
            }
        }
    }; });

    H5.define("tss.DC", {
        inherits: [tss.IDefer],
        statics: {
            methods: {
                Create$1: function (asyncGenerator, loadMessage) {
                    if (H5.staticEquals(asyncGenerator, null)) {
                        throw new System.ArgumentNullException.$ctor1("asyncGenerator");
                    }

                    var defaultLoadingMessage;
                    if (loadMessage == null) {
                        defaultLoadingMessage = tss.UI.TextBlock$1("", false, false, "tss-fontsize-xsmall", "tss-fontweight-regular", void 0);
                        loadMessage = defaultLoadingMessage;
                    } else {
                        defaultLoadingMessage = null;
                    }
                    return new tss.DC(asyncGenerator, loadMessage, defaultLoadingMessage);
                },
                Create: function (asyncGenerator) {
                    return tss.DC.Create$1(asyncGenerator, null);
                },
                Observe: function (T1, o1, asyncGenerator, loadMessage) {
                    if (loadMessage === void 0) { loadMessage = null; }
                    var DoRefresh = null;
                    var d = tss.DC.Create$1(function () {
                        return asyncGenerator(o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$Value"]);
                    }, loadMessage);
                    DoRefresh = function (val) {
                        d.Refresh();
                    };

                    tss.domObs.WhenMounted(d.Container, function () {
                        o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$ObserveFutureChanges"](DoRefresh);

                        tss.domObs.WhenRemoved(d.Container, function () {
                            o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$StopObserving"](DoRefresh);
                        });
                    });




                    return d;
                },
                Observe$2: function (T1, T2, o1, o2, asyncGenerator, loadMessage) {
                    if (loadMessage === void 0) { loadMessage = null; }
                    var DoRefresh = null;
                    var d = tss.DC.Create$1(function () {
                        return asyncGenerator(o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$Value"], o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$Value"]);
                    }, loadMessage);
                    DoRefresh = function (val) {
                        d.Refresh();
                    };
                    tss.domObs.WhenMounted(d.Container, function () {
                        o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$ObserveFutureChanges"](DoRefresh);
                        o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$ObserveFutureChanges"](DoRefresh);

                        tss.domObs.WhenRemoved(d.Container, function () {
                            o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$StopObserving"](DoRefresh);
                            o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$StopObserving"](DoRefresh);
                        });
                    });



                    return d;
                },
                Observe$3: function (T1, T2, T3, o1, o2, o3, asyncGenerator, loadMessage) {
                    if (loadMessage === void 0) { loadMessage = null; }
                    var DoRefresh = null;
                    var d = tss.DC.Create$1(function () {
                        return asyncGenerator(o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$Value"], o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$Value"], o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$Value"]);
                    }, loadMessage);
                    DoRefresh = function (val) {
                        d.Refresh();
                    };
                    tss.domObs.WhenMounted(d.Container, function () {
                        o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$ObserveFutureChanges"](DoRefresh);
                        o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$ObserveFutureChanges"](DoRefresh);
                        o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$ObserveFutureChanges"](DoRefresh);

                        tss.domObs.WhenRemoved(d.Container, function () {
                            o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$StopObserving"](DoRefresh);
                            o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$StopObserving"](DoRefresh);
                            o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$StopObserving"](DoRefresh);
                        });
                    });



                    return d;
                },
                Observe$4: function (T1, T2, T3, T4, o1, o2, o3, o4, asyncGenerator, loadMessage) {
                    if (loadMessage === void 0) { loadMessage = null; }
                    var DoRefresh = null;
                    var d = tss.DC.Create$1(function () {
                        return asyncGenerator(o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$Value"], o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$Value"], o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$Value"], o4["tss$IOBS$" + H5.getTypeAlias(T4) + "$Value"]);
                    }, loadMessage);
                    DoRefresh = function (val) {
                        d.Refresh();
                    };
                    tss.domObs.WhenMounted(d.Container, function () {
                        o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$ObserveFutureChanges"](DoRefresh);
                        o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$ObserveFutureChanges"](DoRefresh);
                        o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$ObserveFutureChanges"](DoRefresh);
                        o4["tss$IOBS$" + H5.getTypeAlias(T4) + "$ObserveFutureChanges"](DoRefresh);

                        tss.domObs.WhenRemoved(d.Container, function () {
                            o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$StopObserving"](DoRefresh);
                            o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$StopObserving"](DoRefresh);
                            o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$StopObserving"](DoRefresh);
                            o4["tss$IOBS$" + H5.getTypeAlias(T4) + "$StopObserving"](DoRefresh);
                        });
                    });



                    return d;
                },
                Observe$5: function (T1, T2, T3, T4, T5, o1, o2, o3, o4, o5, asyncGenerator, loadMessage) {
                    if (loadMessage === void 0) { loadMessage = null; }
                    var DoRefresh = null;
                    var d = tss.DC.Create$1(function () {
                        return asyncGenerator(o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$Value"], o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$Value"], o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$Value"], o4["tss$IOBS$" + H5.getTypeAlias(T4) + "$Value"], o5["tss$IOBS$" + H5.getTypeAlias(T5) + "$Value"]);
                    }, loadMessage);
                    DoRefresh = function (val) {
                        d.Refresh();
                    };
                    tss.domObs.WhenMounted(d.Container, function () {
                        o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$ObserveFutureChanges"](DoRefresh);
                        o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$ObserveFutureChanges"](DoRefresh);
                        o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$ObserveFutureChanges"](DoRefresh);
                        o4["tss$IOBS$" + H5.getTypeAlias(T4) + "$ObserveFutureChanges"](DoRefresh);
                        o5["tss$IOBS$" + H5.getTypeAlias(T5) + "$ObserveFutureChanges"](DoRefresh);

                        tss.domObs.WhenRemoved(d.Container, function () {
                            o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$StopObserving"](DoRefresh);
                            o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$StopObserving"](DoRefresh);
                            o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$StopObserving"](DoRefresh);
                            o4["tss$IOBS$" + H5.getTypeAlias(T4) + "$StopObserving"](DoRefresh);
                            o5["tss$IOBS$" + H5.getTypeAlias(T5) + "$StopObserving"](DoRefresh);
                        });
                    });



                    return d;
                },
                Observe$6: function (T1, T2, T3, T4, T5, T6, o1, o2, o3, o4, o5, o6, asyncGenerator, loadMessage) {
                    if (loadMessage === void 0) { loadMessage = null; }
                    var DoRefresh = null;
                    var d = tss.DC.Create$1(function () {
                        return asyncGenerator(o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$Value"], o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$Value"], o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$Value"], o4["tss$IOBS$" + H5.getTypeAlias(T4) + "$Value"], o5["tss$IOBS$" + H5.getTypeAlias(T5) + "$Value"], o6["tss$IOBS$" + H5.getTypeAlias(T6) + "$Value"]);
                    }, loadMessage);
                    DoRefresh = function (val) {
                        d.Refresh();
                    };
                    tss.domObs.WhenMounted(d.Container, function () {
                        o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$ObserveFutureChanges"](DoRefresh);
                        o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$ObserveFutureChanges"](DoRefresh);
                        o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$ObserveFutureChanges"](DoRefresh);
                        o4["tss$IOBS$" + H5.getTypeAlias(T4) + "$ObserveFutureChanges"](DoRefresh);
                        o5["tss$IOBS$" + H5.getTypeAlias(T5) + "$ObserveFutureChanges"](DoRefresh);
                        o6["tss$IOBS$" + H5.getTypeAlias(T6) + "$ObserveFutureChanges"](DoRefresh);

                        tss.domObs.WhenRemoved(d.Container, function () {
                            o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$StopObserving"](DoRefresh);
                            o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$StopObserving"](DoRefresh);
                            o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$StopObserving"](DoRefresh);
                            o4["tss$IOBS$" + H5.getTypeAlias(T4) + "$StopObserving"](DoRefresh);
                            o5["tss$IOBS$" + H5.getTypeAlias(T5) + "$StopObserving"](DoRefresh);
                            o6["tss$IOBS$" + H5.getTypeAlias(T6) + "$StopObserving"](DoRefresh);
                        });
                    });



                    return d;
                },
                Observe$7: function (T1, T2, T3, T4, T5, T6, T7, o1, o2, o3, o4, o5, o6, o7, asyncGenerator, loadMessage) {
                    if (loadMessage === void 0) { loadMessage = null; }
                    var DoRefresh = null;
                    var d = tss.DC.Create$1(function () {
                        return asyncGenerator(o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$Value"], o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$Value"], o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$Value"], o4["tss$IOBS$" + H5.getTypeAlias(T4) + "$Value"], o5["tss$IOBS$" + H5.getTypeAlias(T5) + "$Value"], o6["tss$IOBS$" + H5.getTypeAlias(T6) + "$Value"], o7["tss$IOBS$" + H5.getTypeAlias(T7) + "$Value"]);
                    }, loadMessage);
                    DoRefresh = function (val) {
                        d.Refresh();
                    };
                    tss.domObs.WhenMounted(d.Container, function () {
                        o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$ObserveFutureChanges"](DoRefresh);
                        o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$ObserveFutureChanges"](DoRefresh);
                        o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$ObserveFutureChanges"](DoRefresh);
                        o4["tss$IOBS$" + H5.getTypeAlias(T4) + "$ObserveFutureChanges"](DoRefresh);
                        o5["tss$IOBS$" + H5.getTypeAlias(T5) + "$ObserveFutureChanges"](DoRefresh);
                        o6["tss$IOBS$" + H5.getTypeAlias(T6) + "$ObserveFutureChanges"](DoRefresh);
                        o7["tss$IOBS$" + H5.getTypeAlias(T7) + "$ObserveFutureChanges"](DoRefresh);

                        tss.domObs.WhenRemoved(d.Container, function () {
                            o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$StopObserving"](DoRefresh);
                            o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$StopObserving"](DoRefresh);
                            o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$StopObserving"](DoRefresh);
                            o4["tss$IOBS$" + H5.getTypeAlias(T4) + "$StopObserving"](DoRefresh);
                            o5["tss$IOBS$" + H5.getTypeAlias(T5) + "$StopObserving"](DoRefresh);
                            o6["tss$IOBS$" + H5.getTypeAlias(T6) + "$StopObserving"](DoRefresh);
                            o7["tss$IOBS$" + H5.getTypeAlias(T7) + "$StopObserving"](DoRefresh);
                        });
                    });



                    return d;
                },
                Observe$8: function (T1, T2, T3, T4, T5, T6, T7, T8, o1, o2, o3, o4, o5, o6, o7, o8, asyncGenerator, loadMessage) {
                    if (loadMessage === void 0) { loadMessage = null; }
                    var DoRefresh = null;
                    var d = tss.DC.Create$1(function () {
                        return asyncGenerator(o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$Value"], o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$Value"], o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$Value"], o4["tss$IOBS$" + H5.getTypeAlias(T4) + "$Value"], o5["tss$IOBS$" + H5.getTypeAlias(T5) + "$Value"], o6["tss$IOBS$" + H5.getTypeAlias(T6) + "$Value"], o7["tss$IOBS$" + H5.getTypeAlias(T7) + "$Value"], o8["tss$IOBS$" + H5.getTypeAlias(T8) + "$Value"]);
                    }, loadMessage);
                    DoRefresh = function (val) {
                        d.Refresh();
                    };
                    tss.domObs.WhenMounted(d.Container, function () {
                        o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$ObserveFutureChanges"](DoRefresh);
                        o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$ObserveFutureChanges"](DoRefresh);
                        o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$ObserveFutureChanges"](DoRefresh);
                        o4["tss$IOBS$" + H5.getTypeAlias(T4) + "$ObserveFutureChanges"](DoRefresh);
                        o5["tss$IOBS$" + H5.getTypeAlias(T5) + "$ObserveFutureChanges"](DoRefresh);
                        o6["tss$IOBS$" + H5.getTypeAlias(T6) + "$ObserveFutureChanges"](DoRefresh);
                        o7["tss$IOBS$" + H5.getTypeAlias(T7) + "$ObserveFutureChanges"](DoRefresh);
                        o8["tss$IOBS$" + H5.getTypeAlias(T8) + "$ObserveFutureChanges"](DoRefresh);

                        tss.domObs.WhenRemoved(d.Container, function () {
                            o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$StopObserving"](DoRefresh);
                            o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$StopObserving"](DoRefresh);
                            o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$StopObserving"](DoRefresh);
                            o4["tss$IOBS$" + H5.getTypeAlias(T4) + "$StopObserving"](DoRefresh);
                            o5["tss$IOBS$" + H5.getTypeAlias(T5) + "$StopObserving"](DoRefresh);
                            o6["tss$IOBS$" + H5.getTypeAlias(T6) + "$StopObserving"](DoRefresh);
                            o7["tss$IOBS$" + H5.getTypeAlias(T7) + "$StopObserving"](DoRefresh);
                            o8["tss$IOBS$" + H5.getTypeAlias(T8) + "$StopObserving"](DoRefresh);
                        });
                    });



                    return d;
                },
                Observe$9: function (T1, T2, T3, T4, T5, T6, T7, T8, T9, o1, o2, o3, o4, o5, o6, o7, o8, o9, asyncGenerator, loadMessage) {
                    if (loadMessage === void 0) { loadMessage = null; }
                    var DoRefresh = null;
                    var d = tss.DC.Create$1(function () {
                        return asyncGenerator(o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$Value"], o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$Value"], o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$Value"], o4["tss$IOBS$" + H5.getTypeAlias(T4) + "$Value"], o5["tss$IOBS$" + H5.getTypeAlias(T5) + "$Value"], o6["tss$IOBS$" + H5.getTypeAlias(T6) + "$Value"], o7["tss$IOBS$" + H5.getTypeAlias(T7) + "$Value"], o8["tss$IOBS$" + H5.getTypeAlias(T8) + "$Value"], o9["tss$IOBS$" + H5.getTypeAlias(T9) + "$Value"]);
                    }, loadMessage);
                    DoRefresh = function (val) {
                        d.Refresh();
                    };
                    tss.domObs.WhenMounted(d.Container, function () {
                        o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$ObserveFutureChanges"](DoRefresh);
                        o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$ObserveFutureChanges"](DoRefresh);
                        o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$ObserveFutureChanges"](DoRefresh);
                        o4["tss$IOBS$" + H5.getTypeAlias(T4) + "$ObserveFutureChanges"](DoRefresh);
                        o5["tss$IOBS$" + H5.getTypeAlias(T5) + "$ObserveFutureChanges"](DoRefresh);
                        o6["tss$IOBS$" + H5.getTypeAlias(T6) + "$ObserveFutureChanges"](DoRefresh);
                        o7["tss$IOBS$" + H5.getTypeAlias(T7) + "$ObserveFutureChanges"](DoRefresh);
                        o8["tss$IOBS$" + H5.getTypeAlias(T8) + "$ObserveFutureChanges"](DoRefresh);
                        o9["tss$IOBS$" + H5.getTypeAlias(T9) + "$ObserveFutureChanges"](DoRefresh);

                        tss.domObs.WhenRemoved(d.Container, function () {
                            o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$StopObserving"](DoRefresh);
                            o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$StopObserving"](DoRefresh);
                            o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$StopObserving"](DoRefresh);
                            o4["tss$IOBS$" + H5.getTypeAlias(T4) + "$StopObserving"](DoRefresh);
                            o5["tss$IOBS$" + H5.getTypeAlias(T5) + "$StopObserving"](DoRefresh);
                            o6["tss$IOBS$" + H5.getTypeAlias(T6) + "$StopObserving"](DoRefresh);
                            o7["tss$IOBS$" + H5.getTypeAlias(T7) + "$StopObserving"](DoRefresh);
                            o8["tss$IOBS$" + H5.getTypeAlias(T8) + "$StopObserving"](DoRefresh);
                            o9["tss$IOBS$" + H5.getTypeAlias(T9) + "$StopObserving"](DoRefresh);
                        });
                    });



                    return d;
                },
                Observe$1: function (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, asyncGenerator, loadMessage) {
                    if (loadMessage === void 0) { loadMessage = null; }
                    var DoRefresh = null;
                    var d = tss.DC.Create$1(function () {
                        return asyncGenerator(o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$Value"], o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$Value"], o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$Value"], o4["tss$IOBS$" + H5.getTypeAlias(T4) + "$Value"], o5["tss$IOBS$" + H5.getTypeAlias(T5) + "$Value"], o6["tss$IOBS$" + H5.getTypeAlias(T6) + "$Value"], o7["tss$IOBS$" + H5.getTypeAlias(T7) + "$Value"], o8["tss$IOBS$" + H5.getTypeAlias(T8) + "$Value"], o9["tss$IOBS$" + H5.getTypeAlias(T9) + "$Value"], o10["tss$IOBS$" + H5.getTypeAlias(T10) + "$Value"]);
                    }, loadMessage);
                    DoRefresh = function (val) {
                        d.Refresh();
                    };
                    tss.domObs.WhenMounted(d.Container, function () {
                        o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$ObserveFutureChanges"](DoRefresh);
                        o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$ObserveFutureChanges"](DoRefresh);
                        o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$ObserveFutureChanges"](DoRefresh);
                        o4["tss$IOBS$" + H5.getTypeAlias(T4) + "$ObserveFutureChanges"](DoRefresh);
                        o5["tss$IOBS$" + H5.getTypeAlias(T5) + "$ObserveFutureChanges"](DoRefresh);
                        o6["tss$IOBS$" + H5.getTypeAlias(T6) + "$ObserveFutureChanges"](DoRefresh);
                        o7["tss$IOBS$" + H5.getTypeAlias(T7) + "$ObserveFutureChanges"](DoRefresh);
                        o8["tss$IOBS$" + H5.getTypeAlias(T8) + "$ObserveFutureChanges"](DoRefresh);
                        o9["tss$IOBS$" + H5.getTypeAlias(T9) + "$ObserveFutureChanges"](DoRefresh);
                        o10["tss$IOBS$" + H5.getTypeAlias(T10) + "$ObserveFutureChanges"](DoRefresh);

                        tss.domObs.WhenRemoved(d.Container, function () {
                            o1["tss$IOBS$" + H5.getTypeAlias(T1) + "$StopObserving"](DoRefresh);
                            o2["tss$IOBS$" + H5.getTypeAlias(T2) + "$StopObserving"](DoRefresh);
                            o3["tss$IOBS$" + H5.getTypeAlias(T3) + "$StopObserving"](DoRefresh);
                            o4["tss$IOBS$" + H5.getTypeAlias(T4) + "$StopObserving"](DoRefresh);
                            o5["tss$IOBS$" + H5.getTypeAlias(T5) + "$StopObserving"](DoRefresh);
                            o6["tss$IOBS$" + H5.getTypeAlias(T6) + "$StopObserving"](DoRefresh);
                            o7["tss$IOBS$" + H5.getTypeAlias(T7) + "$StopObserving"](DoRefresh);
                            o8["tss$IOBS$" + H5.getTypeAlias(T8) + "$StopObserving"](DoRefresh);
                            o9["tss$IOBS$" + H5.getTypeAlias(T9) + "$StopObserving"](DoRefresh);
                            o10["tss$IOBS$" + H5.getTypeAlias(T10) + "$StopObserving"](DoRefresh);
                        });
                    });



                    return d;
                }
            }
        },
        fields: {
            _asyncGenerator: null,
            _defaultLoadingMessageIfAny: null,
            _needsRefresh: false,
            _waitForComponentToBeMountedBeforeFullyInitiatingRender: false,
            _renderHasBeenCalled: false,
            _refreshTimeout: 0,
            _delayInMs: 0,
            id: 0,
            _whenUnmounted: null,
            Container: null
        },
        alias: [
            "Refresh", "tss$IDefer$Refresh",
            "Debounce", "tss$IDefer$Debounce",
            "DoNotWaitForComponentMountingBeforeRendering", "tss$IDefer$DoNotWaitForComponentMountingBeforeRendering",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            init: function () {
                this._delayInMs = 16;
                this.id = 0;
            },
            ctor: function (asyncGenerator, loadMessage, defaultLoadingMessageIfAny) {
                this.$initialize();
                if (loadMessage == null) {
                    throw new System.ArgumentNullException.$ctor1("loadMessage");
                }

                this._asyncGenerator = asyncGenerator || (function () {
                    throw new System.ArgumentNullException.$ctor1("asyncGenerator");
                })();
                this._defaultLoadingMessageIfAny = defaultLoadingMessageIfAny;
                this._needsRefresh = true;
                this._waitForComponentToBeMountedBeforeFullyInitiatingRender = true;
                this._renderHasBeenCalled = false;
                this.Container = tss.UI.DIV([loadMessage.tss$IC$Render()]);
            }
        },
        methods: {
            Refresh: function () {
                this._needsRefresh = true;
                window.clearTimeout(this._refreshTimeout);
                this._refreshTimeout = window.setTimeout(H5.fn.bind(this, function (t) {
                    this.TriggerRefresh();
                }), this._delayInMs);
            },
            
            Debounce: function (milliseconds) {
                if (this._delayInMs <= 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("milliseconds", "must be a positive value");
                }

                this._delayInMs = milliseconds;
                return this;
            },
            /**
             * By default, the component will generate an empty container and only start to initiate the data retrieval and full rendering process when it is mounted in the DOM (so that things like height calculations may be performed accurately, which require that
             the component exist in its expected location in the DOM) but this can be expensive if rendering many items. If it is known that the component is immediately going to be mounted then this method may be called and the DomObserver.WhenMounted logic will
             be bypassed and replaced with a simple setTimeout of very short duration (to allow the immediate rendering of the element to take place).
             *
             * @instance
             * @public
             * @this tss.DC
             * @memberof tss.DC
             * @return  {tss.IDefer}
             */
            DoNotWaitForComponentMountingBeforeRendering: function () {
                this._waitForComponentToBeMountedBeforeFullyInitiatingRender = false;
                return this;
            },
            Render: function () {
                if (!this._renderHasBeenCalled) {
                    if (this._waitForComponentToBeMountedBeforeFullyInitiatingRender) {
                        tss.domObs.WhenMounted(this.Container, H5.fn.cacheBind(this, this.TriggerRefresh));
                    } else {
                        setTimeout(H5.fn.bind(this, function (_) {
                            this.TriggerRefresh();
                        }), 1);
                    }
                    this._renderHasBeenCalled = true;
                }
                return this.Container;
            },
            TriggerRefresh: function () {
                if (!this._needsRefresh) {
                    return;
                }

                this._needsRefresh = false;

                window.setTimeout(H5.fn.bind(this, function (_) {
                    if (H5.is(this._defaultLoadingMessageIfAny, System.Object)) {
                        this._defaultLoadingMessageIfAny.Text = "loading...";
                    }
                }), 1000);

                var container = tss.ScrollBar.GetCorrectContainer(this.Container);

                this.id = (this.id + 1) | 0;

                var currentID = this.id;

                tss.tX.fireAndForget(this._asyncGenerator().continueWith(H5.fn.bind(this, function (r) {
                    if (currentID === this.id) {
                        this._defaultLoadingMessageIfAny = null;
                        tss.UI.ClearChildren(container);
                        if (r.isCompleted()) {
                            if (H5.is(r.getResult(), System.Object)) {
                                container.appendChild(r.getResult().tss$IC$Render());
                            }
                        } else {
                            container.appendChild(tss.txtX.Danger(tss.txt, tss.UI.TextBlock("Error rendering async element")));
                            container.appendChild(tss.ITFX.XSmall(tss.txt, tss.UI.TextBlock(H5.toString(r.getException()))));
                        }
                    }
                })));
            }
        }
    });

    H5.define("tss.DetailsListColumn", {
        inherits: [tss.IDetailsListColumn],
        fields: {
            _onColumnClick: null,
            InnerElement: null,
            SortingKey: null,
            Title: null,
            Width: null,
            MaxWidth: null,
            IsRowHeader: false,
            EnableColumnSorting: false,
            EnableOnColumnClickEvent: false
        },
        alias: [
            "SortingKey", "tss$IDetailsListColumn$SortingKey",
            "Width", "tss$IDetailsListColumn$Width",
            "MaxWidth", "tss$IDetailsListColumn$MaxWidth",
            "IsRowHeader", "tss$IDetailsListColumn$IsRowHeader",
            "EnableColumnSorting", "tss$IDetailsListColumn$EnableColumnSorting",
            "EnableOnColumnClickEvent", "tss$IDetailsListColumn$EnableOnColumnClickEvent",
            "OnColumnClick", "tss$IDetailsListColumn$OnColumnClick",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            ctor: function (title, width, maxWidth, isRowHeader, enableColumnSorting, sortingKey, onColumnClick) {
                if (isRowHeader === void 0) { isRowHeader = false; }
                if (enableColumnSorting === void 0) { enableColumnSorting = false; }
                if (sortingKey === void 0) { sortingKey = null; }
                if (onColumnClick === void 0) { onColumnClick = null; }
                var $t;

                this.$initialize();
                if (System.String.isNullOrWhiteSpace(title)) {
                    throw new System.ArgumentException.$ctor1("title");
                }

                if (enableColumnSorting && System.String.isNullOrWhiteSpace(sortingKey)) {
                    throw new System.ArgumentException.$ctor1("sortingKey");
                }

                this.Width = width || (function () {
                    throw new System.ArgumentNullException.$ctor1("width");
                })();
                this.MaxWidth = maxWidth;
                this.SortingKey = ($t = sortingKey, $t != null ? $t : "");
                this.Title = title;
                this.IsRowHeader = isRowHeader;
                this.EnableColumnSorting = enableColumnSorting;

                if (!H5.staticEquals(onColumnClick, null)) {
                    this._onColumnClick = onColumnClick;
                    this.EnableOnColumnClickEvent = true;
                }

                this.InnerElement = tss.ITFX.SemiBold(tss.txt, tss.ITFX.Regular(tss.txt, tss.UI.TextBlock(this.Title))).Render();
            }
        },
        methods: {
            OnColumnClick: function () {
                !H5.staticEquals(this._onColumnClick, null) ? this._onColumnClick() : null;
            },
            Render: function () {
                return this.InnerElement;
            }
        }
    });

    H5.define("tss.DetailsListIconColumn", {
        inherits: [tss.IDetailsListColumn],
        fields: {
            _onColumnClick: null,
            InnerElement: null,
            SortingKey: null,
            Icon: null,
            Width: null,
            MaxWidth: null,
            IconWeight: "la",
            EnableColumnSorting: false,
            EnableOnColumnClickEvent: false
        },
        props: {
            IsRowHeader: {
                get: function () {
                    return false;
                }
            }
        },
        alias: [
            "SortingKey", "tss$IDetailsListColumn$SortingKey",
            "Width", "tss$IDetailsListColumn$Width",
            "MaxWidth", "tss$IDetailsListColumn$MaxWidth",
            "IsRowHeader", "tss$IDetailsListColumn$IsRowHeader",
            "EnableColumnSorting", "tss$IDetailsListColumn$EnableColumnSorting",
            "EnableOnColumnClickEvent", "tss$IDetailsListColumn$EnableOnColumnClickEvent",
            "OnColumnClick", "tss$IDetailsListColumn$OnColumnClick",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            ctor: function (icon, width, maxWidth, enableColumnSorting, sortingKey, onColumnClick) {
                if (enableColumnSorting === void 0) { enableColumnSorting = false; }
                if (sortingKey === void 0) { sortingKey = null; }
                if (onColumnClick === void 0) { onColumnClick = null; }
                var $t;

                this.$initialize();
                if (enableColumnSorting && System.String.isNullOrWhiteSpace(sortingKey)) {
                    throw new System.ArgumentException.$ctor1("sortingKey");
                }

                this.Icon = icon;
                this.Width = width || (function () {
                    throw new System.ArgumentNullException.$ctor1("width");
                })();
                this.MaxWidth = maxWidth;
                this.SortingKey = ($t = sortingKey, $t != null ? $t : "");
                this.EnableColumnSorting = enableColumnSorting;

                if (!H5.staticEquals(onColumnClick, null)) {
                    this._onColumnClick = onColumnClick;
                    this.EnableOnColumnClickEvent = true;
                }

                this.InnerElement = tss.UI.Div$2(tss.UI._()).appendChild(this.Icon.Render());
            }
        },
        methods: {
            OnColumnClick: function () {
                !H5.staticEquals(this._onColumnClick, null) ? this._onColumnClick() : null;
            },
            Render: function () {
                return this.InnerElement;
            }
        }
    });

    H5.define("tss.Grid", {
        inherits: function () { return [tss.ICBTTC(tss.Grid,tss.IC),tss.IHBG,tss.IHMP,tss.ISCS]; },
        statics: {
            methods: {
                GetItem: function (component, forceAdd) {
                    if (forceAdd === void 0) { forceAdd = false; }
                    var item = null;

                    if (component.hasOwnProperty("GridItem")) {
                        item = component.GridItem;
                    }

                    if (item == null) {
                        var rendered = component.tss$IC$Render();

                        if (forceAdd || (H5.is(rendered.parentElement, System.Object) && rendered.parentElement.classList.contains("tss-stack"))) {
                            item = tss.UI.Div(tss.UI._$2("tss-stack-item", void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, function (s) {
                                s.alignSelf = "auto";
                                s.width = "auto";
                                s.height = "auto";
                                s.flexShrink = "1";
                            }), component.tss$IC$Render());

                            component.GridItem = item;

                            if (forceAdd) {
                                tss.Grid.CopyStylesDefinedWithExtension(rendered, item);
                            }

                        } else {
                            item = rendered;
                        }
                    }
                    return item;
                },
                CopyStylesDefinedWithExtension: function (from, to) {
                    var has = null;
                    tss.S.CopyStylesDefinedWithExtension(from, to);

                    var fs = from.style;
                    var ts = to.style;


                    has = function (att) {
                        var ha = from.hasAttribute(att);
                        if (ha) {
                            from.removeAttribute(att);
                        }

                        return ha;
                    };

                    if (has("tss-grd-c")) {
                        ts.gridColumn = fs.gridColumn;
                        fs.gridColumn = "";
                    }

                    if (has("tss-grd-r")) {
                        ts.gridRow = fs.gridRow;
                        fs.gridRow = "";
                    }
                },
                SetGridColumn: function (component, start, end) {
                    var item = { };
                    var remember = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), item, remember);
                    item.v.style.gridColumn = System.String.format("{0} / {1}", H5.box(start, System.Int32), H5.box(end, System.Int32));
                    if (remember.v) {
                        item.v.setAttribute("tss-grd-c", "");
                    }
                },
                SetGridRow: function (component, start, end) {
                    var item = { };
                    var remember = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), item, remember);
                    item.v.style.gridRow = System.String.format("{0} / {1}", H5.box(start, System.Int32), H5.box(end, System.Int32));
                    if (remember.v) {
                        item.v.setAttribute("tss-grd-r", "");
                    }
                }
            }
        },
        fields: {
            _grid: null
        },
        props: {
            Background: {
                get: function () {
                    return this._grid.style.background;
                },
                set: function (value) {
                    this._grid.style.background = value;
                }
            },
            Margin: {
                get: function () {
                    return this._grid.style.margin;
                },
                set: function (value) {
                    this._grid.style.margin = value;
                }
            },
            Padding: {
                get: function () {
                    return this._grid.style.padding;
                },
                set: function (value) {
                    this._grid.style.padding = value;
                }
            },
            StylingContainer: {
                get: function () {
                    return this._grid;
                }
            },
            PropagateToStackItemParent: {
                get: function () {
                    return false;
                }
            }
        },
        alias: [
            "Background", "tss$IHBG$Background",
            "Margin", "tss$IHMP$Margin",
            "Padding", "tss$IHMP$Padding",
            "StylingContainer", "tss$ISCS$StylingContainer",
            "PropagateToStackItemParent", "tss$ISCS$PropagateToStackItemParent",
            "Add", "tss$ICBT$tss$IC$Add",
            "Clear", "tss$ICBT$tss$IC$Clear",
            "Replace", "tss$ICBT$tss$IC$Replace",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            ctor: function (columns) {
                if (columns === void 0) { columns = []; }

                this.$initialize();
                this._grid = tss.UI.Div$2(tss.UI._$1("tss-grid").WithRole("grid"));
                this.JustifyContent("flex-start");

                if (H5.is(columns, System.Object) && System.Linq.Enumerable.from(columns, tss.us).any(function (c) {
                        return H5.is(c, System.Object);
                    })) {
                    this._grid.style.gridTemplateColumns = H5.toArray(System.Linq.Enumerable.from(columns, tss.us).where(function (c) {
                                return H5.is(c, System.Object);
                            }).select(function (c) {
                            return c.toString();
                        })).join(" ");
                } else {
                    this._grid.style.gridTemplateColumns = "100%";
                }
            },
            $ctor1: function (columns, rows) {
                this.$initialize();
                this._grid = tss.UI.Div$2(tss.UI._$1("tss-grid").WithRole("grid"));
                this.JustifyContent("flex-start");

                if (H5.is(columns, System.Object) && System.Linq.Enumerable.from(columns, tss.us).any(function (c) {
                        return H5.is(c, System.Object);
                    })) {
                    this._grid.style.gridTemplateColumns = H5.toArray(System.Linq.Enumerable.from(columns, tss.us).where(function (c) {
                                return H5.is(c, System.Object);
                            }).select(function (c) {
                            return c.toString();
                        })).join(" ");
                } else {
                    this._grid.style.gridTemplateColumns = "100%";
                }

                if (H5.is(rows, System.Object) && System.Linq.Enumerable.from(rows, tss.us).any(function (c) {
                        return H5.is(c, System.Object);
                    })) {
                    this._grid.style.gridTemplateRows = H5.toArray(System.Linq.Enumerable.from(rows, tss.us).where(function (c) {
                                return H5.is(c, System.Object);
                            }).select(function (c) {
                            return c.toString();
                        })).join(" ");
                } else {
                    this._grid.style.gridTemplateRows = "100%";
                }
            }
        },
        methods: {
            Add: function (component) {
                this._grid.appendChild(tss.Grid.GetItem(component, true));
            },
            /**
             * Sets the align-items css property for this stack
             *
             * @instance
             * @public
             * @this tss.Grid
             * @memberof tss.Grid
             * @param   {tss.ItemAlign}    align
             * @return  {tss.Grid}
             */
            AlignItems: function (align) {
                this._grid.style.alignItems = System.Enum.toString(tss.ItemAlign, align);
                return this;
            },
            /**
             * Sets the align-items css property for this stack
             *
             * @instance
             * @public
             * @this tss.Grid
             * @memberof tss.Grid
             * @param   {tss.ItemAlign}    align
             * @return  {tss.Grid}
             */
            AlignContent: function (align) {
                this._grid.style.alignContent = System.Enum.toString(tss.ItemAlign, align);
                return this;
            },
            /**
             * Sets the justify-content css property for this stack
             *
             * @instance
             * @public
             * @this tss.Grid
             * @memberof tss.Grid
             * @param   {tss.ItemJustify}    justify
             * @return  {tss.Grid}
             */
            JustifyContent: function (justify) {
                this._grid.style.justifyContent = System.Enum.toString(tss.ItemJustify, justify);
                return this;
            },
            /**
             * Sets the justify-content css property for this stack
             *
             * @instance
             * @public
             * @this tss.Grid
             * @memberof tss.Grid
             * @param   {tss.ItemJustify}    justify
             * @return  {tss.Grid}
             */
            JustifyItems: function (justify) {
                this._grid.style.justifyItems = System.Enum.toString(tss.ItemJustify, justify);
                return this;
            },
            /**
             * Make this grid relative (i.e. position:relative)
             *
             * @instance
             * @public
             * @this tss.Grid
             * @memberof tss.Grid
             * @return  {tss.Grid}
             */
            Relative: function () {
                this._grid.classList.add("tss-relative");
                return this;
            },
            /**
             * Sets the align-items css property for this grid to 'center'
             *
             * @instance
             * @public
             * @this tss.Grid
             * @memberof tss.Grid
             * @return  {tss.Grid}
             */
            AlignItemsCenter: function () {
                return this.AlignItems("center");
            },
            Gap: function (gapSize) {
                this._grid.style.gap = gapSize.toString();
                return this;
            },
            RowGap: function (gapSize) {
                this._grid.style.rowGap = gapSize.toString();
                return this;
            },
            ColumnGap: function (gapSize) {
                this._grid.style.columnGap = gapSize.toString();
                return this;
            },
            FlowColumn: function () {
                this._grid.style.gridAutoFlow = "column";
                return this;
            },
            Clear: function () {
                tss.UI.ClearChildren(this._grid);
            },
            Replace: function (newComponent, oldComponent) {
                this._grid.replaceChild(tss.Grid.GetItem(newComponent), tss.Grid.GetItem(oldComponent));
            },
            Remove: function (component) {
                this._grid.removeChild(tss.Grid.GetItem(component));
            },
            Render: function () {
                return this._grid;
            }
        }
    });

    H5.define("tss.Image", {
        inherits: function () { return [tss.CB(tss.Image,HTMLImageElement),tss.ISCS,tss.IHBG]; },
        fields: {
            PropagateToStackItemParent: false
        },
        props: {
            StylingContainer: {
                get: function () {
                    return this.InnerElement;
                }
            },
            Source: {
                get: function () {
                    return this.InnerElement.src;
                },
                set: function (value) {
                    this.InnerElement.src = value;
                }
            },
            Cursor: {
                get: function () {
                    return this.InnerElement.style.cursor;
                },
                set: function (value) {
                    this.InnerElement.style.cursor = value;
                }
            },
            Background: {
                get: function () {
                    return this.InnerElement.style.background;
                },
                set: function (value) {
                    this.InnerElement.style.background = value;
                }
            }
        },
        alias: [
            "StylingContainer", "tss$ISCS$StylingContainer",
            "PropagateToStackItemParent", "tss$ISCS$PropagateToStackItemParent",
            "Render", "tss$IC$Render",
            "Background", "tss$IHBG$Background"
        ],
        ctors: {
            ctor: function (source, fallback) {
                if (fallback === void 0) { fallback = null; }

                this.$initialize();
                tss.CB(tss.Image,HTMLImageElement).ctor.call(this);
                if (!System.String.isNullOrEmpty(fallback)) {
                    this.InnerElement = tss.UI.Image(tss.UI._$2("tss-image", void 0, fallback, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0));

                    this.InnerElement.onerror = H5.fn.bind(this, function (_) {
                        if (!H5.rE(this.InnerElement.src, fallback)) {
                            this.InnerElement.src = fallback;
                        }

                    });

                    this.InnerElement.src = source;
                } else {
                    this.InnerElement = tss.UI.Image(tss.UI._$2("tss-image", void 0, source, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0));
                }

                this.PropagateToStackItemParent = true;
                this.AttachClick();
                this.AttachContextMenu();
            }
        },
        methods: {
            Render: function () {
                return this.InnerElement;
            },
            Position: function (objectPosition) {
                this.InnerElement.style.objectPosition = objectPosition;
                return this;
            },
            Contain: function () {
                this.InnerElement.style.objectFit = "contain";
                return this;
            },
            Cover: function () {
                this.InnerElement.style.objectFit = "cover";
                return this;
            },
            Fill: function () {
                this.InnerElement.style.objectFit = "fill";
                return this;
            },
            NoFit: function () {
                this.InnerElement.style.objectFit = "none";
                return this;
            },
            ScaleDown: function () {
                this.InnerElement.style.objectFit = "scale-down";
                return this;
            },
            Circle: function () {
                this.InnerElement.style.borderRadius = "50%";
                this.PropagateToStackItemParent = false;
                return this;
            },
            Circle$1: function (pixels) {
                this.InnerElement.style.borderRadius = System.String.format("{0}px", [H5.box(pixels, System.Int32)]);
                return this;
            }
        }
    });

    H5.define("tss.ImageIcon", {
        inherits: [Tesserae.ISidebarIcon],
        fields: {
            _img: null
        },
        props: {
            Source: {
                get: function () {
                    return this._img.src;
                },
                set: function (value) {
                    this._img.src = value;
                }
            }
        },
        alias: [
            "Render", "tss$IC$Render",
            "Clone", "Tesserae$ISidebarIcon$Clone"
        ],
        ctors: {
            ctor: function (source) {
                this.$initialize();
                this._img = tss.UI.Image(tss.UI._$2("tss-image", void 0, source, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0));
            }
        },
        methods: {
            Render: function () {
                return this._img;
            },
            Clone: function () {
                return new tss.ImageIcon(this._img.src);
            }
        }
    });

    H5.define("tss.txt", {
        inherits: function () { return [tss.CB(tss.txt,HTMLElement),tss.ITF,tss.IHBG,tss.IHFG,tss.ICW]; },
        props: {
            Background: {
                get: function () {
                    return this.InnerElement.style.background;
                },
                set: function (value) {
                    this.InnerElement.style.background = value;
                }
            },
            Foreground: {
                get: function () {
                    return this.GetTarget().style.color;
                },
                set: function (value) {
                    this.GetTarget().style.color = value;
                }
            },
            IsEnabled: {
                get: function () {
                    return !this.InnerElement.classList.contains("tss-disabled");
                },
                set: function (value) {
                    if (value) {
                        this.InnerElement.classList.remove("tss-disabled");
                    } else {
                        this.InnerElement.classList.add("tss-disabled");
                    }
                }
            },
            IsSelectable: {
                get: function () {
                    return !H5.rE(this.GetTarget().style.userSelect, "none");
                },
                set: function (value) {
                    this.GetTarget().style.userSelect = value ? "" : "none";
                }
            },
            Text: {
                get: function () {
                    return this.GetTarget().innerText;
                },
                set: function (value) {
                    this.GetTarget().innerText = value;
                }
            },
            HTML: {
                get: function () {
                    return this.GetTarget().innerHTML;
                },
                set: function (value) {
                    this.GetTarget().innerHTML = value;
                }
            },
            Title: {
                get: function () {
                    return this.GetTarget().title;
                },
                set: function (value) {
                    this.GetTarget().title = value;
                }
            },
            Size: {
                get: function () {
                    return tss.ITFX.FromClassList$1(this.GetTarget(), "tss-fontsize-small");
                },
                set: function (value) {
                    var el = this.GetTarget();
                    el.classList.remove(System.Enum.toString(tss.TS, this.Size));
                    el.classList.add(System.Enum.toString(tss.TS, value));
                }
            },
            Weight: {
                get: function () {
                    return tss.ITFX.FromClassList$2(this.GetTarget(), "tss-fontweight-regular");
                },
                set: function (value) {
                    var el = this.GetTarget();
                    el.classList.remove(System.Enum.toString(tss.TW, this.Weight));
                    el.classList.add(System.Enum.toString(tss.TW, value));
                }
            },
            TextAlign: {
                get: function () {
                    return tss.ITFX.FromClassList(this.GetTarget(), "tss-textalign-left");
                },
                set: function (value) {
                    var el = this.GetTarget();
                    el.classList.remove(System.Enum.toString(tss.TA, this.TextAlign));
                    el.classList.add(System.Enum.toString(tss.TA, value));
                }
            },
            /**
             * Gets or set whenever text block color is primary
             *
             * @instance
             * @public
             * @memberof tss.txt
             * @function IsPrimary
             * @type boolean
             */
            IsPrimary: {
                get: function () {
                    return this.GetTarget().classList.contains("tss-fontcolor-primary");
                },
                set: function (value) {
                    var el = this.GetTarget();
                    if (value) {
                        el.classList.add("tss-fontcolor-primary");
                        el.classList.remove("tss-fontcolor-invalid", "tss-fontcolor-success", "tss-fontcolor-secondary", "tss-fontcolor-danger", "tss-fontcolor-default");
                    } else {
                        el.classList.add("tss-fontcolor-default");
                        el.classList.remove("tss-fontcolor-invalid", "tss-fontcolor-success", "tss-fontcolor-secondary", "tss-fontcolor-danger", "tss-fontcolor-primary");
                    }
                }
            },
            /**
             * Gets or set whenever text block color is primary
             *
             * @instance
             * @public
             * @memberof tss.txt
             * @function IsSecondary
             * @type boolean
             */
            IsSecondary: {
                get: function () {
                    return this.GetTarget().classList.contains("tss-fontcolor-secondary");
                },
                set: function (value) {
                    var el = this.GetTarget();
                    if (value) {
                        el.classList.add("tss-fontcolor-secondary");
                        el.classList.remove("tss-fontcolor-invalid", "tss-fontcolor-success", "tss-fontcolor-primary", "tss-fontcolor-danger", "tss-fontcolor-default");
                    } else {
                        el.classList.add("tss-fontcolor-default");
                        el.classList.remove("tss-fontcolor-invalid", "tss-fontcolor-success", "tss-fontcolor-secondary", "tss-fontcolor-danger", "tss-fontcolor-primary");
                    }
                }
            },
            /**
             * Gets or set whenever text block color is success
             *
             * @instance
             * @public
             * @memberof tss.txt
             * @function IsSuccess
             * @type boolean
             */
            IsSuccess: {
                get: function () {
                    return this.GetTarget().classList.contains("tss-fontcolor-success");
                },
                set: function (value) {
                    var el = this.GetTarget();
                    if (value) {
                        el.classList.add("tss-fontcolor-success");
                        el.classList.remove("tss-fontcolor-invalid", "tss-fontcolor-secondary", "tss-fontcolor-primary", "tss-fontcolor-danger", "tss-fontcolor-default");
                    } else {
                        el.classList.add("tss-fontcolor-default");
                        el.classList.remove("tss-fontcolor-invalid", "tss-fontcolor-success", "tss-fontcolor-secondary", "tss-fontcolor-danger", "tss-fontcolor-primary");
                    }
                }
            },
            /**
             * Gets or set whenever text block color is danger
             *
             * @instance
             * @public
             * @memberof tss.txt
             * @function IsDanger
             * @type boolean
             */
            IsDanger: {
                get: function () {
                    return this.GetTarget().classList.contains("tss-fontcolor-danger");
                },
                set: function (value) {
                    var el = this.GetTarget();
                    if (value) {
                        el.classList.add("tss-fontcolor-danger");
                        el.classList.remove("tss-fontcolor-invalid", "tss-fontcolor-secondary", "tss-fontcolor-primary", "tss-fontcolor-success", "tss-fontcolor-default");
                    } else {
                        el.classList.add("tss-fontcolor-default");
                        el.classList.remove("tss-fontcolor-invalid", "tss-fontcolor-success", "tss-fontcolor-secondary", "tss-fontcolor-danger", "tss-fontcolor-primary");
                    }
                }
            },
            /**
             * Gets or set whenever text block color is invalid
             *
             * @instance
             * @public
             * @memberof tss.txt
             * @function IsInvalid
             * @type boolean
             */
            IsInvalid: {
                get: function () {
                    return this.GetTarget().classList.contains("tss-fontcolor-invalid");
                },
                set: function (value) {
                    var el = this.GetTarget();
                    if (value) {
                        el.classList.add("tss-fontcolor-invalid");
                    } else {
                        el.classList.remove("tss-fontcolor-invalid");
                    }
                }
            },
            IsRequired: {
                get: function () {
                    return this.GetTarget().classList.contains("tss-required");
                },
                set: function (value) {
                    var el = this.GetTarget();
                    if (value) {
                        el.classList.add("tss-required");
                    } else {
                        el.classList.remove("tss-required");
                    }
                }
            },
            CanWrap: {
                get: function () {
                    return !this.GetTarget().classList.contains("tss-text-nowrap");
                },
                set: function (value) {
                    tss.UI.UpdateClassIfNot(this.GetTarget(), value, "tss-text-nowrap");
                }
            },
            EnableEllipsis: {
                get: function () {
                    return !this.GetTarget().classList.contains("tss-text-ellipsis");
                },
                set: function (value) {
                    tss.UI.UpdateClassIf(this.GetTarget(), value, "tss-text-ellipsis");
                }
            },
            EnableBreakSpaces: {
                get: function () {
                    return !this.GetTarget().classList.contains("tss-text-breakspaces");
                },
                set: function (value) {
                    tss.UI.UpdateClassIf(this.GetTarget(), value, "tss-text-breakspaces");
                }
            },
            Cursor: {
                get: function () {
                    return this.GetTarget().style.cursor;
                },
                set: function (value) {
                    this.GetTarget().style.cursor = value;
                }
            }
        },
        alias: [
            "Background", "tss$IHBG$Background",
            "Foreground", "tss$IHFG$Foreground",
            "Size", "tss$ITF$Size",
            "Weight", "tss$ITF$Weight",
            "TextAlign", "tss$ITF$TextAlign",
            "CanWrap", "tss$ICW$CanWrap",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            $ctor1: function (text, treatAsHTML, selectable, textSize, textWeight, afterText) {
                if (text === void 0) { text = ""; }
                if (treatAsHTML === void 0) { treatAsHTML = false; }
                if (selectable === void 0) { selectable = false; }
                if (textSize === void 0) { textSize = "tss-fontsize-small"; }
                if (textWeight === void 0) { textWeight = "tss-fontweight-regular"; }
                if (afterText === void 0) { afterText = null; }
                var $t;

                this.$initialize();
                tss.CB(tss.txt,HTMLElement).ctor.call(this);
                text = ($t = text, $t != null ? $t : "");

                if (!System.String.isNullOrEmpty(afterText)) {
                    var first = tss.UI.Div$2(tss.UI._$1("tss-text-ellipsis"));
                    var second = tss.UI.Div$2(tss.UI._$1("tss-text-nowrap"));
                    this.InnerElement = tss.UI.Div$1(tss.UI._$1("tss-textblock tss-fontcolor-default tss-textblock-with-after " + (System.Enum.toString(tss.TS, textSize) || "") + " " + (System.Enum.toString(tss.TW, textWeight) || "")), first, second);
                    if (treatAsHTML) {
                        first.innerHTML = text;
                        second.innerHTML = afterText;
                    } else {
                        first.textContent = text;
                        second.textContent = afterText;
                    }
                } else {
                    this.InnerElement = tss.UI.Div$2(tss.UI._$1("tss-textblock tss-fontcolor-default " + (System.Enum.toString(tss.TS, textSize) || "") + " " + (System.Enum.toString(tss.TW, textWeight) || "")));
                    if (treatAsHTML) {
                        this.InnerElement.innerHTML = text;
                    } else {
                        this.InnerElement.textContent = text;
                    }
                }



                if (selectable) {
                    this.InnerElement.classList.add("tss-textblock-selectable");
                }

                this.AttachClick();
                this.AttachContextMenu();
            },
            ctor: function (text) {
                var $t;
                this.$initialize();
                tss.CB(tss.txt,HTMLElement).ctor.call(this);
                text = ($t = text, $t != null ? $t : "");
                this.InnerElement = tss.UI.Div$2(tss.UI._$1("tss-textblock tss-fontcolor-default " + (System.Enum.toString(tss.TS, "tss-fontsize-small") || "") + " " + (System.Enum.toString(tss.TW, "tss-fontweight-regular") || "")));
                this.InnerElement.textContent = text;
                this.AttachClick();
                this.AttachContextMenu();
            }
        },
        methods: {
            GetTarget: function () {
                if (this.InnerElement.classList.contains("tss-label")) {
                    return this.InnerElement.firstElementChild;
                }
                return this.InnerElement;
            },
            Render: function () {
                return this.InnerElement;
            }
        }
    });

    H5.define("tss.Masonry", {
        inherits: function () { return [tss.ICBTTC(tss.Masonry,tss.IC),tss.IHBG,tss.IHMP,tss.ISCS]; },
        statics: {
            methods: {
                CopyStylesDefinedWithExtension: function (from, to) {
                    var has = null;
                    tss.S.CopyStylesDefinedWithExtension(from, to);

                    var fs = from.style;
                    var ts = to.style;
                    has = function (att) {
                        var ha = from.hasAttribute(att);
                        if (ha) {
                            from.removeAttribute(att);
                        }

                        return ha;
                    };


                }
            }
        },
        fields: {
            _percent: null,
            _masonry: null,
            _masonryObj: null,
            _gutter: 0,
            _timeout: 0
        },
        props: {
            Background: {
                get: function () {
                    return this._masonry.style.background;
                },
                set: function (value) {
                    this._masonry.style.background = value;
                }
            },
            Margin: {
                get: function () {
                    return this._masonry.style.margin;
                },
                set: function (value) {
                    this._masonry.style.margin = value;
                }
            },
            Padding: {
                get: function () {
                    return this._masonry.style.padding;
                },
                set: function (value) {
                    this._masonry.style.padding = value;
                }
            },
            StylingContainer: {
                get: function () {
                    return this._masonry;
                }
            },
            PropagateToStackItemParent: {
                get: function () {
                    return false;
                }
            }
        },
        alias: [
            "Background", "tss$IHBG$Background",
            "Margin", "tss$IHMP$Margin",
            "Padding", "tss$IHMP$Padding",
            "StylingContainer", "tss$ISCS$StylingContainer",
            "PropagateToStackItemParent", "tss$ISCS$PropagateToStackItemParent",
            "Add", "tss$ICBT$tss$IC$Add",
            "Clear", "tss$ICBT$tss$IC$Clear",
            "Replace", "tss$ICBT$tss$IC$Replace",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            ctor: function (columns, gutter) {
                if (gutter === void 0) { gutter = 10; }

                this.$initialize();
                this._percent = System.String.format("calc({0:0.00}% - {1}px)", H5.box((100.0 / columns), System.Single, System.Single.format, System.Single.getHashCode), H5.box(gutter, System.Int32));
                this._masonry = tss.UI.Div$2(tss.UI._$1("tss-masonry"));
                this._masonryObj = new Masonry(this._masonry, { itemSelector: '.tss-masonry-item', columnWidth: '.tss-masonry-item', gutter: gutter, percentPosition: true });
                this._gutter = gutter;
                tss.domObs.WhenMounted(this._masonry, H5.fn.bind(this, function () {
                    this.Layout();
                }));
            }
        },
        methods: {
            Add: function (component) {
                var el = this.GetItem(component, true);
                el.style.marginBottom = this._gutter + "px";
                this._masonry.appendChild(el);
                H5.unbox(this._masonryObj).appended(el);
                this.Layout();
            },
            Layout: function () {
                if (tss.UI.IsMounted(this._masonry)) {
                    window.clearTimeout(this._timeout);
                    this._timeout = window.setTimeout(H5.fn.bind(this, function (_) {
                        H5.unbox(this._masonryObj).layout();
                    }), 16);
                }
            },
            GetItem: function (component, forceAdd) {
                if (forceAdd === void 0) { forceAdd = false; }
                var item = null;

                if (component.hasOwnProperty("MasonryItem")) {
                    item = component.MasonryItem;
                }

                if (item == null) {
                    var rendered = component.tss$IC$Render();

                    if (forceAdd || (H5.is(rendered.parentElement, System.Object))) {
                        item = tss.UI.Div(tss.UI._$2("tss-masonry-item", void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, H5.fn.bind(this, function (s) {
                            s.alignSelf = "auto";
                            s.width = this._percent;
                            s.height = "auto";
                            s.flexShrink = "1";
                        })), component.tss$IC$Render());

                        component.MasonryItem = item;

                        if (forceAdd) {
                            tss.Masonry.CopyStylesDefinedWithExtension(rendered, item);
                        }

                    } else {
                        item = rendered;
                    }
                }
                return item;
            },
            Clear: function () {
                tss.UI.ClearChildren(this._masonry);
                this.Layout();
            },
            Replace: function (newComponent, oldComponent) {
                this._masonry.replaceChild(this.GetItem(newComponent), this.GetItem(oldComponent));
                this.Layout();
            },
            Remove: function (component) {
                H5.unbox(this._masonryObj).remove(this.GetItem(component));
                this.Layout();
            },
            Render: function () {
                return this._masonry;
            }
        }
    });

    H5.define("tss.Nav.NavLink", {
        inherits: function () { return [tss.CB(tss.Nav.NavLink,HTMLLIElement),tss.ICBTTC(tss.Nav.NavLink,tss.Nav.NavLink),tss.ITF,tss.IHBG]; },
        $kind: "nested class",
        fields: {
            _textSpan: null,
            _iconSpan: null,
            _headerDiv: null,
            _childContainer: null,
            _expandButton: null,
            _canSelectAndExpand: false,
            _Level: 0,
            _shouldExpandOnFirstAdd: false,
            _childLinks: null,
            SelectedChild: null
        },
        events: {
            SelectedLink: null,
            ExpandedLink: null,
            InternalSelectedLink: null
        },
        props: {
            /**
             * Gets or sets NavLink text
             *
             * @instance
             * @public
             * @memberof Tesserae.Nav.NavLink
             * @function Text
             * @type string
             */
            Text: {
                get: function () {
                    this.ThrowIfUsingComponent("Text");
                    return this._textSpan != null ? this._textSpan.innerText : null;
                },
                set: function (value) {
                    this.ThrowIfUsingComponent("Text");
                    this._textSpan.innerText = value;
                }
            },
            /**
             * Gets or sets NavLink icon (icon class)
             *
             * @instance
             * @public
             * @memberof Tesserae.Nav.NavLink
             * @function Icon
             * @type string
             */
            Icon: {
                get: function () {
                    this.ThrowIfUsingComponent("Icon");
                    return this._iconSpan != null ? this._iconSpan.className : null;
                },
                set: function (value) {
                    this.ThrowIfUsingComponent("Icon");
                    if (System.String.isNullOrEmpty(value)) {
                        if (this._iconSpan != null) {
                            this._headerDiv.removeChild(this._iconSpan);
                            this._iconSpan = null;
                        }

                        return;
                    }

                    if (this._iconSpan == null) {
                        this._iconSpan = tss.UI.I(tss.UI._());
                        this._headerDiv.insertBefore(this._iconSpan, this._textSpan);
                    }

                    this._iconSpan.className = value;
                }
            },
            IsExpanded: {
                get: function () {
                    return this.InnerElement.classList.contains("tss-expanded");
                },
                set: function (value) {
                    if (value) {
                        if (!this.IsExpanded) {
                            !H5.staticEquals(this.ExpandedLink, null) ? this.ExpandedLink(this) : null;
                            this.ScrollIntoView();
                        }

                        this.InnerElement.classList.add("tss-expanded");
                    } else {
                        this.InnerElement.classList.remove("tss-expanded");
                    }
                }
            },
            IsSelected: {
                get: function () {
                    return this._headerDiv.classList.contains("tss-selected");
                },
                set: function (value) {
                    if (value && !this.IsSelected) {
                        !H5.staticEquals(this.InternalSelectedLink, null) ? this.InternalSelectedLink(this) : null;
                        !H5.staticEquals(this.SelectedLink, null) ? this.SelectedLink(this) : null;
                        this.ScrollIntoView();
                    }

                    this.UpdateSelectedClass(value);
                }
            },
            HasChildren: {
                get: function () {
                    return this._childContainer.hasChildNodes();
                }
            },
            Level: {
                get: function () {
                    return this._Level;
                },
                set: function (value) {
                    var $t;
                    this._Level = value;
                    $t = H5.getEnumerator(this._childLinks);
                    try {
                        while ($t.moveNext()) {
                            var c = $t.Current;
                            c.Level = (this.Level + 1) | 0;
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            },
            Size: {
                get: function () {
                    return tss.ITFX.FromClassList$1(this.InnerElement, "tss-fontsize-small");
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.TS, this.Size));
                    this.InnerElement.classList.add(System.Enum.toString(tss.TS, value));
                }
            },
            Weight: {
                get: function () {
                    return tss.ITFX.FromClassList$2(this.InnerElement, "tss-fontweight-regular");
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.TW, this.Weight));
                    this.InnerElement.classList.add(System.Enum.toString(tss.TW, value));
                }
            },
            TextAlign: {
                get: function () {
                    return tss.ITFX.FromClassList(this.InnerElement, "tss-textalign-left");
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.TA, this.TextAlign));
                    this.InnerElement.classList.add(System.Enum.toString(tss.TA, value));
                }
            },
            Background: {
                get: function () {
                    return this._headerDiv.style.background;
                },
                set: function (value) {
                    this._headerDiv.style.background = value;
                }
            }
        },
        alias: [
            "Size", "tss$ITF$Size",
            "Weight", "tss$ITF$Weight",
            "TextAlign", "tss$ITF$TextAlign",
            "Background", "tss$IHBG$Background",
            "Render", "tss$IC$Render",
            "Add", "tss$ICBT$tss$Nav$NavLink$Add",
            "Clear", "tss$ICBT$tss$Nav$NavLink$Clear",
            "Replace", "tss$ICBT$tss$Nav$NavLink$Replace"
        ],
        ctors: {
            init: function () {
                this._canSelectAndExpand = false;
                this._childLinks = new (System.Collections.Generic.List$1(tss.Nav.NavLink)).ctor();
            },
            ctor: function (text) {
                if (text === void 0) { text = null; }

                this.$initialize();
                tss.CB(tss.Nav.NavLink,HTMLLIElement).ctor.call(this);
                this._textSpan = tss.UI.Span(tss.UI._$2(void 0, void 0, void 0, void 0, void 0, void 0, text, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0));
                this._childContainer = tss.UI.Ul(tss.UI._$1("tss-nav-link-container"));
                this._expandButton = tss.UI.Button(tss.UI._$1("tss-nav-link-button"));
                this._headerDiv = tss.UI.Div$1(tss.UI._$1("tss-nav-link-header"), this._expandButton, this._textSpan);
                this._headerDiv.onclick = H5.fn.combine(this._headerDiv.onclick, H5.fn.cacheBind(this, this.ClickHandler));
                this._expandButton.onclick = H5.fn.combine(this._expandButton.onclick, H5.fn.cacheBind(this, this.ExpandHandler));
                this.InnerElement = tss.UI.Li(tss.UI._$1("tss-nav-link"), [this._headerDiv, this._childContainer]);
                this.Size = "tss-fontsize-small";
                this.Weight = "tss-fontweight-regular";
            },
            $ctor1: function (content) {
                this.$initialize();
                tss.CB(tss.Nav.NavLink,HTMLLIElement).ctor.call(this);
                this._childContainer = tss.UI.Ul(tss.UI._$1("tss-nav-link-container"));
                this._expandButton = tss.UI.Button(tss.UI._$1("tss-nav-link-button"));
                this._headerDiv = tss.UI.Div$1(tss.UI._$1("tss-nav-link-header"), this._expandButton, content.tss$IC$Render());
                this._headerDiv.onclick = H5.fn.combine(this._headerDiv.onclick, H5.fn.cacheBind(this, this.ClickHandler));
                this._expandButton.onclick = H5.fn.combine(this._expandButton.onclick, H5.fn.cacheBind(this, this.ExpandHandler));
                this.InnerElement = tss.UI.Li(tss.UI._$1("tss-nav-link"), [this._headerDiv, this._childContainer]);
                this.Size = "tss-fontsize-small";
                this.Weight = "tss-fontweight-regular";
            }
        },
        methods: {
            ThrowIfUsingComponent: function (method) {
                if (this._textSpan == null) {
                    throw new System.Exception(System.String.format("Not allowed to call {0} when using a custom component for rendering the Navlink", [method]));
                }
            },
            ScrollIntoView: function () {
                tss.domObs.WhenMounted(this.InnerElement, H5.fn.bind(this, function () {
                    this.InnerElement.scrollIntoView({ block: "nearest", inline: "nearest", behavior: "smooth" });
                }));
            },
            UpdateSelectedClass: function (isSelected) {
                if (isSelected) {
                    this._headerDiv.classList.add("tss-selected");
                } else {
                    this._headerDiv.classList.remove("tss-selected");
                }
            },
            Render: function () {
                return this.InnerElement;
            },
            Add: function (component) {
                this._childLinks.add(component);
                tss.ScrollBar.GetCorrectContainer(this._childContainer).appendChild(component.Render());
                this._headerDiv.classList.add("tss-expandable");
                component.Level = (this.Level + 1) | 0;
                component.addInternalSelectedLink(H5.fn.cacheBind(this, this.OnChildSelected));
                if (component.IsSelected) {
                    !H5.staticEquals(this.InternalSelectedLink, null) ? this.InternalSelectedLink(component) : null;

                    if (this.SelectedChild != null) {
                        this.SelectedChild.IsSelected = false;
                    }
                    this.SelectedChild = component;
                }

                if (component.SelectedChild != null) {
                    !H5.staticEquals(this.InternalSelectedLink, null) ? this.InternalSelectedLink(component.SelectedChild) : null;

                    if (this.SelectedChild != null) {
                        this.SelectedChild.IsSelected = false;
                    }
                    this.SelectedChild = component.SelectedChild;
                }

                if (this.HasChildren && this._shouldExpandOnFirstAdd) {
                    this.IsExpanded = true;
                }
            },
            OnChildSelected: function (sender) {
                !H5.staticEquals(this.InternalSelectedLink, null) ? this.InternalSelectedLink(this) : null;
            },
            Clear: function () {
                tss.UI.ClearChildren(tss.ScrollBar.GetCorrectContainer(this._childContainer));
                this._childLinks.clear();
                this._headerDiv.classList.remove("tss-expandable");
            },
            Replace: function (newComponent, oldComponent) {
                tss.ScrollBar.GetCorrectContainer(this._childContainer).replaceChild(newComponent.Render(), oldComponent.Render());
                newComponent.addInternalSelectedLink(H5.fn.cacheBind(this, this.OnChildSelected));
                if (newComponent.IsSelected) {
                    !H5.staticEquals(this.InternalSelectedLink, null) ? this.InternalSelectedLink(newComponent) : null;
                }
            },
            Remove: function (oldComponent) {
                this._childContainer.removeChild(oldComponent.Render());
            },
            InlineContent: function (content, disableMouseEvents) {
                if (disableMouseEvents === void 0) { disableMouseEvents = false; }
                this.Add(new tss.Nav.ComponentInNavLink(content, disableMouseEvents));
                return this;
            },
            Selected: function () {
                this.IsSelected = true;
                return this;
            },
            CanSelectAndExpand: function () {
                this._canSelectAndExpand = true;
                return this;
            },
            SelectedOrExpandedIf: function (shouldSelect) {
                if (shouldSelect) {
                    if (this.HasChildren) {
                        this.IsExpanded = true;

                        if (this._canSelectAndExpand) {
                            this.IsSelected = true;
                        }
                    } else {
                        this.IsSelected = true;
                    }

                    this._shouldExpandOnFirstAdd = true;
                }
                return this;
            },
            Expanded: function () {
                this.IsExpanded = true;
                return this;
            },
            SetText: function (text) {
                this.Text = text;
                return this;
            },
            SetIcon: function (icon) {
                this.Icon = icon;
                return this;
            },
            OnSelected: function (onSelected) {
                this.addSelectedLink(onSelected);
                return this;
            },
            OnExpanded: function (onExpanded) {
                this.addExpandedLink(onExpanded);
                return this;
            },
            Links: function (children) {
                if (children === void 0) { children = []; }
                children.forEach(H5.fn.bind(this, function (x) {
                        this.Add(x);
                    }));
                return this;
            },
            LinksAsync: function (childrenAsync) {
                var alreadyRun = false;
                var dummy = new tss.Nav.NavLink.ctor("loading...");
                this.Add(dummy);
                this.addExpandedLink(H5.fn.bind(this, function (s) {
                    if (!alreadyRun) {
                        alreadyRun = true;
                        tss.tX.fireAndForget(System.Threading.Tasks.Task.run(H5.fn.bind(this, function () {
                            var $s = 0,
                                $t1, 
                                $tr1, 
                                $jff, 
                                $tcs = new H5.TCS(), 
                                $rv, 
                                children, 
                                $ae, 
                                $ab = H5.fn.bind(this, function () {
                                    try {
                                        for (;;) {
                                            $s = H5.STEP([0,1], $s);
                                            switch ($s) {
                                                case 0: {
                                                    $t1 = childrenAsync();
                                                    $s = 1;
                                                    if ($t1.isC()) {
                                                        continue;
                                                    }
                                                    $t1.c($ab);
                                                    return;
                                                }
                                                case 1: {
                                                    $tr1 = $t1.gAR();
                                                    children = $tr1;
                                                    this.Remove(dummy);
                                                    children.forEach(H5.fn.bind(this, function (x) {
                                                        this.Add(x);
                                                    }));
                                                    $tcs.sR(null);
                                                    return;
                                                }
                                                default: {
                                                    $tcs.sR(null);
                                                    return;
                                                }
                                            }
                                        }
                                    } catch($ae1) {
                                        $ae = System.Exception.create($ae1);
                                        $tcs.sE($ae);
                                    }
                                }, arguments);

                            $ab();
                            return $tcs.task;
                        })));
                    }
                }));
                if (this.IsExpanded) {
                    this.ExpandedLink(this);
                }
                return this;
            },
            ClickHandler: function (e) {
                tss.UI.StopEvent(e);
                if (this.HasChildren) {
                    if (this._canSelectAndExpand && !this.IsSelected) {
                        this.IsSelected = true;
                    } else {
                        this.IsExpanded = !this.IsExpanded;
                    }
                } else {
                    this.IsSelected = true;
                }
            },
            ExpandHandler: function (e) {
                if (this.HasChildren) {
                    this.IsExpanded = !this.IsExpanded;
                    tss.UI.StopEvent(e);
                }
            },
            UnselectRecursivelly: function (sender) {
                var $t, $t1;
                if (H5.rE(this, sender)) {
                    $t = H5.getEnumerator(this._childLinks);
                    try {
                        while ($t.moveNext()) {
                            var child = $t.Current;
                            child.UnselectRecursivelly(sender);
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                } else if (!System.Linq.Enumerable.from(this._childLinks, tss.Nav.NavLink).any(function (l) {
                        return l.IsOrHasChild(sender);
                    })) {
                    this.IsSelected = false;

                    $t1 = H5.getEnumerator(this._childLinks);
                    try {
                        while ($t1.moveNext()) {
                            var child1 = $t1.Current;
                            child1.UnselectRecursivelly(sender);
                        }
                    } finally {
                        if (H5.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                }
            },
            IsOrHasChild: function (sender) {
                return H5.rE(this, sender) || System.Linq.Enumerable.from(this._childLinks, tss.Nav.NavLink).any(function (l) {
                        return l.IsOrHasChild(sender);
                    });
            }
        }
    });

    H5.define("tss.SearchBox", {
        inherits: function () { return [tss.CB(tss.SearchBox,HTMLInputElement),tss.ITF,tss.IHBG,tss.ITAB]; },
        fields: {
            _container: null,
            _icon: null,
            _iconContainer: null,
            _paddingContainer: null
        },
        events: {
            Searched: null
        },
        props: {
            TabIndex: {
                set: function (value) {
                    this.InnerElement.tabIndex = value;
                }
            },
            IsEnabled: {
                get: function () {
                    return !this._container.classList.contains("tss-disabled");
                },
                set: function (value) {
                    if (value) {
                        this._container.classList.remove("tss-disabled");
                    } else {
                        this._container.classList.add("tss-disabled");
                    }
                }
            },
            IsUnderlined: {
                get: function () {
                    return this._container.classList.contains("tss-underlined");
                },
                set: function (value) {
                    if (value) {
                        this._container.classList.add("tss-underlined");
                    } else {
                        this._container.classList.remove("tss-underlined");
                    }
                }
            },
            Text: {
                get: function () {
                    return this.InnerElement.value;
                },
                set: function (value) {
                    this.InnerElement.value = value;
                    this.RaiseOnInput(null);
                }
            },
            Placeholder: {
                get: function () {
                    return this.InnerElement.placeholder;
                },
                set: function (value) {
                    this.InnerElement.placeholder = value;
                }
            },
            Icon: {
                get: function () {
                    return this._icon.className;
                },
                set: function (value) {
                    this._icon.className = value;
                }
            },
            IsInvalid: {
                get: function () {
                    return this._container.classList.contains("tss-invalid");
                },
                set: function (value) {
                    if (value) {
                        this._container.classList.add("tss-invalid");
                    } else {
                        this._container.classList.remove("tss-invalid");
                    }
                }
            },
            Size: {
                get: function () {
                    return tss.ITFX.FromClassList$1(this.InnerElement, "tss-fontsize-small");
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.TS, this.Size));
                    this.InnerElement.classList.add(System.Enum.toString(tss.TS, value));
                }
            },
            Weight: {
                get: function () {
                    return tss.ITFX.FromClassList$2(this.InnerElement, "tss-fontweight-regular");
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.TW, this.Weight));
                    this.InnerElement.classList.add(System.Enum.toString(tss.TW, value));
                }
            },
            TextAlign: {
                get: function () {
                    return tss.ITFX.FromClassList(this.InnerElement, "tss-textalign-center");
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.TA, this.TextAlign));
                    this.InnerElement.classList.add(System.Enum.toString(tss.TA, value));
                }
            },
            Background: {
                get: function () {
                    return this._container.style.background;
                },
                set: function (value) {
                    this._container.style.background = value;
                }
            }
        },
        alias: [
            "TabIndex", "tss$ITAB$TabIndex",
            "Size", "tss$ITF$Size",
            "Weight", "tss$ITF$Weight",
            "TextAlign", "tss$ITF$TextAlign",
            "Background", "tss$IHBG$Background",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            ctor: function (placeholder) {
                if (placeholder === void 0) { placeholder = ""; }

                this.$initialize();
                tss.CB(tss.SearchBox,HTMLInputElement).ctor.call(this);
                this.InnerElement = tss.UI.TextBox(tss.UI._$2("tss-searchbox tss-fontsize-small tss-fontweight-regular", void 0, void 0, void 0, void 0, void 0, void 0, "text", void 0, void 0, placeholder, void 0, void 0, void 0, void 0));
                this._icon = tss.UI.Span(tss.UI._$1("las la-search"));
                this._iconContainer = tss.UI.Div(tss.UI._$1("tss-searchbox-icon"), this._icon);
                this._paddingContainer = tss.UI.Div$2(tss.UI._$1("tss-searchbox-padding"));
                this._container = tss.UI.Div$2(tss.UI._$1("tss-searchbox-container"), [this._iconContainer, this.InnerElement, this._paddingContainer]);

                this.AttachChange();
                this.AttachInput();
                this.AttachFocus();
                this.AttachBlur();
                this.AttachKeys();

                this.OnKeyPress(H5.fn.bind(this, function (s, e) {
                    if (H5.rE(e.key, "Enter")) {
                        !H5.staticEquals(this.Searched, null) ? this.Searched(this, this.InnerElement.value) : null;
                    }
                }));
            }
        },
        methods: {
            Render: function () {
                return this._container;
            },
            Attach: function (handler) {
                this.addInputUpdated(function (s, _) {
                    handler(s);
                });
            },
            SetText: function (text) {
                this.Text = text;
                return this;
            },
            SetPlaceholder: function (error) {
                this.Placeholder = error;
                return this;
            },
            Disabled: function (value) {
                if (value === void 0) { value = true; }
                this.IsEnabled = !value;
                return this;
            },
            Underlined: function () {
                this.IsUnderlined = true;
                return this;
            },
            NotUnderlined: function () {
                this.IsUnderlined = false;
                return this;
            },
            SetIcon: function (icon) {
                this.Icon = icon;
                return this;
            },
            NoIcon: function () {
                this._container.classList.add("tss-noicon");
                return this;
            },
            Focus: function () {
                tss.domObs.WhenMounted(this.InnerElement, H5.fn.bind(this, function () {
                    window.setTimeout(H5.fn.bind(this, function (_) {
                        this.InnerElement.focus();
                    }), 500);
                }));
                return this;
            },
            SearchAsYouType: function () {
                this.OnKeyUp(H5.fn.bind(this, function (s, e) {
                    !H5.staticEquals(this.Searched, null) ? this.Searched(this, this.InnerElement.value) : null;
                }));
                return this;
            },
            OnSearch: function (onSearch) {
                this.addSearched(onSearch);
                return this;
            },
            Height: function (unitSize) {
                var h = unitSize.toString();
                this.InnerElement.style.height = h;
                this.InnerElement.style.lineHeight = h;
                this._container.style.height = h;
                return this;
            },
            H: function (unitSize) {
                return this.Height(tss.usX.px$1(unitSize));
            }
        }
    });

    /**
     * A Stack is a container-type component that abstracts the implementation of a flexbox in order to define the layout of its children components.
     *
     * @public
     * @class tss.S
     * @implements  tss.ICBTTC
     * @implements  tss.IHBG
     * @implements  tss.IHMP
     * @implements  tss.ISCS
     * @implements  tss.ICW
     */
    H5.define("tss.S", {
        inherits: function () { return [tss.ICBTTC(tss.S,tss.IC),tss.IHBG,tss.IHMP,tss.ISCS,tss.ICW]; },
        statics: {
            fields: {
                _stylesToPropagate: null
            },
            ctors: {
                init: function () {
                    this._stylesToPropagate = System.Array.init(["tss-default-component-margin", "tss-collapse", "tss-fade-light", "tss-fade", "tss-show"], System.String);
                }
            },
            methods: {
                SetAlign: function (component, align) {
                    var item = { };
                    var remember = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), item, remember);
                    var cssAlign = System.Enum.toString(tss.ItemAlign, align).toLowerCase();
                    if (H5.rE(cssAlign, "end") || H5.rE(cssAlign, "start")) {
                        cssAlign = System.String.format("flex-{0}", [cssAlign]);
                    }
                    item.v.style.alignSelf = cssAlign;
                    if (remember.v) {
                        item.v.setAttribute("tss-stk-as", "");
                    }
                },
                SetWidth: function (component, unitSize) {
                    var item = { };
                    var remember = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), item, remember);
                    item.v.style.width = unitSize.toString();
                    if (remember.v) {
                        item.v.setAttribute("tss-stk-w", "");
                    }
                },
                GetCorrectItemToApplyStyle: function (component) {
                    var specialCase;
                    if (((specialCase = H5.as(component, tss.ISCS))) != null) {
                        return new (System.ValueTuple$2(HTMLElement,System.Boolean)).$ctor1(specialCase.tss$ISCS$StylingContainer, specialCase.tss$ISCS$PropagateToStackItemParent);
                    } else {
                        return new (System.ValueTuple$2(HTMLElement,System.Boolean)).$ctor1(tss.S.GetItem(component), true);
                    }
                },
                SetMinWidth: function (component, unitSize) {
                    var item = { };
                    var remember = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), item, remember);
                    item.v.style.minWidth = unitSize.toString();
                    if (remember.v) {
                        item.v.setAttribute("tss-stk-mw", "");
                    }
                },
                SetMaxWidth: function (component, unitSize) {
                    var item = { };
                    var remember = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), item, remember);
                    item.v.style.maxWidth = unitSize.toString();
                    if (remember.v) {
                        item.v.setAttribute("tss-stk-mxw", "");
                    }
                },
                SetHeight: function (component, unitSize) {
                    var item = { };
                    var remember = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), item, remember);
                    item.v.style.height = unitSize.toString();
                    if (remember.v) {
                        item.v.setAttribute("tss-stk-h", "");
                    }
                },
                SetMinHeight: function (component, unitSize) {
                    var item = { };
                    var remember = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), item, remember);
                    item.v.style.minHeight = unitSize.toString();
                    if (remember.v) {
                        item.v.setAttribute("tss-stk-mh", "");
                    }
                },
                SetMaxHeight: function (component, unitSize) {
                    var item = { };
                    var remember = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), item, remember);
                    item.v.style.maxHeight = unitSize.toString();
                    if (remember.v) {
                        item.v.setAttribute("tss-stk-mxh", "");
                    }
                },
                SetMarginLeft: function (component, unitSize) {
                    var item = { };
                    var remember = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), item, remember);
                    item.v.style.marginLeft = unitSize.toString();
                    if (remember.v) {
                        item.v.setAttribute("tss-stk-m", "");
                    }
                },
                SetMarginRight: function (component, unitSize) {
                    var item = { };
                    var remember = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), item, remember);
                    item.v.style.marginRight = unitSize.toString();
                    if (remember.v) {
                        item.v.setAttribute("tss-stk-m", "");
                    }
                },
                SetMarginTop: function (component, unitSize) {
                    var item = { };
                    var remember = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), item, remember);
                    item.v.style.marginTop = unitSize.toString();
                    if (remember.v) {
                        item.v.setAttribute("tss-stk-m", "");
                    }
                },
                SetMarginBottom: function (component, unitSize) {
                    var item = { };
                    var remember = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), item, remember);
                    item.v.style.marginBottom = unitSize.toString();
                    if (remember.v) {
                        item.v.setAttribute("tss-stk-m", "");
                    }
                },
                SetPaddingLeft: function (component, unitSize) {
                    var item = { };
                    var remember = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), item, remember);
                    item.v.style.paddingLeft = unitSize.toString();
                    if (remember.v) {
                        item.v.setAttribute("tss-stk-p", "");
                    }
                },
                SetPaddingRight: function (component, unitSize) {
                    var item = { };
                    var remember = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), item, remember);
                    item.v.style.paddingRight = unitSize.toString();
                    if (remember.v) {
                        item.v.setAttribute("tss-stk-p", "");
                    }
                },
                SetPaddingTop: function (component, unitSize) {
                    var item = { };
                    var remember = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), item, remember);
                    item.v.style.paddingTop = unitSize.toString();
                    if (remember.v) {
                        item.v.setAttribute("tss-stk-p", "");
                    }
                },
                SetPaddingBottom: function (component, unitSize) {
                    var item = { };
                    var remember = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), item, remember);
                    item.v.style.paddingBottom = unitSize.toString();
                    if (remember.v) {
                        item.v.setAttribute("tss-stk-p", "");
                    }
                },
                SetGrow: function (component, grow) {
                    var item = { };
                    var remember = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), item, remember);
                    item.v.style.flexGrow = H5.toString(grow);
                    if (remember.v) {
                        item.v.setAttribute("tss-stk-fg", "");
                    }
                },
                SetShrink: function (component, shrink) {
                    var item = { };
                    var remember = { };
                    H5.Deconstruct(tss.S.GetCorrectItemToApplyStyle(component).$clone(), item, remember);
                    item.v.style.flexShrink = shrink ? "1" : "0";
                    if (remember.v) {
                        item.v.setAttribute("tss-stk-fs", "");
                    }
                },
                GetItem: function (component, forceAdd) {
                    if (forceAdd === void 0) { forceAdd = false; }
                    var item = null;
                    if (component.hasOwnProperty("StackItem")) {
                        item = component.StackItem;
                    }

                    if (item == null) {
                        var rendered = component.tss$IC$Render();
                        if (forceAdd || (H5.is(rendered.parentElement, System.Object) && rendered.parentElement.classList.contains("tss-stack"))) {
                            item = tss.UI.Div(tss.UI._$2("tss-stack-item", void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, function (s) {
                                s.alignSelf = "auto";
                                s.width = "auto";
                                s.height = "auto";
                                s.flexShrink = "1";
                            }), component.tss$IC$Render());
                            component.StackItem = item;

                            if (forceAdd) {
                                tss.S.CopyStylesDefinedWithExtension(rendered, item);
                            }

                        } else {
                            item = rendered;
                        }
                    }
                    return item;
                },
                CopyStylesDefinedWithExtension: function (from, to) {
                    var $t, $t1, $t2, $t3, $t4;
                    var has = null;

                    var fs = from.style;
                    var ts = to.style;


                    has = function (att) {
                        var ha = from.hasAttribute(att);
                        if (ha) {
                            from.removeAttribute(att);
                        }

                        return ha;
                    };

                    if (has("tss-stk-w")) {
                        ts.width = fs.width;
                        fs.width = "100%";
                    }
                    if (has("tss-stk-h")) {
                        ts.height = fs.height;
                        fs.height = "100%";
                    }

                    if (has("tss-stk-mw")) {
                        ts.minWidth = fs.minWidth;
                        fs.minWidth = "inherit";
                    }
                    if (has("tss-stk-mxw")) {
                        ts.maxWidth = fs.maxWidth;
                        fs.maxWidth = "inherit";
                    }
                    if (has("tss-stk-mh")) {
                        ts.minHeight = fs.minHeight;
                        fs.minHeight = "inherit";
                    }
                    if (has("tss-stk-mxh")) {
                        ts.maxHeight = fs.maxHeight;
                        fs.maxHeight = "inherit";
                    }

                    if (has("tss-stk-m")) {
                        ts.marginLeft = fs.marginLeft;
                        ts.marginTop = fs.marginTop;
                        ts.marginRight = fs.marginRight;
                        ts.marginBottom = fs.marginBottom;
                        fs.marginLeft = ($t = ($t1 = (fs.marginBottom = "", ""), fs.marginRight = $t1, $t1), fs.marginTop = $t, $t);
                    }

                    if (has("tss-stk-p")) {
                        ts.paddingLeft = fs.paddingLeft;
                        ts.paddingTop = fs.paddingTop;
                        ts.paddingRight = fs.paddingRight;
                        ts.paddingBottom = fs.paddingBottom;
                        fs.paddingLeft = ($t2 = ($t3 = (fs.paddingBottom = "", ""), fs.paddingRight = $t3, $t3), fs.paddingTop = $t2, $t2);
                    }

                    if (has("tss-stk-fg")) {
                        ts.flexGrow = fs.flexGrow; /* fs.flexGrow = ""; */
                    }
                    if (has("tss-stk-fs")) {
                        ts.flexShrink = fs.flexShrink; /* fs.flexShrink = ""; */
                    }
                    if (has("tss-stk-as")) {
                        ts.alignSelf = fs.alignSelf; /* fs.alignSelf = "";*/
                    }

                    $t4 = H5.getEnumerator(tss.S._stylesToPropagate);
                    try {
                        while ($t4.moveNext()) {
                            var s = $t4.Current;
                            if (from.classList.contains(s)) {
                                from.classList.remove(s);
                                to.classList.add(s);
                            }
                        }
                    } finally {
                        if (H5.is($t4, System.IDisposable)) {
                            $t4.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        },
        fields: {
            InnerElement: null,
            PropagateToStackItemParent: false
        },
        events: {
            MouseOver: null,
            MouseOut: null
        },
        props: {
            StackOrientation: {
                get: function () {
                    switch (this.InnerElement.style.flexDirection) {
                        case "row": 
                            return tss.S.Orientation.Horizontal;
                        case "column": 
                            return tss.S.Orientation.Vertical;
                        case "row-reverse": 
                            return tss.S.Orientation.HorizontalReverse;
                        case "column-reverse": 
                            return tss.S.Orientation.VerticalReverse;
                    }

                    return tss.S.Orientation.Vertical;
                },
                set: function (value) {
                    switch (value) {
                        case tss.S.Orientation.Horizontal: 
                            this.InnerElement.style.flexDirection = "row";
                            break;
                        case tss.S.Orientation.Vertical: 
                            this.InnerElement.style.flexDirection = "column";
                            break;
                        case tss.S.Orientation.HorizontalReverse: 
                            this.InnerElement.style.flexDirection = "row-reverse";
                            break;
                        case tss.S.Orientation.VerticalReverse: 
                            this.InnerElement.style.flexDirection = "column-reverse";
                            break;
                    }
                }
            },
            CanWrap: {
                get: function () {
                    return !H5.rE(this.InnerElement.style.flexWrap, "nowrap");
                },
                set: function (value) {
                    this.InnerElement.style.flexWrap = value ? "wrap" : "nowrap";
                }
            },
            IsInline: {
                get: function () {
                    return H5.rE(this.InnerElement.style.display, "inline-flex");
                },
                set: function (value) {
                    this.InnerElement.style.display = value ? "inline-flex" : "";
                }
            },
            Background: {
                get: function () {
                    return this.InnerElement.style.background;
                },
                set: function (value) {
                    this.InnerElement.style.background = value;
                }
            },
            Margin: {
                get: function () {
                    return this.InnerElement.style.margin;
                },
                set: function (value) {
                    this.InnerElement.style.margin = value;
                }
            },
            Padding: {
                get: function () {
                    return this.InnerElement.style.padding;
                },
                set: function (value) {
                    this.InnerElement.style.padding = value;
                }
            },
            StylingContainer: {
                get: function () {
                    return this.InnerElement;
                }
            }
        },
        alias: [
            "CanWrap", "tss$ICW$CanWrap",
            "Background", "tss$IHBG$Background",
            "Margin", "tss$IHMP$Margin",
            "Padding", "tss$IHMP$Padding",
            "StylingContainer", "tss$ISCS$StylingContainer",
            "PropagateToStackItemParent", "tss$ISCS$PropagateToStackItemParent",
            "Add", "tss$ICBT$tss$IC$Add",
            "Clear", "tss$ICBT$tss$IC$Clear",
            "Replace", "tss$ICBT$tss$IC$Replace",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            init: function () {
                this.PropagateToStackItemParent = true;
            },
            ctor: function (orientation) {
                if (orientation === void 0) { orientation = 0; }

                this.$initialize();
                this.InnerElement = tss.UI.Div$2(tss.UI._$1("tss-stack"));
                this.StackOrientation = orientation;
            }
        },
        methods: {
            /**
             * Sets the align-items css property for this stack
             *
             * @instance
             * @public
             * @this tss.S
             * @memberof tss.S
             * @param   {tss.ItemAlign}    align
             * @return  {tss.S}
             */
            AlignItems: function (align) {
                var cssAlign = System.Enum.toString(tss.ItemAlign, align).toLowerCase();
                if (H5.rE(cssAlign, "end") || H5.rE(cssAlign, "start")) {
                    cssAlign = System.String.format("flex-{0}", [cssAlign]);
                }
                this.InnerElement.style.alignItems = cssAlign;
                return this;
            },
            /**
             * Sets the align-items css property for this stack to 'center'
             *
             * @instance
             * @public
             * @this tss.S
             * @memberof tss.S
             * @return  {tss.S}
             */
            AlignItemsCenter: function () {
                return this.AlignItems("center");
            },
            /**
             * Make this stack relative (i.e. position:relative)
             *
             * @instance
             * @public
             * @this tss.S
             * @memberof tss.S
             * @return  {tss.S}
             */
            Relative: function () {
                this.InnerElement.classList.add("tss-relative");
                return this;
            },
            /**
             * Sets the align-items css property for this stack
             *
             * @instance
             * @public
             * @this tss.S
             * @memberof tss.S
             * @param   {tss.ItemAlign}    align
             * @return  {tss.S}
             */
            AlignContent: function (align) {
                var cssAlign = System.Enum.toString(tss.ItemAlign, align).toLowerCase();
                if (H5.rE(cssAlign, "end") || H5.rE(cssAlign, "start")) {
                    cssAlign = System.String.format("flex-{0}", [cssAlign]);
                }
                this.InnerElement.style.alignContent = cssAlign;
                return this;
            },
            /**
             * Sets the justify-content css property for this stack
             *
             * @instance
             * @public
             * @this tss.S
             * @memberof tss.S
             * @param   {tss.ItemJustify}    justify
             * @return  {tss.S}
             */
            JustifyContent: function (justify) {
                var cssJustify = System.Enum.toString(tss.ItemJustify, justify).toLowerCase();
                if (H5.rE(cssJustify, "end") || H5.rE(cssJustify, "start")) {
                    cssJustify = System.String.format("flex-{0}", [cssJustify]);
                }
                if (H5.rE(cssJustify, "between") || H5.rE(cssJustify, "around") || H5.rE(cssJustify, "evenly")) {
                    cssJustify = System.String.format("space-{0}", [cssJustify]);
                }
                this.InnerElement.style.justifyContent = cssJustify;
                return this;
            },
            /**
             * Sets the justify-content css property for this stack
             *
             * @instance
             * @public
             * @this tss.S
             * @memberof tss.S
             * @param   {tss.ItemJustify}    justify
             * @return  {tss.S}
             */
            JustifyItems: function (justify) {
                var cssJustify = System.Enum.toString(tss.ItemJustify, justify).toLowerCase();
                if (H5.rE(cssJustify, "end") || H5.rE(cssJustify, "start")) {
                    cssJustify = System.String.format("flex-{0}", [cssJustify]);
                }
                if (H5.rE(cssJustify, "between") || H5.rE(cssJustify, "around") || H5.rE(cssJustify, "evenly")) {
                    cssJustify = System.String.format("space-{0}", [cssJustify]);
                }
                this.InnerElement.style.justifyItems = cssJustify;
                return this;
            },
            RemovePropagation: function () {
                this.PropagateToStackItemParent = false;
                return this;
            },
            RaiseMouseOver: function (ev) {
                !H5.staticEquals(this.MouseOver, null) ? this.MouseOver(this, ev) : null;
            },
            RaiseMouseOut: function (ev) {
                !H5.staticEquals(this.MouseOut, null) ? this.MouseOut(this, ev) : null;
            },
            OnMouseOver: function (onMouseOver) {
                if (!(H5.is(this.InnerElement.onmouseover, System.Object))) {
                    this.InnerElement.onmouseover = H5.fn.combine(this.InnerElement.onmouseover, H5.fn.bind(this, function (s) {
                        this.RaiseMouseOver(s);
                    }));
                }

                this.addMouseOver(onMouseOver);
                return this;
            },
            OnMouseOut: function (onMouseOut) {
                if (!(H5.is(this.InnerElement.onmouseout, System.Object))) {
                    this.InnerElement.onmouseout = H5.fn.combine(this.InnerElement.onmouseout, H5.fn.bind(this, function (s) {
                        this.RaiseMouseOut(s);
                    }));
                }

                this.addMouseOut(onMouseOut);
                return this;
            },
            Add: function (component) {
                tss.ScrollBar.GetCorrectContainer(this.InnerElement).appendChild(tss.S.GetItem(component, true));
            },
            Prepend: function (component) {
                var container = tss.ScrollBar.GetCorrectContainer(this.InnerElement);

                if (container.childElementCount > 0) {
                    container.insertBefore(tss.S.GetItem(component, true), container.firstElementChild);
                } else {
                    container.appendChild(tss.S.GetItem(component, true));
                }
            },
            InsertBefore: function (component, componentToInsertBefore) {
                var container = tss.ScrollBar.GetCorrectContainer(this.InnerElement);

                var element = tss.S.GetItem(component, true);
                var elementToInsertBefore = tss.S.GetItem(componentToInsertBefore, true);

                if (!container.contains(elementToInsertBefore)) {
                    throw new System.Exception("componentToInsertBeforeis not a child of this stack");
                }

                container.insertBefore(element, elementToInsertBefore);
            },
            InsertAfter: function (component, componentToInsertBefore) {
                var container = tss.ScrollBar.GetCorrectContainer(this.InnerElement);

                var element = tss.S.GetItem(component, true);
                var elementToInsertBefore = tss.S.GetItem(componentToInsertBefore, true);

                if (!container.contains(elementToInsertBefore)) {
                    throw new System.Exception("componentToInsertBeforeis not a child of this stack");
                }

                container.insertBefore(element, elementToInsertBefore.nextSibling);
            },
            Clear: function () {
                tss.UI.ClearChildren(tss.ScrollBar.GetCorrectContainer(this.InnerElement));
            },
            Replace: function (newComponent, oldComponent) {
                tss.ScrollBar.GetCorrectContainer(this.InnerElement).replaceChild(tss.S.GetItem(newComponent), tss.S.GetItem(oldComponent));
            },
            Remove: function (component) {
                tss.ScrollBar.GetCorrectContainer(this.InnerElement).removeChild(tss.S.GetItem(component));
            },
            Render: function () {
                return this.InnerElement;
            },
            Horizontal: function () {
                this.StackOrientation = tss.S.Orientation.Horizontal;
                return this;
            },
            Vertical: function () {
                this.StackOrientation = tss.S.Orientation.Vertical;
                return this;
            },
            HorizontalReverse: function () {
                this.StackOrientation = tss.S.Orientation.HorizontalReverse;
                return this;
            },
            VerticalReverse: function () {
                this.StackOrientation = tss.S.Orientation.VerticalReverse;
                return this;
            },
            Wrap: function () {
                this.CanWrap = true;
                return this;
            },
            Inline: function () {
                this.IsInline = true;
                return this;
            },
            NoWrap: function () {
                this.CanWrap = false;
                return this;
            },
            OverflowHidden: function () {
                this.InnerElement.style.overflow = "hidden";
                return this;
            }
        }
    });

    H5.define("tss.Slider", {
        inherits: function () { return [tss.CB(tss.Slider,HTMLInputElement)]; },
        fields: {
            _outerLabel: null,
            _outerDiv: null,
            _fakeDiv: null
        },
        props: {
            Orientation: {
                get: function () {
                    return this._outerLabel.classList.contains("tss-vertical") ? tss.Slider.SliderOrientation.Vertical : tss.Slider.SliderOrientation.Horizontal;
                },
                set: function (value) {
                    if (value === tss.Slider.SliderOrientation.Vertical) {
                        this._outerLabel.classList.add("tss-vertical");
                    } else {
                        this._outerLabel.classList.remove("tss-vertical");
                    }
                }
            },
            Value: {
                get: function () {
                    return System.Int32.parse(this.InnerElement.value);
                },
                set: function (value) {
                    this.InnerElement.value = H5.toString(value);
                }
            },
            Min: {
                get: function () {
                    return System.Int32.parse(this.InnerElement.min);
                },
                set: function (value) {
                    this.InnerElement.min = H5.toString(value);
                }
            },
            Max: {
                get: function () {
                    return System.Int32.parse(this.InnerElement.max);
                },
                set: function (value) {
                    this.InnerElement.max = H5.toString(value);
                }
            },
            Step: {
                get: function () {
                    return System.Int32.parse(this.InnerElement.step);
                },
                set: function (value) {
                    this.InnerElement.step = H5.toString(value);
                }
            },
            IsEnabled: {
                get: function () {
                    return !this.InnerElement.classList.contains("tss-disabled");
                },
                set: function (value) {
                    if (value) {
                        this.InnerElement.classList.remove("tss-disabled");
                    } else {
                        this.InnerElement.classList.add("tss-disabled");
                    }
                }
            }
        },
        alias: ["Render", "tss$IC$Render"],
        ctors: {
            ctor: function (val, min, max, step) {
                if (val === void 0) { val = 0; }
                if (min === void 0) { min = 0; }
                if (max === void 0) { max = 100; }
                if (step === void 0) { step = 10; }

                this.$initialize();
                tss.CB(tss.Slider,HTMLInputElement).ctor.call(this);
                this.InnerElement = document.createElement("input");
                this.InnerElement.className = "tss-slider";
                this.InnerElement.value = H5.toString(val);
                this.InnerElement.min = H5.toString(min);
                this.InnerElement.max = H5.toString(max);
                this.InnerElement.step = H5.toString(step);
                this.InnerElement.type = "range";

                this.AttachClick();
                this.AttachChange();
                this.AttachInput();
                this.AttachFocus();
                this.AttachBlur();

                if (System.String.indexOf(navigator.userAgent, "AppleWebKit") !== -1) {
                    this._fakeDiv = tss.UI.Div$2(tss.UI._$1("tss-slider-fake-progress"));
                    var percent = ((((val - min) | 0)) / (((max - min) | 0))) * 100.0;
                    this._fakeDiv.style.width = System.String.format("{0:0.##}%", [H5.box(percent, System.Double, System.Double.format, System.Double.getHashCode)]);
                    this.addInputUpdated(H5.fn.bind(this, function (e, s) {
                        percent = ((((this.Value - this.Min) | 0)) / (((this.Max - this.Min) | 0))) * 100.0;
                        this._fakeDiv.style.width = System.String.format("{0:0.##}%", [H5.box(percent, System.Double, System.Double.format, System.Double.getHashCode)]);
                    }));
                    this._outerLabel = tss.UI.Label(tss.UI._$1("tss-slider-container"), [this.InnerElement, tss.UI.Div$2(tss.UI._$1("tss-slider-fake-background")), this._fakeDiv]);
                    this.InnerElement.classList.add("tss-fake");
                } else {
                    this._outerLabel = tss.UI.Label(tss.UI._$1("tss-slider-container"), [this.InnerElement]);
                    this.InnerElement.style.height = "8px";
                }

                this._outerDiv = tss.UI.Div(tss.UI._$1("tss-slider-div"), this._outerLabel);
            }
        },
        methods: {
            Render: function () {
                return this._outerDiv;
            },
            SetValue: function (val) {
                this.Value = val;
                return this;
            },
            SetMin: function (min) {
                this.Min = min;
                return this;
            },
            SetMax: function (max) {
                this.Max = max;
                return this;
            },
            SetStep: function (step) {
                this.Step = step;
                return this;
            },
            Disabled: function (value) {
                if (value === void 0) { value = true; }
                this.IsEnabled = !value;
                return this;
            },
            Horizontal: function () {
                this.Orientation = tss.Slider.SliderOrientation.Horizontal;
                return this;
            },
            Vertical: function () {
                this.Orientation = tss.Slider.SliderOrientation.Vertical;
                return this;
            }
        }
    });

    H5.define("tss.Spinner", {
        inherits: function () { return [tss.CB(tss.Spinner,HTMLDivElement)]; },
        fields: {
            _container: null,
            _label: null
        },
        props: {
            Position: {
                get: function () {
                    var s = System.Linq.Enumerable.from(this._container.classList, System.String).firstOrDefault(function (x) {
                            return System.String.startsWith(x, "tss-spinner-position-");
                        }, null);
                    var result = { v : new tss.Spinner.LabelPosition() };
                    if (s != null && System.Enum.tryParse(tss.Spinner.LabelPosition, s, result, true)) {
                        return result.v;
                    }
                    return tss.Spinner.LabelPosition.Right;
                },
                set: function (value) {
                    var s = System.Linq.Enumerable.from(this._container.classList, System.String).firstOrDefault(function (x) {
                            return System.String.startsWith(x, "tss-spinner-position-");
                        }, null);
                    if (s != null) {
                        this._container.classList.remove(s);
                    }
                    this._container.classList.add(System.String.format("tss-spinner-position-{0}", [System.Enum.toString(tss.Spinner.LabelPosition, value).toLowerCase()]));
                }
            },
            Size: {
                get: function () {
                    var s = System.Linq.Enumerable.from(this._container.classList, System.String).firstOrDefault(function (x) {
                            return System.String.startsWith(x, "tss-spinner-size-");
                        }, null);
                    var result = { v : new tss.Spinner.CircleSize() };
                    if (s != null && System.Enum.tryParse(tss.Spinner.CircleSize, s, result, true)) {
                        return result.v;
                    }
                    return tss.Spinner.CircleSize.Small;
                },
                set: function (value) {
                    var s = System.Linq.Enumerable.from(this._container.classList, System.String).firstOrDefault(function (x) {
                            return System.String.startsWith(x, "tss-spinner-size-");
                        }, null);
                    if (s != null) {
                        this._container.classList.remove(s);
                    }
                    this._container.classList.add(System.String.format("tss-spinner-size-{0}", [System.Enum.toString(tss.Spinner.CircleSize, value).toLowerCase()]));
                }
            },
            Text: {
                get: function () {
                    return this._label.innerText;
                },
                set: function (value) {
                    this._label.innerText = value;
                }
            }
        },
        alias: ["Render", "tss$IC$Render"],
        ctors: {
            ctor: function (text) {
                if (text === void 0) { text = ""; }

                this.$initialize();
                tss.CB(tss.Spinner,HTMLDivElement).ctor.call(this);
                this.InnerElement = tss.UI.Div$2(tss.UI._$1("tss-spinner"));
                this._label = tss.UI.Label(tss.UI._$2("tss-spinner-label", void 0, void 0, void 0, void 0, void 0, text, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0));
                this._container = tss.UI.Div$1(tss.UI._$1("tss-spinner-container tss-spinner-position-right tss-spinner-size-small"), this.InnerElement, this._label);
                this.AttachClick();
            }
        },
        methods: {
            Render: function () {
                return this._container;
            },
            Left: function () {
                this.Position = tss.Spinner.LabelPosition.Left;
                return this;
            },
            Right: function () {
                this.Position = tss.Spinner.LabelPosition.Right;
                return this;
            },
            Above: function () {
                this.Position = tss.Spinner.LabelPosition.Above;
                return this;
            },
            Below: function () {
                this.Position = tss.Spinner.LabelPosition.Below;
                return this;
            },
            XSmall: function () {
                this.Size = tss.Spinner.CircleSize.XSmall;
                return this;
            },
            Small: function () {
                this.Size = tss.Spinner.CircleSize.Small;
                return this;
            },
            Medium: function () {
                this.Size = tss.Spinner.CircleSize.Medium;
                return this;
            },
            Large: function () {
                this.Size = tss.Spinner.CircleSize.Large;
                return this;
            },
            SetText: function (text) {
                this.Text = text;
                return this;
            }
        }
    });

    H5.define("tss.TextBreadcrumb", {
        inherits: function () { return [tss.CB(tss.TextBreadcrumb,HTMLSpanElement)]; },
        alias: ["Render", "tss$IC$Render"],
        ctors: {
            ctor: function (text) {
                this.$initialize();
                tss.CB(tss.TextBreadcrumb,HTMLSpanElement).ctor.call(this);
                this.InnerElement = tss.UI.Span(tss.UI._$2("tss-textbreadcrumb", void 0, void 0, void 0, void 0, void 0, text, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0));

                this.AttachClick();
            }
        },
        methods: {
            Render: function () {
                return this.InnerElement;
            }
        }
    });

    H5.define("tss.Timeline", {
        inherits: function () { return [tss.ICBTTC(tss.Timeline,tss.IC),tss.IHBG,tss.IHMP]; },
        fields: {
            _timeline: null,
            _timelineOwner: null,
            left: false
        },
        props: {
            Background: {
                get: function () {
                    return this._timelineOwner.style.background;
                },
                set: function (value) {
                    this._timelineOwner.style.background = value;
                }
            },
            Margin: {
                get: function () {
                    return this._timelineOwner.style.margin;
                },
                set: function (value) {
                    this._timelineOwner.style.margin = value;
                }
            },
            Padding: {
                get: function () {
                    return this._timelineOwner.style.padding;
                },
                set: function (value) {
                    this._timelineOwner.style.padding = value;
                }
            },
            IsSameSide: {
                get: function () {
                    return this._timelineOwner.classList.contains("tss-left");
                },
                set: function (value) {
                    tss.UI.UpdateClassIf(this._timelineOwner, value, "tss-left");
                }
            }
        },
        alias: [
            "Background", "tss$IHBG$Background",
            "Margin", "tss$IHMP$Margin",
            "Padding", "tss$IHMP$Padding",
            "Add", "tss$ICBT$tss$IC$Add",
            "Clear", "tss$ICBT$tss$IC$Clear",
            "Render", "tss$IC$Render",
            "Replace", "tss$ICBT$tss$IC$Replace"
        ],
        ctors: {
            init: function () {
                this.left = true;
            },
            ctor: function () {
                this.$initialize();
                this._timeline = tss.UI.Div$2(tss.UI._$1("tss-timeline"));
                this._timelineOwner = tss.UI.Div(tss.UI._$1("tss-timeline-owner"), this._timeline);
            }
        },
        methods: {
            Add: function (component) {
                tss.ScrollBar.GetCorrectContainer(this._timeline).appendChild(this.Wrap(component));
                this.Rebase(false);
            },
            SameSide: function () {
                this.IsSameSide = true;
                return this;
            },
            SameSideIf: function (minWidthPixels) {
                var Recompute = null;

                Recompute = H5.fn.bind(this, function () {
                    var rect = this._timelineOwner.getBoundingClientRect();
                    this.IsSameSide = rect.width <= minWidthPixels;
                });

                tss.domObs.WhenMounted(this._timelineOwner, H5.fn.bind(this, function () {
                    var ro = new tss.ResizeObserver();
                    ro.Observe(document.body);
                    ro.OnResize = Recompute;
                    tss.domObs.WhenRemoved(this._timelineOwner, function () {
                        ro.StopObserving(document.body);
                    });
                }));

                return this;
            },
            TimelineWidth: function (maxWidth) {
                this._timeline.style.maxWidth = maxWidth.toString();
                return this;
            },
            Rebase: function (rebaseAll) {
                var $t;
                var parent = tss.ScrollBar.GetCorrectContainer(this._timeline);

                if (rebaseAll) {
                    this.left = true;
                    $t = H5.getEnumerator(parent.children, Element);
                    try {
                        while ($t.moveNext()) {
                            var n = $t.Current;
                            n.classList.remove("tss-left", "tss-right");
                            n.classList.add(this.left ? "tss-left" : "tss-right");
                            this.left = !this.left;
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                } else {
                    tss.ScrollBar.GetCorrectContainer(this._timeline).lastElementChild.classList.add(this.left ? "tss-left" : "tss-right");
                    this.left = !this.left;
                }
            },
            Wrap: function (component) {
                return tss.UI.Div(tss.UI._$1("tss-timeline-container"), tss.UI.Div(tss.UI._$1("tss-timeline-content"), component.tss$IC$Render()));
            },
            Clear: function () {
                tss.UI.ClearChildren(this._timeline);
            },
            Render: function () {
                return this._timelineOwner;
            },
            Replace: function (newComponent, oldComponent) {
                tss.ScrollBar.GetCorrectContainer(this._timeline).replaceChild(this.Wrap(newComponent), this.Wrap(oldComponent));
                this.Rebase(true);
            }
        }
    });

    H5.define("tss.Toggle", {
        inherits: function () { return [tss.CB(tss.Toggle,HTMLInputElement),tss.IObservableComponent(System.Boolean)]; },
        fields: {
            _checkElement: null,
            _onOffSpan: null,
            _container: null,
            _offText: null,
            _onText: null,
            _observable: null
        },
        props: {
            /**
             * Gets or sets toggle text
             *
             * @instance
             * @public
             * @memberof tss.Toggle
             * @function Text
             * @type string
             */
            Text: {
                get: function () {
                    return this._container.innerText;
                },
                set: function (value) {
                    this._container.innerText = value;
                    if (System.String.isNullOrEmpty(value)) {
                        this._onOffSpan.style.display = "";
                    } else {
                        this._onOffSpan.style.display = "none";
                    }
                }
            },
            /**
             * Gets or sets whenever Toggle is enabled
             *
             * @instance
             * @public
             * @memberof tss.Toggle
             * @function IsEnabled
             * @type boolean
             */
            IsEnabled: {
                get: function () {
                    return !this._container.classList.contains("tss-disabled");
                },
                set: function (value) {
                    if (value) {
                        this._container.classList.remove("tss-disabled");
                    } else {
                        this._container.classList.add("tss-disabled");
                    }
                }
            },
            /**
             * Gets or sets whenever Toggle is checked
             *
             * @instance
             * @public
             * @memberof tss.Toggle
             * @function IsChecked
             * @type boolean
             */
            IsChecked: {
                get: function () {
                    return this.InnerElement.checked;
                },
                set: function (value) {
                    this.InnerElement.checked = value;
                    this._observable.Value$1 = value;
                    tss.UI.ClearChildren(this._onOffSpan);
                    if (value) {
                        this._onOffSpan.appendChild(this._onText.tss$IC$Render());
                    } else {
                        this._onOffSpan.appendChild(this._offText.tss$IC$Render());
                    }
                }
            }
        },
        alias: [
            "Render", "tss$IC$Render",
            "AsObservable", "tss$IObservableComponent$System$Boolean$AsObservable"
        ],
        ctors: {
            init: function () {
                this._observable = new (tss.SettableObservableT(System.Boolean))();
            },
            ctor: function (onText, offText) {
                if (onText === void 0) { onText = null; }
                if (offText === void 0) { offText = null; }

                this.$initialize();
                tss.CB(tss.Toggle,HTMLInputElement).ctor.call(this);
                this._onText = onText || tss.UI.TextBlock("On");
                this._offText = offText || tss.UI.TextBlock("Off");
                this.InnerElement = tss.UI.CheckBox(tss.UI._$1("tss-checkbox"));
                this._checkElement = tss.UI.Div$2(tss.UI._$1("tss-toggle-mark"));
                this._onOffSpan = tss.UI.Div(tss.UI._$1("tss-toggle-text"), this._offText.tss$IC$Render());
                this._container = tss.UI.Div$2(tss.UI._$1("tss-toggle-container tss-default-component-margin"), [this.InnerElement, this._checkElement, this._onOffSpan]);

                this._container.onclick = H5.fn.combine(this._container.onclick, H5.fn.bind(this, function (e) {
                    tss.UI.StopEvent(e);
                    this.IsChecked = !this.IsChecked;
                    this.OnToggleChanged();
                    this.RaiseOnChange(null);
                }));

                this.OnChange(H5.fn.bind(this, function (s, e) {
                    this.OnToggleChanged();
                }));
                this.AttachClick();
                this.AttachChange();
                this.AttachFocus();
                this.AttachBlur();
            }
        },
        methods: {
            Render: function () {
                return this._container;
            },
            OnToggleChanged: function () {
                tss.UI.ClearChildren(this._onOffSpan);
                if (this.IsChecked) {
                    this._onOffSpan.appendChild(this._onText.tss$IC$Render());
                } else {
                    this._onOffSpan.appendChild(this._offText.tss$IC$Render());
                }
                this._observable.Value$1 = this.IsChecked;
            },
            SetText: function (text) {
                this.Text = text;
                return this;
            },
            Disabled: function (value) {
                if (value === void 0) { value = true; }
                this.IsEnabled = !value;
                return this;
            },
            Checked: function (value) {
                if (value === void 0) { value = true; }
                this.IsChecked = value;
                return this;
            },
            AsObservable: function () {
                return this._observable;
            }
        }
    });

    H5.define("tss.Validator.DummyComponentToUseForCustomValidationLogicNotTiedToOneComponent", {
        inherits: [tss.ICV],
        $kind: "nested class",
        fields: {
            _isInvalid: null,
            _innerElement: null,
            Error: null
        },
        props: {
            IsInvalid: {
                get: function () {
                    return this._isInvalid();
                },
                set: function (value) {
                    throw new System.NotSupportedException.ctor();
                }
            }
        },
        alias: [
            "Render", "tss$IC$Render",
            "Error", "tss$ICV$Error",
            "IsInvalid", "tss$ICV$IsInvalid"
        ],
        ctors: {
            ctor: function (isInvalid) {
                this.$initialize();
                this._isInvalid = isInvalid;
                this._innerElement = tss.UI.Span(tss.UI._$2(void 0, void 0, void 0, void 0, void 0, void 0, "This is a dummy element to illustrate validation", void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0));
            }
        },
        methods: {
            Render: function () {
                return this._innerElement;
            }
        }
    });

    H5.define("tss.ChoiceGroup", {
        inherits: function () { return [tss.CB(tss.ChoiceGroup,HTMLDivElement),tss.ICBTTC(tss.ChoiceGroup,tss.ChoiceGroup.Choice),tss.IObservableComponent(tss.ChoiceGroup.Choice)]; },
        fields: {
            _header: null,
            _selectedOption: null
        },
        props: {
            SelectedOption: {
                get: function () {
                    return this._selectedOption.Value$1;
                },
                set: function (value) {
                    this._selectedOption.Value$1 = value;
                }
            },
            Label: {
                get: function () {
                    return this._header.Text;
                },
                set: function (value) {
                    this._header.Text = value;
                }
            },
            Orientation: {
                get: function () {
                    return H5.rE(this.InnerElement.style.flexDirection, "row") ? tss.ChoiceGroup.ChoiceGroupOrientation.Horizontal : tss.ChoiceGroup.ChoiceGroupOrientation.Vertical;
                },
                set: function (value) {
                    if (value === tss.ChoiceGroup.ChoiceGroupOrientation.Horizontal) {
                        this.InnerElement.style.flexDirection = "row";
                    } else {
                        this.InnerElement.style.flexDirection = "column";
                    }
                }
            },
            IsRequired: {
                get: function () {
                    return this._header.IsRequired;
                },
                set: function (value) {
                    this._header.IsRequired = value;
                }
            }
        },
        alias: [
            "Render", "tss$IC$Render",
            "Add", "tss$ICBT$tss$ChoiceGroup$Choice$Add",
            "Clear", "tss$ICBT$tss$ChoiceGroup$Choice$Clear",
            "Replace", "tss$ICBT$tss$ChoiceGroup$Choice$Replace",
            "AsObservable", "tss$IObservableComponent$tss$ChoiceGroup$Choice$AsObservable"
        ],
        ctors: {
            init: function () {
                this._selectedOption = new (tss.SettableObservableT(tss.ChoiceGroup.Choice))();
            },
            ctor: function (label) {
                if (label === void 0) { label = "Pick one"; }

                this.$initialize();
                tss.CB(tss.ChoiceGroup,HTMLDivElement).ctor.call(this);
                this._header = tss.ITFX.SemiBold(tss.txt, (new tss.txt.ctor(label)));
                var h = this._header.Render();
                h.style.alignSelf = "baseline";
                this.InnerElement = tss.UI.Div(tss.UI._$2("tss-choice-group tss-default-component-margin", void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, function (s) {
                    s.flexDirection = "column";
                }), h);
            }
        },
        methods: {
            Render: function () {
                return this.InnerElement;
            },
            Add: function (component) {
                tss.ScrollBar.GetCorrectContainer(this.InnerElement).appendChild(component.Render());

                component.OnSelected(H5.fn.cacheBind(this, this.OnChoiceSelected));

                if (component.IsSelected) {
                    this.OnChoiceSelected(component);
                }
            },
            Clear: function () {
                var container = tss.ScrollBar.GetCorrectContainer(this.InnerElement);
                tss.UI.ClearChildren(container);
                tss.ScrollBar.GetCorrectContainer(this.InnerElement).appendChild(this._header.Render());
            },
            Replace: function (newComponent, oldComponent) {
                tss.ScrollBar.GetCorrectContainer(this.InnerElement).replaceChild(newComponent.Render(), oldComponent.Render());
                newComponent.OnSelected(H5.fn.cacheBind(this, this.OnChoiceSelected));
            },
            Choices: function (children) {
                if (children === void 0) { children = []; }
                children.forEach(H5.fn.bind(this, function (x) {
                        this.Add(x);
                    }));
                return this;
            },
            Horizontal: function () {
                this.Orientation = tss.ChoiceGroup.ChoiceGroupOrientation.Horizontal;
                return this;
            },
            Vertical: function () {
                this.Orientation = tss.ChoiceGroup.ChoiceGroupOrientation.Vertical;
                return this;
            },
            Required: function () {
                this.IsRequired = true;
                return this;
            },
            OnChoiceSelected: function (sender) {
                if (H5.rE(this.SelectedOption, sender)) {
                    return;
                }

                if (H5.is(this.SelectedOption, System.Object)) {
                    this.SelectedOption.IsSelected = false;
                }

                this.SelectedOption = sender;

                this.RaiseOnChange(null);
            },
            AsObservable: function () {
                return this._selectedOption;
            }
        }
    });

    H5.define("tss.Input", function (TInput) { return {
        inherits: [tss.CB(TInput,HTMLInputElement),tss.ITAB,tss.ICVT(TInput),tss.IObservableComponent(System.String)],
        fields: {
            _container: null,
            _errorSpan: null,
            _observable: null
        },
        props: {
            Text: {
                get: function () {
                    return this.InnerElement.value;
                },
                set: function (value) {
                    this.InnerElement.value = value;
                    this._observable.Value$1 = value;
                    this.RaiseOnInput(null);
                }
            },
            IsEnabled: {
                get: function () {
                    return !this.InnerElement.classList.contains("tss-disabled");
                },
                set: function (value) {
                    if (value) {
                        this.InnerElement.classList.remove("tss-disabled");
                    } else {
                        this.InnerElement.classList.add("tss-disabled");
                    }
                }
            },
            Error: {
                get: function () {
                    return this._errorSpan.innerText;
                },
                set: function (value) {
                    this._errorSpan.innerText = value;
                }
            },
            IsInvalid: {
                get: function () {
                    return this._container.classList.contains("tss-invalid");
                },
                set: function (value) {
                    if (value) {
                        this._container.classList.add("tss-invalid");
                    } else {
                        this._container.classList.remove("tss-invalid");
                    }
                }
            },
            IsRequired: {
                get: function () {
                    return this._container.classList.contains("tss-required");
                },
                set: function (value) {
                    if (value) {
                        this._container.classList.add("tss-required");
                    } else {
                        this._container.classList.remove("tss-required");
                    }
                }
            },
            TabIndex: {
                set: function (value) {
                    this.InnerElement.tabIndex = value;
                }
            }
        },
        alias: [
            "Error", "tss$ICV$Error",
            "IsInvalid", "tss$ICV$IsInvalid",
            "TabIndex", "tss$ITAB$TabIndex",
            "Attach", "tss$ICVT$" + H5.getTypeAlias(TInput) + "$Attach",
            "AsObservable", "tss$IObservableComponent$System$String$AsObservable",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            init: function () {
                this._observable = new (tss.SettableObservableT(System.String))();
            },
            ctor: function (type, defaultText) {
                if (defaultText === void 0) { defaultText = null; }

                this.$initialize();
                tss.CB(TInput,HTMLInputElement).ctor.call(this);
                this.InnerElement = tss.UI.TextBox(tss.UI._$2("tss-textbox", void 0, void 0, void 0, void 0, void 0, void 0, type, void 0, defaultText, void 0, void 0, void 0, void 0, void 0));

                this._errorSpan = tss.UI.Span(tss.UI._$1("tss-textbox-error"));
                this._container = tss.UI.Div$1(tss.UI._$1("tss-textbox-container"), this.InnerElement, this._errorSpan);

                this.AttachChange();
                this.AttachInput();
                this.AttachFocus();
                this.AttachBlur();
                this.AttachKeys();

                this.OnChange(H5.fn.bind(this, function (_, __) {
                    this._observable.Value$1 = this.Text;
                }));
                this.OnInput(H5.fn.bind(this, function (_, __) {
                    this._observable.Value$1 = this.Text;
                }));
            }
        },
        methods: {
            /**
             * This will reset the input to a blank state but it will NOT trigger the InputUpdated event because this should be used when a form is being programmatically reset, as opposed to when the User has set the field to blank - the important difference is
             that if a form is reset then it should not immediately be covered in validation warnings until the User starts to interact with the reset form (and firing InputUpdated will cause any validator that this component is registered with to revalidate)
             *
             * @instance
             * @public
             * @this tss.Input
             * @memberof tss.Input
             * @return  {void}
             */
            Reset: function () {
                this.InnerElement.value = "";
                this._observable.Value$1 = "";
            },
            Attach: function (handler) {
                this.addInputUpdated(function (s, _) {
                    handler(s);
                });
            },
            SetText: function (text) {
                this.Text = text;
                return this;
            },
            ClearText: function () {
                this.SetText("");
                return this;
            },
            Disabled: function (value) {
                if (value === void 0) { value = true; }
                this.IsEnabled = !value;
                return this;
            },
            NoSpellCheck: function () {
                this.InnerElement.spellcheck = false;
                return this;
            },
            Required: function () {
                this.IsRequired = true;
                return this;
            },
            Focus: function () {
                tss.domObs.WhenMounted(this.InnerElement, H5.fn.bind(this, function () {
                    try {
                        this.InnerElement.scrollIntoViewIfNeeded();
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        this.InnerElement.scrollIntoView();
                    }
                    this.InnerElement.focus();
                }));
                return this;
            },
            AsObservable: function () {
                return this._observable;
            },
            Render: function () {
                return this._container;
            }
        }
    }; });

    H5.define("tss.ContextMenu.Item", {
        inherits: function () { return [tss.CB(tss.ContextMenu.Item,HTMLElement)]; },
        $kind: "nested class",
        fields: {
            _innerComponent: null,
            _subMenu: null,
            CurrentlyMouseovered: false
        },
        events: {
            PossiblyOpenSubMenu: null
        },
        props: {
            HasSubMenu: {
                get: function () {
                    return this._subMenu != null;
                }
            },
            Type: {
                get: function () {
                    if (this.InnerElement.classList.contains("tss-contextmenu-item")) {
                        return "tss-contextmenu-item";
                    }
                    if (this.InnerElement.classList.contains("tss-contextmenu-header")) {
                        return "tss-contextmenu-header";
                    }
                    return "tss-contextmenu-divider";
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.ContextMenu.ItemType, this.Type));
                    this.InnerElement.classList.add(System.Enum.toString(tss.ContextMenu.ItemType, value));

                    if (value === "tss-contextmenu-item") {
                        this.InnerElement.tabIndex = 0;
                    } else {
                        this.InnerElement.tabIndex = -1;
                    }
                }
            },
            IsEnabled: {
                get: function () {
                    return !this.InnerElement.classList.contains("tss-disabled");
                },
                set: function (value) {
                    if (value) {
                        this.InnerElement.classList.remove("tss-disabled");
                        if (this.Type === "tss-contextmenu-item") {
                            this.InnerElement.tabIndex = 0;
                        }
                    } else {
                        this.InnerElement.classList.add("tss-disabled");
                        this.InnerElement.tabIndex = -1;
                    }
                }
            },
            Text: {
                get: function () {
                    return this.InnerElement.innerText;
                },
                set: function (value) {
                    this.InnerElement.innerText = value;
                }
            }
        },
        alias: ["Render", "tss$IC$Render"],
        ctors: {
            init: function () {
                this.CurrentlyMouseovered = false;
            },
            ctor: function (text) {
                if (text === void 0) { text = ""; }

                this.$initialize();
                tss.CB(tss.ContextMenu.Item,HTMLElement).ctor.call(this);
                this._innerComponent = null;
                this.InnerElement = tss.UI.Button(tss.UI._$2("tss-contextmenu-item", void 0, void 0, void 0, void 0, void 0, text, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0));
                this.AttachClick();
                this.InnerElement.addEventListener("mouseenter", H5.fn.cacheBind(this, this.OnItemMouseEnter));
                this.InnerElement.addEventListener("mouseleave", H5.fn.cacheBind(this, this.OnItemMouseLeave));
            },
            $ctor1: function (component) {
                this.$initialize();
                tss.CB(tss.ContextMenu.Item,HTMLElement).ctor.call(this);
                var itf;
                if (((itf = H5.as(component, tss.ITF))) != null && (H5.is(itf, tss.Button) || H5.is(itf, tss.Link))) {
                    tss.ITFX.SetTextAlign(tss.ITF, itf, "tss-textalign-left");
                }

                this._innerComponent = component.tss$IC$Render();
                this.InnerElement = tss.UI.Div(tss.UI._$1("tss-contextmenu-item"), this._innerComponent);
                this.InnerElement.appendChild(this._innerComponent);
                this.AttachClick();
                this.InnerElement.addEventListener("mouseenter", H5.fn.cacheBind(this, this.OnItemMouseEnter));
                this.InnerElement.addEventListener("mouseleave", H5.fn.cacheBind(this, this.OnItemMouseLeave));
            }
        },
        methods: {
            Render: function () {
                return this.InnerElement;
            },
            Header: function () {
                this.Type = "tss-contextmenu-header";
                return this;
            },
            Divider: function () {
                this.Type = "tss-contextmenu-divider";
                return this;
            },
            Disabled: function (value) {
                if (value === void 0) { value = true; }
                this.IsEnabled = !value;
                return this;
            },
            SubMenu: function (cm) {
                this._subMenu = cm;
                if (System.Linq.Enumerable.from(cm._items, tss.ContextMenu.Item).any(function (i) {
                        return i.HasSubMenu;
                    })) {
                    throw new System.InvalidOperationException.$ctor1("Sub menus of submenus currently not supported");
                }

                this.InnerElement.appendChild(tss.UI.I(tss.UI._$1("las la-angle-right tss-contextmenu-submenu-button-icon")));
                return this;
            },
            OnClick$2: function (e) {
                if (this.Type === "tss-contextmenu-item") {
                    if (this.HasSubMenu) {
                        this._subMenu.OnItemClick(e);
                    } else {
                        this.addClicked(e);
                        if (H5.is(this._innerComponent, System.Object)) {
                            this._innerComponent.onclick = H5.fn.combine(this._innerComponent.onclick, H5.fn.bind(this, function (e2) {
                                if (!H5.rE(this._innerComponent.tagName, "A") || System.String.isNullOrWhiteSpace(this._innerComponent.href)) {
                                    tss.UI.StopEvent(e2);
                                }

                                e(this, e2);
                            }));
                        }
                    }
                }

                return this;
            },
            OnClick$1: function (action) {
                return this.OnClick$2(function (_, __) {
                    action();
                });
            },
            HideSubmenus: function () {
                if (this._subMenu != null) {
                    this._subMenu.Hide();
                    this.InnerElement.classList.remove("tss-selected");
                }
            },
            HookMouseEnter: function (mouseEventCallback) {
                this.addPossiblyOpenSubMenu(mouseEventCallback);
            },
            UnHookMouseEnter: function (mouseEventCallback) {
                this.removePossiblyOpenSubMenu(mouseEventCallback);
            },
            OnItemMouseEnter: function (mouseEvent) {
                var e;
                if (((e = mouseEvent)) != null) {
                    if (this.Type === "tss-contextmenu-item") {
                        this.InnerElement.focus();
                        this.CurrentlyMouseovered = true;
                        !H5.staticEquals(this.PossiblyOpenSubMenu, null) ? this.PossiblyOpenSubMenu(this) : null;
                    }
                }
            },
            OnItemMouseLeave: function (mouseEvent) {
                var e;
                if (((e = mouseEvent)) != null) {
                    this.CurrentlyMouseovered = false;
                }
            }
        }
    });

    H5.define("tss.Dropdown.Item", {
        inherits: [tss.IC],
        $kind: "nested class",
        fields: {
            InnerElement: null,
            SelectedElement: null,
            Data: null
        },
        events: {
            BeforeSelectedItem: null,
            SelectedItem: null
        },
        props: {
            Type: {
                get: function () {
                    if (this.InnerElement.classList.contains("tss-dropdown-item")) {
                        return "tss-contextmenu-item";
                    }
                    if (this.InnerElement.classList.contains("tss-dropdown-header")) {
                        return "tss-contextmenu-header";
                    }
                    return "tss-contextmenu-divider";
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.Dropdown.ItemType, this.Type));
                    this.InnerElement.classList.add(System.Enum.toString(tss.Dropdown.ItemType, value));

                    if (value === "tss-contextmenu-item") {
                        this.InnerElement.tabIndex = 0;
                    } else {
                        this.InnerElement.tabIndex = -1;
                    }
                }
            },
            IsEnabled: {
                get: function () {
                    return !this.InnerElement.classList.contains("tss-disabled");
                },
                set: function (value) {
                    if (value) {
                        this.InnerElement.classList.remove("tss-disabled");
                        if (this.Type === "tss-contextmenu-item") {
                            this.InnerElement.tabIndex = 0;
                        }
                    } else {
                        this.InnerElement.classList.add("tss-disabled");
                        this.InnerElement.tabIndex = -1;
                    }
                }
            },
            IsSelected: {
                get: function () {
                    return this.InnerElement.classList.contains("tss-selected");
                },
                set: function (value) {
                    if (value && H5.is(this.BeforeSelectedItem, System.Object)) {
                        var shouldSelect = this.BeforeSelectedItem(this);
                        if (!shouldSelect) {
                            return;
                        }
                    }

                    if (value) {
                        this.InnerElement.classList.add("tss-selected");
                    } else {
                        this.InnerElement.classList.remove("tss-selected");
                    }
                    !H5.staticEquals(this.SelectedItem, null) ? this.SelectedItem(this) : null;
                }
            },
            Text: {
                get: function () {
                    return this.InnerElement.innerText;
                },
                set: function (value) {
                    this.InnerElement.innerText = value;
                }
            },
            IsMountedWithinMultiSelectDropdown: {
                get: function () {
                    return this.InnerElement.parentElement.classList.contains(tss.Dropdown._multiSelectDropdownClassName);
                }
            }
        },
        alias: ["Render", "tss$IC$Render"],
        ctors: {
            ctor: function (text, selectedText) {
                if (selectedText === void 0) { selectedText = null; }

                tss.Dropdown.Item.$ctor1.call(this, tss.UI.TextBlock(text), tss.UI.TextBlock(System.String.isNullOrEmpty(selectedText) ? text : selectedText));
            },
            $ctor1: function (content, selectedContent) {
                this.$initialize();
                this.InnerElement = tss.UI.Button(tss.UI._$1("tss-dropdown-item"));
                this.InnerElement.appendChild(content.tss$IC$Render());

                if (selectedContent == null || H5.rE(selectedContent, content)) {
                    this.SelectedElement = this.InnerElement.cloneNode(true);
                } else {
                    this.SelectedElement = tss.UI.Button(tss.UI._$1("tss-dropdown-item"));
                    this.SelectedElement.appendChild(selectedContent.tss$IC$Render());
                }

                this.InnerElement.addEventListener("click", H5.fn.cacheBind(this, this.OnItemClick));
                this.InnerElement.addEventListener("mouseover", H5.fn.cacheBind(this, this.OnItemMouseOver));
            }
        },
        methods: {
            Render: function () {
                return this.InnerElement;
            },
            RenderSelected: function () {
                return this.SelectedElement;
            },
            Header: function () {
                this.Type = "tss-contextmenu-header";
                return this;
            },
            Divider: function () {
                this.Type = "tss-contextmenu-divider";
                return this;
            },
            Disabled: function (value) {
                if (value === void 0) { value = true; }
                this.IsEnabled = !value;
                return this;
            },
            Selected: function () {
                this.IsSelected = true;
                return this;
            },
            SelectedIf: function (shouldSelect) {
                if (shouldSelect) {
                    this.IsSelected = true;
                }
                return this;
            },
            SetData: function (data) {
                this.Data = data;
                return this;
            },
            OnSelected: function (whenSelected, whenDeselected) {
                if (whenDeselected === void 0) { whenDeselected = null; }
                this.addSelectedItem(function (sender) {
                    if (sender.IsSelected) {
                        !H5.staticEquals(whenSelected, null) ? whenSelected(sender) : null;
                    } else {
                        !H5.staticEquals(whenDeselected, null) ? whenDeselected(sender) : null;
                    }
                });
                return this;
            },
            OnBeforeSelected: function (onBeforeSelect) {
                this.addBeforeSelectedItem(onBeforeSelect);
                return this;
            },
            OnItemClick: function (e) {
                if (this.Type === "tss-contextmenu-item") {
                    if (this.IsMountedWithinMultiSelectDropdown) {
                        this.IsSelected = !this.IsSelected;
                    } else {
                        this.IsSelected = true;
                    }
                }
            },
            OnItemMouseOver: function (ev) {
                if (this.Type === "tss-contextmenu-item") {
                    this.InnerElement.focus();
                }
            }
        }
    });

    H5.define("tss.EditableArea", {
        inherits: function () { return [tss.CB(tss.EditableArea,HTMLTextAreaElement),tss.ITF,tss.IObservableComponent(System.String)]; },
        fields: {
            _container: null,
            _labelText: null,
            _editView: null,
            _labelView: null,
            _observable: null,
            _editIcon: null,
            _cancelEditIcon: null,
            _isCanceling: false
        },
        events: {
            Saved: null
        },
        props: {
            Size: {
                get: function () {
                    return tss.ITFX.FromClassList$1(this.InnerElement, "tss-fontsize-small");
                },
                set: function (value) {
                    var current = System.Enum.toString(tss.TS, this.Size);
                    this.InnerElement.classList.remove(current);
                    this._labelText.classList.remove(current);
                    this._editIcon.classList.remove(current);
                    this._cancelEditIcon.classList.remove(current);
                    var newValue = System.Enum.toString(tss.TS, value);
                    this.InnerElement.classList.add(newValue);
                    this._labelText.classList.add(newValue);
                    this._editIcon.classList.add(newValue);
                    this._cancelEditIcon.classList.add(newValue);
                }
            },
            Weight: {
                get: function () {
                    return tss.ITFX.FromClassList$2(this.InnerElement, "tss-fontweight-regular");
                },
                set: function (value) {
                    var current = System.Enum.toString(tss.TW, this.Weight);
                    var newValue = System.Enum.toString(tss.TW, value);
                    this.InnerElement.classList.remove(current);
                    this._labelText.classList.remove(current);
                    this.InnerElement.classList.add(newValue);
                    this._labelText.classList.add(newValue);
                }
            },
            TextAlign: {
                get: function () {
                    return tss.ITFX.FromClassList(this.InnerElement, "tss-textalign-left");
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.TA, this.TextAlign));
                    this.InnerElement.classList.add(System.Enum.toString(tss.TA, value));
                }
            },
            IsEditingMode: {
                get: function () {
                    return this._container.classList.contains("tss-editing");
                },
                set: function (value) {
                    if (value) {
                        var labelRect = this._labelText.getBoundingClientRect();
                        this.InnerElement.style.minWidth = System.Double.format((labelRect.width * 1.2)) + "px";
                        this.InnerElement.style.minHeight = System.Double.format((labelRect.height * 1.2)) + "px";
                        this._container.classList.add("tss-editing");
                    } else {
                        this._container.classList.remove("tss-editing");
                    }
                }
            }
        },
        alias: [
            "Size", "tss$ITF$Size",
            "Weight", "tss$ITF$Weight",
            "TextAlign", "tss$ITF$TextAlign",
            "Render", "tss$IC$Render",
            "AsObservable", "tss$IObservableComponent$System$String$AsObservable"
        ],
        ctors: {
            init: function () {
                this._observable = new (tss.SettableObservableT(System.String))();
                this._isCanceling = false;
            },
            ctor: function (text) {
                if (text === void 0) { text = ""; }

                this.$initialize();
                tss.CB(tss.EditableArea,HTMLTextAreaElement).ctor.call(this);
                this._labelText = tss.UI.Span(tss.UI._$2("tss-editablelabel-textspan", void 0, void 0, void 0, void 0, void 0, text, void 0, void 0, void 0, void 0, void 0, "Click to edit", void 0, void 0));
                this._editIcon = tss.UI.I(tss.UI._$1("tss-editablelabel-edit-icon las la-edit"));
                this._labelView = tss.UI.Div$1(tss.UI._$1("tss-editablelabel-displaybox"), this._labelText, this._editIcon);

                this.InnerElement = tss.UI.TextArea(tss.UI._$2("tss-editablelabel-textbox", void 0, void 0, void 0, void 0, void 0, void 0, "text", void 0, void 0, void 0, void 0, void 0, void 0, void 0));
                this._cancelEditIcon = tss.UI.Div(tss.UI._$2("tss-editablelabel-cancel-icon", void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, "Cancel edit", void 0, void 0), tss.UI.I(tss.UI._$1("las la-times")));
                this._editView = tss.UI.Div$1(tss.UI._$1("tss-editablelabel-editbox"), this.InnerElement, this._cancelEditIcon);

                this._container = tss.UI.Div$1(tss.UI._$1("tss-editablelabel"), this._labelView, this._editView);

                this.AttachChange();
                this.AttachInput();
                this.AttachFocus();
                this.AttachBlur();
                this.AttachKeys();

                this._labelView.addEventListener("click", H5.fn.cacheBind(this, this.BeginEditing));
                this._cancelEditIcon.addEventListener("click", H5.fn.cacheBind(this, this.CancelEditing));

                this.OnKeyUp(H5.fn.bind(this, function (_, e) {
                    if (H5.rE(e.key, "Escape")) {
                        this.CancelEditing();
                    }
                }));

                this.OnBlur(H5.fn.bind(this, function (_, __) {
                    window.setTimeout(H5.fn.cacheBind(this, this.SaveEditing), 150);
                }));
            }
        },
        methods: {
            OnSave: function (onSave) {
                this.addSaved(onSave);
                return this;
            },
            BeginEditing: function () {
                this.InnerElement.value = this._labelText.textContent;
                this.IsEditingMode = true;
                this._isCanceling = false;
                this.InnerElement.focus();
            },
            CancelEditing: function () {
                this._isCanceling = true;
                this.IsEditingMode = false;
                this.InnerElement.blur();
            },
            SaveEditing: function (e) {
                if (this._isCanceling) {
                    return;
                }

                var newValue = this.InnerElement.value;

                if (!H5.rE(newValue, this._labelText.textContent)) {
                    if (H5.staticEquals(this.Saved, null) || this.Saved(this, newValue)) {
                        this._labelText.textContent = newValue;
                        this._observable.Value$1 = newValue;
                        this.IsEditingMode = false;
                    } else {
                        this.InnerElement.focus();
                    }
                }
            },
            SetText: function (text) {
                if (this.IsEditingMode) {
                    this.InnerElement.value = text;
                } else {
                    this._labelText.textContent = text;
                }

                this._observable.Value$1 = text;

                return this;
            },
            Render: function () {
                return this._container;
            },
            AsObservable: function () {
                return this._observable;
            }
        }
    });

    H5.define("tss.EditableLabel", {
        inherits: function () { return [tss.CB(tss.EditableLabel,HTMLInputElement),tss.ITF,tss.IObservableComponent(System.String)]; },
        fields: {
            _container: null,
            _labelText: null,
            _editIcon: null,
            _cancelEditIcon: null,
            _editView: null,
            _labelView: null,
            _observable: null,
            _isCanceling: false
        },
        events: {
            Saved: null
        },
        props: {
            Size: {
                get: function () {
                    return tss.ITFX.FromClassList$1(this.InnerElement, "tss-fontsize-small");
                },
                set: function (value) {
                    var current = System.Enum.toString(tss.TS, this.Size);
                    this.InnerElement.classList.remove(current);
                    this._labelText.classList.remove(current);
                    this._editIcon.classList.remove(current);
                    this._cancelEditIcon.classList.remove(current);
                    var newValue = System.Enum.toString(tss.TS, value);
                    this.InnerElement.classList.add(newValue);
                    this._labelText.classList.add(newValue);
                    this._editIcon.classList.add(newValue);
                    this._cancelEditIcon.classList.add(newValue);
                }
            },
            Weight: {
                get: function () {
                    return tss.ITFX.FromClassList$2(this.InnerElement, "tss-fontweight-regular");
                },
                set: function (value) {
                    var current = System.Enum.toString(tss.TW, this.Weight);
                    var newValue = System.Enum.toString(tss.TW, value);
                    this.InnerElement.classList.remove(current);
                    this._labelText.classList.remove(current);
                    this.InnerElement.classList.add(newValue);
                    this._labelText.classList.add(newValue);
                }
            },
            TextAlign: {
                get: function () {
                    return tss.ITFX.FromClassList(this.InnerElement, "tss-textalign-left");
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.TA, this.TextAlign));
                    this.InnerElement.classList.add(System.Enum.toString(tss.TA, value));
                }
            },
            IsEditingMode: {
                get: function () {
                    return this._container.classList.contains("tss-editing");
                },
                set: function (value) {
                    if (value) {
                        var labelRect = this._labelText.getBoundingClientRect();
                        this.InnerElement.style.minWidth = System.Double.format((labelRect.width * 1.2)) + "px";
                        this._container.classList.add("tss-editing");
                    } else {
                        this._container.classList.remove("tss-editing");
                    }
                }
            }
        },
        alias: [
            "Size", "tss$ITF$Size",
            "Weight", "tss$ITF$Weight",
            "TextAlign", "tss$ITF$TextAlign",
            "Render", "tss$IC$Render",
            "AsObservable", "tss$IObservableComponent$System$String$AsObservable"
        ],
        ctors: {
            init: function () {
                this._observable = new (tss.SettableObservableT(System.String))();
                this._isCanceling = false;
            },
            ctor: function (text) {
                if (text === void 0) { text = ""; }

                this.$initialize();
                tss.CB(tss.EditableLabel,HTMLInputElement).ctor.call(this);
                this._labelText = tss.UI.Span(tss.UI._$2("tss-editablelabel-textspan", void 0, void 0, void 0, void 0, void 0, text, void 0, void 0, void 0, void 0, void 0, "Click to edit", void 0, void 0));
                this._editIcon = tss.UI.I(tss.UI._$1("tss-editablelabel-edit-icon las la-edit"));
                this._labelView = tss.UI.Div$1(tss.UI._$1("tss-editablelabel-displaybox"), this._labelText, this._editIcon);

                this.InnerElement = tss.UI.TextBox(tss.UI._$2("tss-editablelabel-textbox", void 0, void 0, void 0, void 0, void 0, void 0, "text", void 0, void 0, void 0, void 0, void 0, void 0, void 0));
                this._cancelEditIcon = tss.UI.Div(tss.UI._$2("tss-editablelabel-cancel-icon", void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, "Cancel edit", void 0, void 0), tss.UI.I(tss.UI._$1("las la-times")));
                this._editView = tss.UI.Div$1(tss.UI._$1("tss-editablelabel-editbox"), this.InnerElement, this._cancelEditIcon);

                this._container = tss.UI.Div$1(tss.UI._$1("tss-editablelabel"), this._labelView, this._editView);

                this.AttachChange();
                this.AttachInput();
                this.AttachFocus();
                this.AttachBlur();
                this.AttachKeys();

                this._labelView.addEventListener("click", H5.fn.cacheBind(this, this.BeginEditing));
                this._cancelEditIcon.addEventListener("click", H5.fn.cacheBind(this, this.CancelEditing));

                this.OnKeyUp(H5.fn.bind(this, function (_, e) {
                    if (H5.rE(e.key, "Enter")) {
                        this.BeginSaveEditing();
                    } else {
                        if (H5.rE(e.key, "Escape")) {
                            this.CancelEditing();
                        }
                    }
                }));

                this.OnBlur(H5.fn.bind(this, function (_, __) {
                    this.BeginSaveEditing();
                }));
            }
        },
        methods: {
            OnSave: function (onSave) {
                this.addSaved(onSave);
                return this;
            },
            BeginEditing: function () {
                this.InnerElement.value = this._labelText.textContent;
                this.IsEditingMode = true;
                this._isCanceling = false;
                this.InnerElement.focus();
            },
            CancelEditing: function () {
                this._isCanceling = true;
                this.IsEditingMode = false;
                this.InnerElement.blur();
            },
            BeginSaveEditing: function () {
                window.setTimeout(H5.fn.cacheBind(this, this.SaveEditing), 150);
            },
            SaveEditing: function (e) {
                if (this._isCanceling) {
                    return;
                }

                var newValue = this.InnerElement.value;

                if (!H5.rE(newValue, this._labelText.textContent)) {
                    if (H5.staticEquals(this.Saved, null) || this.Saved(this, newValue)) {
                        this._labelText.textContent = newValue;
                        this._observable.Value$1 = newValue;
                        this.IsEditingMode = false;
                    } else {
                        this.InnerElement.focus();
                    }
                }
            },
            SetText: function (text) {
                if (this.IsEditingMode) {
                    this.InnerElement.value = text;
                } else {
                    this._labelText.textContent = text;
                }

                this._observable.Value$1 = text;

                return this;
            },
            Render: function () {
                return this._container;
            },
            AsObservable: function () {
                return this._observable;
            }
        }
    });

    H5.define("tss.FileSelector", {
        inherits: function () { return [tss.IC,tss.ICVT(tss.FileSelector)]; },
        fields: {
            _fileInput: null,
            _stack: null,
            _textBox: null,
            _container: null,
            _selectedFile: null
        },
        events: {
            FileSelected: null
        },
        props: {
            SelectedFile: {
                get: function () {
                    return this._selectedFile;
                },
                set: function (value) {
                    this._selectedFile = value;
                    !H5.staticEquals(this.FileSelected, null) ? this.FileSelected(this, value) : null;
                }
            },
            Placeholder: {
                get: function () {
                    return this._textBox.Placeholder;
                },
                set: function (value) {
                    this._textBox.Placeholder = value;
                }
            },
            Error: {
                get: function () {
                    return this._textBox.Error;
                },
                set: function (value) {
                    this._textBox.Error = value;
                }
            },
            IsInvalid: {
                get: function () {
                    return this._textBox.IsInvalid;
                },
                set: function (value) {
                    this._textBox.IsInvalid = value;
                }
            },
            IsRequired: {
                get: function () {
                    return this._textBox.IsRequired;
                },
                set: function (value) {
                    this._textBox.IsRequired = value;
                }
            },
            /**
             * Gets or sets the type of files accepted by this selector. See https://www.w3schools.com/tags/att_input_accept.asp for more information.
             Valid values are a list of extensions, like ".txt|.doc|.docx", of media type, such as  "audio/*|video/*|image/*", or a combination of both
             *
             * @instance
             * @public
             * @memberof tss.FileSelector
             * @function Accepts
             * @type string
             */
            Accepts: {
                get: function () {
                    return this._fileInput.accept;
                },
                set: function (value) {
                    this._fileInput.accept = value;
                }
            }
        },
        alias: [
            "Error", "tss$ICV$Error",
            "IsInvalid", "tss$ICV$IsInvalid",
            "Attach", "tss$ICVT$tss$FileSelector$Attach",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                var updateFile = null;
                this._fileInput = tss.UI.FileInput(tss.UI._$1("tss-file-input"));
                this._textBox = tss.ICX.AlignCenter(tss.TextBox, tss.ICX.Grow(tss.TextBox, tss.UI.TextBox$1().ReadOnly(), 1));
                this._stack = tss.ICTX.Children$6(tss.S, tss.ICX.WidthStretch(tss.S, tss.UI.Stack().Horizontal()), [this._textBox, tss.UI.Button$1().SetTitle("Click to select file...").NoWrap().SetIcon("las la-folder-open").OnClick(H5.fn.bind(this, function (s, e) {
                    this._fileInput.click();
                })).NoBorder().NoBackground(), tss.UI.Raw$2(this._fileInput)]);
                updateFile = H5.fn.bind(this, function () {
                    if (this._fileInput.files.length > 0) {
                        this.SelectedFile = this._fileInput.files[0];
                        this._textBox.Text = this.GetFileName(this._fileInput.value);
                    }
                });

                this._fileInput.onchange = function (_) {
                    updateFile();
                };

                this._container = tss.UI.Div(tss.UI._$1("tss-fileselector"), this._stack.tss$IC$Render());

                ;
            }
        },
        methods: {
            OnFileSelected: function (handler) {
                this.addFileSelected(handler);
                return this;
            },
            SetPlaceholder: function (placeholder) {
                this.Placeholder = placeholder;
                return this;
            },
            /**
             * Sets the type of files accepted by this selector. See https://www.w3schools.com/tags/att_input_accept.asp for more information.
             Valid values are a list of extensions, like ".txt|.doc|.docx", of media type, such as  "audio/*|video/*|image/*", or a combination of both
             *
             * @instance
             * @public
             * @this tss.FileSelector
             * @memberof tss.FileSelector
             * @param   {string}              accepts
             * @return  {tss.FileSelector}
             */
            SetAccepts: function (accepts) {
                this.Accepts = accepts;
                return this;
            },
            Required: function () {
                this.IsRequired = true;
                return this;
            },
            Attach: function (handler) {
                this.addFileSelected(function (s, _) {
                    handler(s);
                });
            },
            GetFileName: function (value) {
                var lastSep = System.String.lastIndexOfAny(value, System.Array.init([47, 92], System.Char));
                return value.substr(((lastSep + 1) | 0));
            },
            Render: function () {
                return this._container;
            }
        }
    });

    H5.define("tss.Label", {
        inherits: [tss.txt,tss.ISCS],
        statics: {
            fields: {
                _labelForId: 0,
                _callback: 0,
                _pendingCallbacks: null
            },
            ctors: {
                init: function () {
                    this._labelForId = 0;
                    this._pendingCallbacks = new (System.Collections.Generic.Dictionary$2(HTMLElement,Function)).ctor();
                }
            },
            methods: {
                TriggerAll: function () {
                    var $t;
                    $t = H5.getEnumerator(tss.Label._pendingCallbacks);
                    try {
                        while ($t.moveNext()) {
                            var kv = $t.Current;
                            kv.value();
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    tss.Label._pendingCallbacks.clear();
                },
                AutoSizeChildrenLabels: function (parent, nestingLevels) {
                    var $t, $t1, $t2;
                    var found = new (System.Collections.Generic.List$1(HTMLElement)).ctor();

                    var stack = new (System.Collections.Generic.Stack$1(HTMLElement)).ctor();
                    stack.Push(parent);
                    do {
                        var new_stack = new (System.Collections.Generic.Stack$1(HTMLElement)).ctor();
                        while (stack.Count > 0) {
                            var el = stack.Pop();
                            $t = H5.getEnumerator(el.children, Element);
                            try {
                                while ($t.moveNext()) {
                                    var e = H5.cast($t.Current, HTMLElement);
                                    if (e.classList.contains("tss-label-autowidth") && e.parentElement.classList.contains("tss-inline")) {
                                        found.add(e);
                                    } else {
                                        new_stack.Push(e);
                                    }
                                }
                            } finally {
                                if (H5.is($t, System.IDisposable)) {
                                    $t.System$IDisposable$Dispose();
                                }
                            }
                        }
                        stack = new_stack;

                        nestingLevels = (nestingLevels - 1) | 0;
                    } while (nestingLevels > 0);

                    if (found.Count === 1) {
                        System.Linq.Enumerable.from(found, HTMLElement).first().classList.remove("tss-textalign-right");
                    } else {
                        var minWidth = 10;
                        $t1 = H5.getEnumerator(found);
                        try {
                            while ($t1.moveNext()) {
                                var f = $t1.Current;
                                var rect = f.getBoundingClientRect();
                                minWidth = Math.max(minWidth, Math.max(H5.Int.clip32(rect.width), f.offsetWidth));
                            }
                        } finally {
                            if (H5.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }

                        var mw = (((minWidth + 4) | 0)) + 'px';
                        $t2 = H5.getEnumerator(found);
                        try {
                            while ($t2.moveNext()) {
                                var f1 = $t2.Current;
                                f1.style.minWidth = mw;
                            }
                        } finally {
                            if (H5.is($t2, System.IDisposable)) {
                                $t2.System$IDisposable$Dispose();
                            }
                        }
                    }
                }
            }
        },
        fields: {
            _label: null,
            _content: null
        },
        props: {
            IsRequired: {
                get: function () {
                    return this._label.classList.contains("tss-required");
                },
                set: function (value) {
                    if (value) {
                        this._label.classList.add("tss-required");
                    } else {
                        this._label.classList.remove("tss-required");
                    }
                }
            },
            IsInline: {
                get: function () {
                    return this.InnerElement.classList.contains("tss-inline");
                },
                set: function (value) {
                    if (value) {
                        this.InnerElement.classList.add("tss-inline");
                    } else {
                        this.InnerElement.classList.remove("tss-inline");
                    }
                }
            },
            Content: {
                set: function (value) {
                    var id = "";
                    tss.UI.ClearChildren(this._content);
                    if (value != null) {
                        this._content.appendChild(value.tss$IC$Render());
                        var el;
                        if (!(H5.is(value, tss.Toggle)) && ((el = (value).InnerElement)) != null) {
                            id = System.String.format("tss-label-for-{0}", [H5.box(tss.Label._labelForId, System.Int32)]);
                            tss.Label._labelForId = (tss.Label._labelForId + 1) | 0;
                            el.id = id;
                        }
                    }
                    this._label.htmlFor = id;
                }
            },
            tss$ISCS$StylingContainer: {
                get: function () {
                    return this.InnerElement;
                }
            },
            tss$ISCS$PropagateToStackItemParent: {
                get: function () {
                    return true;
                }
            }
        },
        ctors: {
            ctor: function (text) {
                if (text === void 0) { text = ""; }

                this.$initialize();
                tss.txt.$ctor1.call(this);
                this._label = tss.UI.Label(tss.UI._$2("tss-fontsize-small tss-fontweight-semibold tss-fontcolor-default", void 0, void 0, void 0, void 0, void 0, text, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0));
                this._content = tss.UI.Div$2(tss.UI._());
                this.InnerElement = tss.UI.Div$1(tss.UI._$1("tss-label"), this._label, this._content);
            },
            $ctor1: function (component) {
                this.$initialize();
                tss.txt.$ctor1.call(this);
                this._label = tss.UI.Label(tss.UI._$1("tss-fontsize-small tss-fontweight-semibold tss-fontcolor-default"), [component.tss$IC$Render()]);
                this._content = tss.UI.Div$2(tss.UI._());
                this.InnerElement = tss.UI.Div$1(tss.UI._$1("tss-label"), this._label, this._content);
            }
        },
        methods: {
            SetContent: function (content) {
                this.Content = content;
                return this;
            },
            Inline: function () {
                this.IsInline = true;
                return this;
            },
            SetMinLabelWidth: function (unitSize) {
                this._label.style.minWidth = unitSize.toString();
                return this;
            },
            AutoWidth: function (nestingLevels, alignRight) {
                if (nestingLevels === void 0) { nestingLevels = 1; }
                if (alignRight === void 0) { alignRight = false; }
                this._label.classList.add("tss-label-autowidth");

                if (alignRight) {
                    this._label.classList.add("tss-textalign-right");
                }

                tss.domObs.WhenMounted(this.InnerElement, H5.fn.bind(this, function () {
                    var parent = this.InnerElement;
                    var levels = nestingLevels;
                    do {
                        parent = parent.parentElement;
                        if (!parent.classList.contains("tss-stack-item")) {
                            levels = (levels - 1) | 0;
                        } else {
                            nestingLevels = (nestingLevels + 1) | 0;
                        }
                    } while (levels > 0 && H5.is(parent.parentElement, System.Object));

                    if (H5.is(parent, System.Object)) {
                        System.Collections.Generic.CollectionExtensions.TryAdd(HTMLElement, Function, tss.Label._pendingCallbacks, parent, function () {
                            tss.Label.AutoSizeChildrenLabels(parent, ((nestingLevels + 2) | 0));
                        });
                        window.cancelAnimationFrame(tss.Label._callback);
                        tss.Label._callback = window.requestAnimationFrame(function (_) {
                            tss.Label.TriggerAll();
                        });
                    }
                }));

                return this;
            }
        }
    });

    /**
     * A Layer is a technical component that does not have specific Design guidance.
     Layers are used to render content outside of a DOM tree, at the end of the document. This allows content to escape traditional boundaries caused by "overflow: hidden" css rules and keeps it on the top without using z-index rules. This is useful for example in
     ContextualMenu and Tooltip scenarios, where the content should always overlay everything else.
     This non-generic Layer class is appropriate when the core Layer functionality is all that you require and none of its behaviours need to be extended - should you need a Layer base class that CAN be derived from (such as the ContextMenu, for example), use the
     generic Layer class. The reason for the two classes is to avoid confusion as this can NOT be derived from and the generic version MUST be derived from. The generic version exists to maintain the type of component in chained calls made on the ComponentBase
     class that they both are derived from (when the OnClick method is called on a ContextMenu then you expect a ContextMenu to be returned and not simply a Layer instance).
     *
     * @public
     * @class tss.Layer
     * @augments tss.LayerT
     */
    H5.define("tss.Layer", {
        inherits: function () { return [tss.LayerT(tss.Layer)]; }
    });

    H5.define("tss.Modal", {
        inherits: function () { return [tss.LayerT(tss.Modal),tss.ISCS,tss.IHBG]; },
        fields: {
            _closeButton: null,
            _modalHeader: null,
            _modalFooter: null,
            _modalOverlay: null,
            _modalContent: null,
            _modalHeaderCommands: null,
            _modalFooterCommands: null,
            _modalHeaderContents: null,
            _modalFooterContents: null,
            _modal: null,
            _isDragged: false,
            _startPoint: null,
            AnimateOnShow: false
        },
        events: {
            Shown: null,
            Hidden: null
        },
        props: {
            StylingContainer: {
                get: function () {
                    return this._modal;
                }
            },
            PropagateToStackItemParent: {
                get: function () {
                    return false;
                }
            },
            Background: {
                get: function () {
                    return this._modal.style.background;
                },
                set: function (value) {
                    this._modal.style.background = value;
                }
            },
            Content: {
                get: function () {
                    return this._content;
                },
                set: function (value) {
                    tss.UI.ClearChildren(this._modalContent);
                    ;
                    this._content = value;
                    if (this._content != null) {
                        this._modalContent.appendChild(this._content.tss$IC$Render());
                    }
                }
            },
            CanLightDismiss: {
                get: function () {
                    return this._modalOverlay.classList.contains("tss-modal-lightDismiss");
                },
                set: function (value) {
                    if (value) {
                        this._modalOverlay.classList.add("tss-modal-lightDismiss");
                        this._modalOverlay.addEventListener("click", H5.fn.cacheBind(this, this.OnCloseClick));
                        this._modalOverlay.addEventListener("dblclick", H5.fn.cacheBind(this, this.OnCloseClick));
                        this._modalOverlay.addEventListener("contextmenu", H5.fn.cacheBind(this, this.OnCloseClick));
                    } else {
                        this._modalOverlay.classList.remove("tss-modal-lightDismiss");
                        this._modalOverlay.removeEventListener("click", H5.fn.cacheBind(this, this.OnCloseClick));
                        this._modalOverlay.removeEventListener("dblclick", H5.fn.cacheBind(this, this.OnCloseClick));
                        this._modalOverlay.removeEventListener("contextmenu", H5.fn.cacheBind(this, this.OnCloseClick));
                    }
                }
            },
            IsDark: {
                get: function () {
                    return this._contentHtml.classList.contains("tss-dark");
                },
                set: function (value) {
                    if (value) {
                        this._contentHtml.classList.add("tss-dark");
                    } else {
                        this._contentHtml.classList.remove("tss-dark");
                    }
                }
            },
            IsDraggable: {
                get: function () {
                    return this._modal.classList.contains("tss-modal-draggable");
                },
                set: function (value) {
                    if (value) {
                        this._modal.classList.add("tss-modal-draggable");
                        this._modal.addEventListener("mousedown", H5.fn.cacheBind(this, this.OnDragMouseDown));
                    } else {
                        this._modal.classList.remove("tss-modal-draggable");
                        this._modal.removeEventListener("mousedown", H5.fn.cacheBind(this, this.OnDragMouseDown));
                    }
                }
            },
            IsNonBlocking: {
                get: function () {
                    return this._contentHtml.classList.contains("tss-modal-modeless");
                },
                set: function (value) {
                    if (value) {
                        this._contentHtml.classList.add("tss-modal-modeless");
                        if (this.IsVisible) {
                            document.body.style.overflowY = "";
                        }
                    } else {
                        this._contentHtml.classList.remove("tss-modal-modeless");
                        if (this.IsVisible) {
                            document.body.style.overflowY = "hidden";
                        }
                    }
                }
            },
            WillShowCloseButton: {
                get: function () {
                    return !H5.rE(this._closeButton.style.display, "none");
                },
                set: function (value) {
                    if (value) {
                        this._closeButton.style.display = "";
                        this._modalHeader.style.display = "";
                    } else {
                        this._closeButton.style.display = "none";
                    }
                }
            }
        },
        alias: [
            "StylingContainer", "tss$ISCS$StylingContainer",
            "PropagateToStackItemParent", "tss$ISCS$PropagateToStackItemParent",
            "Background", "tss$IHBG$Background"
        ],
        ctors: {
            init: function () {
                this.AnimateOnShow = true;
            },
            ctor: function (header) {
                if (header === void 0) { header = null; }

                this.$initialize();
                tss.LayerT(tss.Modal).ctor.call(this);
                this._modalHeaderContents = tss.UI.Div$2(tss.UI._$1("tss-modal-header-content"));
                this._modalFooterContents = tss.UI.Div$2(tss.UI._$1("tss-modal-footer-content"));

                this._modalHeaderCommands = tss.UI.Div$2(tss.UI._$1("tss-modal-header-commands"));
                this._modalFooterCommands = tss.UI.Div$2(tss.UI._$1("tss-modal-footer-commands"));

                this._modalHeader = tss.UI.Div$1(tss.UI._$1("tss-modal-header"), this._modalHeaderContents, this._modalHeaderCommands);
                this._modalFooter = tss.UI.Div$1(tss.UI._$1("tss-modal-footer"), this._modalFooterContents, this._modalFooterCommands);

                if (header != null) {
                    this._modalHeaderContents.appendChild(header.tss$IC$Render());
                } else {
                    this._modalHeader.style.display = "none";
                }

                this._closeButton = tss.UI.Button(tss.UI._$2("tss-modal-button las la-times", void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, H5.fn.bind(this, function (el) {
                    el.onclick = H5.fn.bind(this, function (e) {
                        this.Hide();
                    });
                }), void 0));
                this._modalHeaderCommands.appendChild(this._closeButton);

                this._modalContent = tss.UI.Div$2(tss.UI._$1("tss-modal-content"));
                this._modal = tss.UI.Div$2(tss.UI._$2("tss-modal", void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, function (s) {
                    s.transform = "translate(0px,0px)";
                }), [this._modalHeader, this._modalContent, this._modalFooter]);
                this._modalOverlay = tss.UI.Div$2(tss.UI._$1("tss-modal-overlay"));
                this._contentHtml = tss.UI.Div$1(tss.UI._$1("tss-modal-container"), this._modalOverlay, this._modal);
                this.IsNonBlocking = false;

                this.InnerElement = this._modal;
                this._modal.tabIndex = 0;
                this.AttachKeys();

                this.addKeyReleased(H5.fn.bind(this, function (_, e) {
                    if ((e.keyCode === 27) && this.CanLightDismiss && this.WillShowCloseButton) {
                        this.Hide();
                    }
                }));
            }
        },
        methods: {
            SetHeader: function (header) {
                this._modalHeader.style.display = "";
                tss.UI.ClearChildren(this._modalHeaderContents);
                if (H5.is(header, System.Object)) {
                    this._modalHeaderContents.appendChild(header.tss$IC$Render());
                }
                return this;
            },
            SetFooter: function (footer) {
                this._modalFooter.style.display = "";
                tss.UI.ClearChildren(this._modalFooterContents);
                if (H5.is(footer, System.Object)) {
                    this._modalFooterContents.appendChild(footer.tss$IC$Render());
                }
                return this;
            },
            SetHeaderCommands: function (commands) {
                var $t;
                if (commands === void 0) { commands = []; }
                this._modalHeader.style.display = "";
                tss.UI.ClearChildren(this._modalHeaderCommands);

                if (H5.is(commands, System.Object)) {
                    $t = H5.getEnumerator(commands);
                    try {
                        while ($t.moveNext()) {
                            var command = $t.Current;
                            this._modalHeaderCommands.appendChild(command.tss$IC$Render());
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }

                return this;
            },
            SetFooterCommands: function (commands) {
                var $t;
                if (commands === void 0) { commands = []; }
                this._modalFooter.style.display = "";
                tss.UI.ClearChildren(this._modalFooterCommands);

                if (H5.is(commands, System.Object)) {
                    $t = H5.getEnumerator(commands);
                    try {
                        while ($t.moveNext()) {
                            var command = $t.Current;
                            this._modalFooterCommands.appendChild(command.tss$IC$Render());
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }

                return this;
            },
            ContentHeight: function (height) {
                this._modalContent.style.height = height.toString();
                return this;
            },
            NoHeader: function () {
                tss.UI.ClearChildren(this._modalHeader);
                this._modalHeader.style.display = "none";
                return this;
            },
            NoFooter: function () {
                tss.UI.ClearChildren(this._modalFooter);
                this._modalFooter.style.display = "none";
                return this;
            },
            NoAnimation: function () {
                this.AnimateOnShow = false;
                return this;
            },
            ShowEmbedded: function () {
                this.WillShowCloseButton = false;
                this._modal.classList.add("tss-embedded");
                return tss.UI.Raw$2(this._modal);
            },
            CenterContent: function () {
                this._modalContent.classList.add("tss-modal-centered-content");
                return this;
            },
            NoPadding: function () {
                var $t;
                this._modalContent.style.padding = ($t = (this._modalFooter.style.padding = "unset", "unset"), this._modalHeader.style.padding = $t, $t);
                return this;
            },
            NoContentPadding: function () {
                this._modalContent.style.padding = "unset";
                return this;
            },
            ShowCloseButton: function () {
                this.WillShowCloseButton = true;
                return this;
            },
            HideCloseButton: function () {
                this.WillShowCloseButton = false;
                return this;
            },
            LightDismiss: function () {
                this.CanLightDismiss = true;
                return this;
            },
            NoLightDismiss: function () {
                this.CanLightDismiss = false;
                return this;
            },
            Dark: function () {
                this.IsDark = true;
                return this;
            },
            Draggable: function () {
                this.IsDraggable = true;
                return this;
            },
            NonBlocking: function () {
                this.IsNonBlocking = true;
                return this;
            },
            Blocking: function () {
                this.IsNonBlocking = false;
                return this;
            },
            ShowAt: function (fromTop, fromLeft, fromRight, fromBottom) {
                if (fromTop === void 0) { fromTop = null; }
                if (fromLeft === void 0) { fromLeft = null; }
                if (fromRight === void 0) { fromRight = null; }
                if (fromBottom === void 0) { fromBottom = null; }
                this._modal.style.marginTop = H5.is(fromTop, System.Object) ? fromTop.toString() : tss.us.Auto().toString();
                this._modal.style.marginLeft = H5.is(fromLeft, System.Object) ? fromLeft.toString() : tss.us.Auto().toString();
                this._modal.style.marginRight = H5.is(fromRight, System.Object) ? fromRight.toString() : tss.us.Auto().toString();
                this._modal.style.marginBottom = H5.is(fromBottom, System.Object) ? fromBottom.toString() : tss.us.Auto().toString();
                this.DoShow();
            },
            Show: function () {
                this._modal.style.marginTop = "";
                this._modal.style.marginLeft = "";
                this._modal.style.marginRight = "";
                this._modal.style.marginBottom = "";
                this.DoShow();
                return this;
            },
            DoShow: function () {
                this._modal.style.transform = "translate(0px,0px)";
                if (this.AnimateOnShow) {
                    this._modal.classList.add("tss-modal-animate");
                }
                if (!this.IsNonBlocking) {
                    document.body.style.overflowY = "hidden";
                }
                tss.LayerT(tss.Modal).prototype.Show.call(this);
                this._modal.focus();
                !H5.staticEquals(this.Shown, null) ? this.Shown(this) : null;
            },
            OnHide: function (onHide) {
                this.addHidden(onHide);
                return this;
            },
            OnShow: function (onShow) {
                this.addShown(onShow);
                return this;
            },
            Hide: function (onHidden) {
                if (onHidden === void 0) { onHidden = null; }
                !H5.staticEquals(this.Hidden, null) ? this.Hidden(this) : null;

                tss.LayerT(tss.Modal).prototype.Hide.call(this, H5.fn.bind(this, function () {
                    if (!this.IsNonBlocking) {
                        document.body.style.overflowY = "";
                    }
                    !H5.staticEquals(onHidden, null) ? onHidden() : null;
                }));
            },
            BuildRenderedContent: function () {
                return this._contentHtml;
            },
            OnCloseClick: function (ev) {
                this.Hide();
            },
            OnDragMouseMove: function (ev) {
                if (this._isDragged) {
                    var e = ev;
                    this._startPoint.X += e.movementX;
                    this._startPoint.Y += e.movementY;
                    this._modal.style.transform = this._startPoint.To();
                }
            },
            OnDragMouseUp: function (ev) {
                var e = ev;
                if (this._isDragged && e.button === 0) {
                    document.body.removeEventListener("mouseup", H5.fn.cacheBind(this, this.OnDragMouseUp));
                    document.body.removeEventListener("mousemove", H5.fn.cacheBind(this, this.OnDragMouseMove));
                    document.body.removeEventListener("mouseleave", H5.fn.cacheBind(this, this.OnDragMouseUp));
                    document.body.style.userSelect = "";
                    this._isDragged = false;
                }
            },
            OnDragMouseDown: function (ev) {
                var e = ev;
                if (e.button === 0) {
                    document.body.addEventListener("mouseup", H5.fn.cacheBind(this, this.OnDragMouseUp));
                    document.body.addEventListener("mousemove", H5.fn.cacheBind(this, this.OnDragMouseMove));
                    document.body.addEventListener("mouseleave", H5.fn.cacheBind(this, this.OnDragMouseUp));
                    this._modal.style.userSelect = "none";
                    this._startPoint = tss.Modal.TranslationPoint.From(this._modal.style.transform);
                    this._isDragged = true;
                }
            }
        }
    });

    H5.define("tss.Nav", {
        inherits: function () { return [tss.CB(tss.Nav,HTMLUListElement),tss.ICBTTC(tss.Nav.NavLink,tss.Nav.NavLink),tss.IHBG]; },
        fields: {
            SelectedLink: null,
            _children: null
        },
        props: {
            Background: {
                get: function () {
                    return this.InnerElement.style.background;
                },
                set: function (value) {
                    this.InnerElement.style.background = value;
                }
            }
        },
        alias: [
            "Background", "tss$IHBG$Background",
            "Render", "tss$IC$Render",
            "Add", "tss$ICBT$tss$Nav$NavLink$Add",
            "Clear", "tss$ICBT$tss$Nav$NavLink$Clear",
            "Replace", "tss$ICBT$tss$Nav$NavLink$Replace"
        ],
        ctors: {
            init: function () {
                this._children = new (System.Collections.Generic.List$1(tss.Nav.NavLink)).ctor();
            },
            ctor: function () {
                this.$initialize();
                tss.CB(tss.Nav,HTMLUListElement).ctor.call(this);
                this.InnerElement = tss.UI.Ul(tss.UI._$1("tss-nav"));
            }
        },
        methods: {
            Render: function () {
                return this.InnerElement;
            },
            Add: function (component) {
                tss.ScrollBar.GetCorrectContainer(this.InnerElement).appendChild(component.Render());
                component.addInternalSelectedLink(H5.fn.cacheBind(this, this.OnNavLinkSelected));
                if (component.IsSelected) {
                    if (this.SelectedLink != null) {
                        this.SelectedLink.IsSelected = false;
                    }
                    this.RaiseOnChange(null);
                    this.SelectedLink = component;
                }

                if (component.SelectedChild != null) {
                    if (this.SelectedLink != null) {
                        this.SelectedLink.IsSelected = false;
                    }
                    this.RaiseOnChange(null);
                    this.SelectedLink = component.SelectedChild;
                }

                this._children.add(component);
            },
            Clear: function () {
                this._children.clear();
                tss.UI.ClearChildren(tss.ScrollBar.GetCorrectContainer(this.InnerElement));
            },
            Replace: function (newComponent, oldComponent) {
                var index = this._children.indexOf(oldComponent);
                if (index >= 0) {
                    this._children.setItem(index, newComponent);

                    tss.ScrollBar.GetCorrectContainer(this.InnerElement).replaceChild(newComponent.Render(), oldComponent.Render());

                    newComponent.addInternalSelectedLink(H5.fn.cacheBind(this, this.OnNavLinkSelected));
                    if (newComponent.IsSelected) {
                        if (this.SelectedLink != null) {
                            this.SelectedLink.IsSelected = false;
                        }
                        this.RaiseOnChange(null);
                        this.SelectedLink = newComponent;
                    }
                }
            },
            Links: function (children) {
                if (children === void 0) { children = []; }
                children.forEach(H5.fn.bind(this, function (x) {
                        this.Add(x);
                    }));
                return this;
            },
            InlineContent: function (content, disableMouseEvents) {
                if (disableMouseEvents === void 0) { disableMouseEvents = false; }
                this.Add(new tss.Nav.ComponentInNavLink(content, disableMouseEvents));
                return this;
            },
            OnNavLinkSelected: function (sender) {
                var $t;
                $t = H5.getEnumerator(this._children);
                try {
                    while ($t.moveNext()) {
                        var c = $t.Current;
                        c.UnselectRecursivelly(sender);
                    }
                } finally {
                    if (H5.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                this.RaiseOnChange(null);

                this.SelectedLink = sender;
            },
            Compact: function () {
                this.InnerElement.classList.add("tss-nav-small");
                return this;
            },
            NoLinkStyle: function () {
                this.InnerElement.classList.add("tss-nav-no-underline");
                return this;
            },
            SelectMarkerOnRight: function () {
                this.InnerElement.classList.add("tss-nav-right");
                return this;
            }
        }
    });

    H5.define("tss.Nav.ComponentInNavLink", {
        inherits: [tss.Nav.NavLink],
        $kind: "nested class",
        fields: {
            _content: null,
            _disableMouseEvents: false,
            _alreadyRendered: false
        },
        alias: ["Render", "tss$IC$Render"],
        ctors: {
            init: function () {
                this._alreadyRendered = false;
            },
            ctor: function (content, disableMouseEvents) {
                this.$initialize();
                tss.Nav.NavLink.ctor.call(this);
                this._content = content;
                this._disableMouseEvents = disableMouseEvents;
            }
        },
        methods: {
            Render: function () {
                if (!this._alreadyRendered) {
                    this._alreadyRendered = true;
                    tss.UI.ClearChildren(this._headerDiv);
                    this._headerDiv.onclick = H5.fn.remove(this._headerDiv.onclick, H5.fn.cacheBind(this, this.ClickHandler));

                    if (this._disableMouseEvents) {
                        this._headerDiv.style.pointerEvents = "none";
                    }

                    this._headerDiv.appendChild(this._content.tss$IC$Render());
                }

                return this.InnerElement;
            }
        }
    });

    H5.define("tss.OverflowSet", {
        inherits: [tss.IC,tss.ICBTTC(tss.Breadcrumb,tss.IC)],
        fields: {
            _expandIcon: null,
            _childContainer: null,
            _resizeObserver: null,
            _maximumItemsToDisplay: 0,
            _overflowIndex: 0,
            _cacheSizes: false,
            _cachedFullWidth: 0,
            _chevronToUseAsButton: null,
            _cachedSizes: null
        },
        props: {
            MaximumItemsToDisplay: {
                get: function () {
                    return this._maximumItemsToDisplay;
                },
                set: function (value) {
                    this._maximumItemsToDisplay = value;
                    this.Recompute();
                }
            },
            OverflowIndex: {
                get: function () {
                    return this._overflowIndex;
                },
                set: function (value) {
                    this._overflowIndex = value;
                    this.Recompute();
                }
            },
            IsSmall: {
                get: function () {
                    return this._childContainer.classList.contains("tss-small");
                },
                set: function (value) {
                    if (value) {
                        this._childContainer.classList.add("tss-small");
                    } else {
                        this._childContainer.classList.remove("tss-small");
                    }
                }
            }
        },
        alias: [
            "Clear", "tss$ICBT$tss$IC$Clear",
            "Replace", "tss$ICBT$tss$IC$Replace",
            "Add", "tss$ICBT$tss$IC$Add",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            init: function () {
                this._expandIcon = "la-chevron-down";
                this._maximumItemsToDisplay = 10;
                this._overflowIndex = 0;
                this._cachedFullWidth = 0;
                this._cachedSizes = new (System.Collections.Generic.Dictionary$2(HTMLElement,System.Double)).ctor();
            },
            ctor: function () {
                this.$initialize();
                this._childContainer = tss.UI.Div$2(tss.UI._$1("tss-overflowset"));
                tss.domObs.WhenMounted(this._childContainer, H5.fn.cacheBind(this, this.Recompute));
                this._resizeObserver = new tss.ResizeObserver();
                this._resizeObserver.Observe(document.body);
                this._resizeObserver.OnResize = H5.fn.cacheBind(this, this.Recompute);
            }
        },
        methods: {
            Recompute: function () {
                var clone = null;
                var isChevron = null;
                var childElementCount = H5.Int.clip32(this._childContainer.childElementCount);
                if (childElementCount <= 1) {
                    return;
                }

                if (H5.is(this._chevronToUseAsButton, System.Object)) {
                    this._chevronToUseAsButton.classList.remove("las", this._expandIcon, "tss-overflowset-opencolapsed");

                    this._chevronToUseAsButton.onclick = null;
                    this._chevronToUseAsButton = null;
                }

                this.UpdateChildrenSizes();



                var keep = System.Array.init(childElementCount, 0, System.Int32);

                var KEEP = 2;
                var COLLAPSE = 1;
                var NOTMEASURED = 0;
                isChevron = function (e) {
                    return e.classList.contains("tss-overflowset-separator");
                };

                if (this._overflowIndex >= 0) {
                    keep[System.Array.index(0, keep)] = KEEP;
                    for (var i = 0; i <= Math.min(((keep.length - 1) | 0), (H5.Int.mul((this._overflowIndex), 2))); i = (i + 1) | 0) {
                        keep[System.Array.index(i, keep)] = KEEP;
                        var nextIndex = (i + 1) | 0;

                        if ((nextIndex < ((this._overflowIndex - 2) | 0)) && nextIndex < childElementCount) {
                            var child = this._childContainer.children[(nextIndex >>> 0)];
                            if (isChevron(child)) {
                                keep[System.Array.index(((i + 1) | 0), keep)] = KEEP;
                            }
                        }
                    }
                }

                if (!System.Linq.Enumerable.from(keep, System.Int32).any(function (k) {
                        return k === KEEP;
                    })) {
                    keep[System.Array.index(0, keep)] = KEEP;
                }

                keep[System.Array.index(((keep.length - 1) | 0), keep)] = NOTMEASURED;

                var debt = this._cachedFullWidth - System.Linq.Enumerable.from(this._cachedSizes.Values, System.Double).sum() - 32;
                while (debt < 0) {
                    var candidate = System.Array.lastIndexOfT(keep, NOTMEASURED);
                    if (candidate >= 0) {
                        keep[System.Array.index(candidate, keep)] = COLLAPSE;
                        var child1 = this._childContainer.children[(candidate >>> 0)];
                        debt += this._cachedSizes.getItem(child1);
                    } else {
                        break;
                    }
                }

                var hidden = new (System.Collections.Generic.List$1(HTMLElement)).ctor();

                for (var i1 = 0; i1 < this._childContainer.childElementCount; i1 = (i1 + 1) >>> 0) {
                    var child2 = this._childContainer.children[i1];
                    if (keep[System.Array.index(i1, keep)] === COLLAPSE) {
                        if (this._chevronToUseAsButton == null) {
                            if (isChevron(child2)) {
                                this._chevronToUseAsButton = child2;
                                continue;
                            } else if (i1 > 0) {
                                this._chevronToUseAsButton = this._childContainer.children[((i1 - 1) >>> 0)];
                            }
                        }

                        if (!isChevron(child2)) {
                            hidden.add(child2);
                        }
                        child2.classList.add("tss-overflowset-collapse");
                    } else {
                        child2.classList.remove("tss-overflowset-collapse");
                    }
                }



                clone = function (node) {
                    var c = node.cloneNode(true);
                    c.classList.remove("tss-overflowset-collapse");
                    return tss.UI.Raw$2(c);
                };

                if (H5.is(this._chevronToUseAsButton, System.Object)) {
                    this._chevronToUseAsButton.classList.add("las", this._expandIcon, "tss-overflowset-opencolapsed");
                    this._chevronToUseAsButton.classList.remove("tss-overflowset-collapse");
                    this._chevronToUseAsButton.onclick = H5.fn.bind(this, function (e) {
                        tss.UI.StopEvent(e);
                        var clones = System.Linq.Enumerable.from(hidden, HTMLElement).select(function (element) {
                                return tss.UI.ContextMenuItem$1(clone(element)).OnClick$2(function (s2, e2) {
                                    element.click();
                                });
                            }).ToArray(tss.ContextMenu.Item);
                        tss.UI.ContextMenu().Items(clones).ShowFor(this._chevronToUseAsButton);
                    });
                }

            },
            /**
             * Sets the justify-content css property for this set
             *
             * @instance
             * @public
             * @this tss.OverflowSet
             * @memberof tss.OverflowSet
             * @param   {tss.ItemJustify}    justify
             * @return  {tss.OverflowSet}
             */
            JustifyContent: function (justify) {
                this._childContainer.style.justifyContent = System.Enum.toString(tss.ItemJustify, justify);
                return this;
            },
            UpdateChildrenSizes: function () {
                var $t;
                if (!this._cacheSizes) {
                    this._cachedSizes.clear();

                    for (var i = 0; i < this._childContainer.childElementCount; i = (i + 1) >>> 0) {
                        var child = this._childContainer.children[i];
                        child.classList.remove("tss-overflowset-collapse");
                    }

                    var rect = this._childContainer.getBoundingClientRect();
                    this._cachedFullWidth = rect.width;
                }



                $t = H5.getEnumerator(this._childContainer.children, Element);
                try {
                    while ($t.moveNext()) {
                        var child1 = H5.cast($t.Current, HTMLElement);
                        if (!this._cachedSizes.containsKey(child1)) {
                            var childRect = child1.getBoundingClientRect();
                            this._cachedSizes.setItem(child1, childRect.width);
                        }
                    }
                } finally {
                    if (H5.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            Clear: function () {
                tss.UI.ClearChildren(this._childContainer);
            },
            Replace: function (newComponent, oldComponent) {
                this._childContainer.replaceChild(newComponent.tss$IC$Render(), oldComponent.tss$IC$Render());
            },
            Add: function (component) {
                if (this._childContainer.childElementCount > 0) {
                    this._childContainer.appendChild(tss.UI.I(tss.UI._$1("tss-overflowset-separator")));
                }
                this._childContainer.appendChild(component.tss$IC$Render());
            },
            Items: function (children) {
                if (children === void 0) { children = []; }
                children.forEach(H5.fn.bind(this, function (x) {
                        this.Add(x);
                    }));
                return this;
            },
            DisableSizeCache: function () {
                this._cacheSizes = false;
                return this;
            },
            SetOverflowIndex: function (i) {
                this._overflowIndex = i;
                return this;
            },
            Small: function () {
                this.IsSmall = true;
                return this;
            },
            Render: function () {
                return this._childContainer;
            }
        }
    });

    H5.define("tss.Panel", {
        inherits: function () { return [tss.LayerT(tss.Panel),tss.IHBG]; },
        fields: {
            _footer: null,
            _panel: null,
            _panelOverlay: null,
            _panelContent: null,
            _panelFooter: null,
            _panelCommand: null,
            _closeButton: null,
            _panelTitle: null
        },
        events: {
            HidePanel: null
        },
        props: {
            Content: {
                get: function () {
                    return this._content;
                },
                set: function (value) {
                    tss.UI.ClearChildren(this._panelContent);
                    ;
                    this._content = value;
                    if (this._content != null) {
                        this._panelContent.appendChild(this._content.tss$IC$Render());
                    }
                }
            },
            Footer: {
                get: function () {
                    return this._footer;
                },
                set: function (value) {
                    tss.UI.ClearChildren(this._panelFooter);
                    ;
                    this._footer = value;
                    if (this._footer != null) {
                        this._panelFooter.appendChild(this._footer.tss$IC$Render());
                    }
                }
            },
            Size: {
                get: function () {
                    return this._panel.classList[1];
                },
                set: function (value) {
                    this._panel.classList.replace(this._panel.classList[1], System.Enum.toString(tss.Panel.PanelSize, value));
                }
            },
            Side: {
                get: function () {
                    var result = { v : new tss.Panel.PanelSide() };
                    if (System.Enum.tryParse(tss.Panel.PanelSide, this._panel.classList[2].substr(((this._panel.classList[2].lastIndexOf(String.fromCharCode(45)) + 1) | 0)), result, true)) {
                        return result.v;
                    }

                    return tss.Panel.PanelSide.Far;
                },
                set: function (value) {
                    this._panel.classList.replace(this._panel.classList[2], System.Enum.toString(tss.Panel.PanelSide, value));
                }
            },
            CanLightDismiss: {
                get: function () {
                    return this._panelOverlay.classList.contains("tss-panel-lightDismiss");
                },
                set: function (value) {
                    if (value) {
                        this._panelOverlay.classList.add("tss-panel-lightDismiss");
                        this._panelOverlay.addEventListener("click", H5.fn.cacheBind(this, this.OnCloseClick));
                    } else {
                        this._panelOverlay.classList.remove("tss-panel-lightDismiss");
                        this._panelOverlay.removeEventListener("click", H5.fn.cacheBind(this, this.OnCloseClick));
                    }
                }
            },
            IsDark: {
                get: function () {
                    return this._contentHtml.classList.contains("tss-dark");
                },
                set: function (value) {
                    if (value) {
                        this._contentHtml.classList.add("tss-dark");
                    } else {
                        this._contentHtml.classList.remove("tss-dark");
                    }
                }
            },
            IsNonBlocking: {
                get: function () {
                    return this._contentHtml.classList.contains("tss-panel-modeless");
                },
                set: function (value) {
                    if (value) {
                        this._contentHtml.classList.add("tss-panel-modeless");
                    } else {
                        this._contentHtml.classList.remove("tss-panel-modeless");
                    }
                }
            },
            ShowCloseButton: {
                get: function () {
                    return !H5.rE(this._closeButton.style.display, "none");
                },
                set: function (value) {
                    if (value) {
                        this._closeButton.style.display = "";
                    } else {
                        this._closeButton.style.display = "none";
                    }
                }
            },
            Background: {
                get: function () {
                    return this._panel.style.background;
                },
                set: function (value) {
                    this._panel.style.background = value;
                }
            }
        },
        alias: ["Background", "tss$IHBG$Background"],
        ctors: {
            ctor: function (title) {
                if (title === void 0) { title = null; }

                tss.Panel.$ctor1.call(this, tss.ITFX.SemiBold(tss.txt, tss.UI.TextBlock(title)));
            },
            $ctor1: function (title) {
                this.$initialize();
                tss.LayerT(tss.Panel).ctor.call(this);
                this._panelTitle = tss.UI.Div$2(tss.UI._$1("tss-panel-title"));

                this._closeButton = tss.UI.Button(tss.UI._$2("tss-panel-command-button las la-times", void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, H5.fn.bind(this, function (el) {
                    el.onclick = H5.fn.bind(this, function (e) {
                        this.Hide();
                    });
                }), void 0));
                this._panelCommand = tss.UI.Div$1(tss.UI._$1("tss-panel-command"), this._panelTitle, this._closeButton);
                this._panelContent = tss.UI.Div$2(tss.UI._$1("tss-panel-content"));
                this._panelFooter = tss.UI.Div$2(tss.UI._$1("tss-panel-footer"));
                this._panel = tss.UI.Div$1(tss.UI._$1("tss-panel tss-panelSize-small tss-panelSide-far"), this._panelCommand, tss.UI.Div$1(tss.UI._$1("tss-panel-inner"), this._panelContent, this._panelFooter));
                this._panelOverlay = tss.UI.Div$2(tss.UI._$1("tss-panel-overlay"));
                this._contentHtml = tss.UI.Div$1(tss.UI._$1("tss-panel-container"), this._panelOverlay, this._panel);

                if (H5.is(title, System.Object)) {
                    this._panelTitle.appendChild(title.tss$IC$Render());
                }
            }
        },
        methods: {
            BuildRenderedContent: function () {
                return this._contentHtml;
            },
            Show: function () {
                if (!this.IsNonBlocking) {
                    document.body.style.overflowY = "hidden";
                }

                if (this.Side === tss.Panel.PanelSide.Near) {
                    this._panel.classList.add("tss-panel-near-animate");
                    this._panel.classList.remove("tss-panel-far-animate");
                } else {
                    this._panel.classList.add("tss-panel-far-animate");
                    this._panel.classList.remove("tss-panel-near-animate");
                }

                return tss.LayerT(tss.Panel).prototype.Show.call(this);
            },
            OnHide: function (onHide) {
                this.addHidePanel(onHide);
                return this;
            },
            Hide: function (onHidden) {
                if (onHidden === void 0) { onHidden = null; }
                !H5.staticEquals(this.HidePanel, null) ? this.HidePanel(this) : null;

                tss.LayerT(tss.Panel).prototype.Hide.call(this, H5.fn.bind(this, function () {
                    if (!this.IsNonBlocking) {
                        document.body.style.overflowY = "";
                    }
                    !H5.staticEquals(onHidden, null) ? onHidden() : null;
                }));
            },
            OnCloseClick: function (ev) {
                this.Hide();
            },
            HideCloseButton: function () {
                this.ShowCloseButton = false;
                return this;
            },
            SetFooter: function (footer) {
                this.Footer = footer;
                return this;
            },
            Small: function () {
                this.Size = "tss-panelSize-small";
                return this;
            },
            Medium: function () {
                this.Size = "tss-panelSize-medium";
                return this;
            },
            Large: function () {
                this.Size = "tss-panelSize-large";
                return this;
            },
            LargeFixed: function () {
                this.Size = "tss-panelSize-largefixed";
                return this;
            },
            ExtraLarge: function () {
                this.Size = "tss-panelSize-extralarge";
                return this;
            },
            FullWidth: function () {
                this.Size = "tss-panelSize-fullwidth";
                return this;
            },
            Far: function () {
                this.Side = tss.Panel.PanelSide.Far;
                return this;
            },
            Near: function () {
                this.Side = tss.Panel.PanelSide.Near;
                return this;
            },
            LightDismiss: function () {
                this.CanLightDismiss = true;
                return this;
            },
            NoLightDismiss: function () {
                this.CanLightDismiss = false;
                return this;
            },
            Dark: function () {
                this.IsDark = true;
                return this;
            },
            NonBlocking: function () {
                this.IsNonBlocking = true;
                return this;
            },
            Blocking: function () {
                this.IsNonBlocking = false;
                return this;
            }
        }
    });

    H5.define("tss.Picker.SuggestionsLayer", function (TPickerItem) { return {
        inherits: function () { return [tss.LayerT(tss.Picker.SuggestionsLayer(TPickerItem))]; },
        $kind: "nested class",
        fields: {
            _suggestions: null
        },
        props: {
            SuggestionsContent: {
                get: function () {
                    return this._suggestions;
                }
            },
            SuggestionsContainer: {
                get: function () {
                    return this._renderedContent;
                }
            }
        },
        ctors: {
            ctor: function (suggestions) {
                this.$initialize();
                tss.LayerT(tss.Picker.SuggestionsLayer(TPickerItem)).ctor.call(this);
                this._suggestions = suggestions.tss$IC$Render();
                this._contentHtml = tss.UI.Div(tss.UI._$1("tss-layer-content"), this._suggestions);
            }
        }
    }; });

    H5.define("tss.SectionStack", {
        inherits: [tss.S],
        fields: {
            Count: 0
        },
        alias: [
            "Clear", "tss$ICBT$tss$IC$Clear",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            init: function () {
                this.Count = 1;
            },
            ctor: function () {
                this.$initialize();
                tss.S.ctor.call(this, tss.S.Orientation.Vertical);
                this.InnerElement.classList.add("tss-sectionstack");
            }
        },
        methods: {
            AddAnimated: function (component, grow, customPadding) {
                if (grow === void 0) { grow = false; }
                if (customPadding === void 0) { customPadding = ""; }
                this.InnerElement.appendChild(this.GetAnimatedItem(component, false, grow, customPadding));
            },
            AddAnimatedTitle: function (component) {
                this.InnerElement.appendChild(this.GetAnimatedItem(component, true));
            },
            GetAnimatedItem: function (component, isTitle, grow, customPadding) {
                if (grow === void 0) { grow = false; }
                if (customPadding === void 0) { customPadding = ""; }
                var item;
                if (!(((item = (component).SectionStackItem)) != null)) {
                    item = tss.UI.Div(tss.UI._$2(isTitle ? "tss-sectionstack-title tss-stack-item tss-sectionstack-item" : "tss-sectionstack-card tss-stack-item tss-sectionstack-item", void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, function (s) {
                        s.alignSelf = "auto";
                        s.width = "auto";
                        s.height = "auto";
                        s.flexShrink = "1";
                        s.overflow = "hidden";
                        s.padding = customPadding;
                    }), component.tss$IC$Render());
                    (component).SectionStackItem = item;
                }
                if (grow) {
                    item.style.flexGrow = "1";
                    item.style.height = "10px";
                }

                this.Count = (this.Count + 1) | 0;
                item.style.transitionDelay = System.String.format("{0:n2}s", [H5.box(0.05 * this.Count, System.Single, System.Single.format, System.Single.getHashCode)]);

                tss.domObs.WhenMounted(item, function () {
                    item.classList.add("tss-ismounted");
                });

                return item;
            },
            Clear: function () {
                tss.UI.ClearChildren(this.InnerElement);
                this.Count = 0;
            },
            Render: function () {
                return this.InnerElement;
            }
        }
    });

    H5.define("tss.TextArea", {
        inherits: function () { return [tss.CB(tss.TextArea,HTMLTextAreaElement),tss.ICVT(tss.TextArea),tss.IObservableComponent(System.String),tss.ITAB]; },
        fields: {
            _container: null,
            _errorSpan: null,
            _observable: null
        },
        props: {
            TabIndex: {
                set: function (value) {
                    this.InnerElement.tabIndex = value;
                }
            },
            IsEnabled: {
                get: function () {
                    return !this.InnerElement.classList.contains("tss-disabled");
                },
                set: function (value) {
                    if (value) {
                        this.InnerElement.classList.remove("tss-disabled");
                    } else {
                        this.InnerElement.classList.add("tss-disabled");
                    }
                }
            },
            IsReadOnly: {
                get: function () {
                    return this.InnerElement.hasAttribute("readonly");
                },
                set: function (value) {
                    if (value) {
                        this.InnerElement.setAttribute("readonly", "");
                    } else {
                        this.InnerElement.removeAttribute("readonly");
                    }
                }
            },
            Text: {
                get: function () {
                    return this.InnerElement.value;
                },
                set: function (value) {
                    this.InnerElement.value = value;
                    this._observable.Value$1 = value;
                    this.RaiseOnInput(null);
                }
            },
            Placeholder: {
                get: function () {
                    return this.InnerElement.placeholder;
                },
                set: function (value) {
                    this.InnerElement.placeholder = value;
                }
            },
            Error: {
                get: function () {
                    return this._errorSpan.innerText;
                },
                set: function (value) {
                    this._errorSpan.innerText = value;
                }
            },
            IsInvalid: {
                get: function () {
                    return this._container.classList.contains("tss-invalid");
                },
                set: function (value) {
                    if (value) {
                        this._container.classList.add("tss-invalid");
                    } else {
                        this._container.classList.remove("tss-invalid");
                    }
                }
            },
            IsRequired: {
                get: function () {
                    return this._container.classList.contains("tss-required");
                },
                set: function (value) {
                    if (value) {
                        this._container.classList.add("tss-required");
                    } else {
                        this._container.classList.remove("tss-required");
                    }
                }
            }
        },
        alias: [
            "TabIndex", "tss$ITAB$TabIndex",
            "Error", "tss$ICV$Error",
            "IsInvalid", "tss$ICV$IsInvalid",
            "Render", "tss$IC$Render",
            "Attach", "tss$ICVT$tss$TextArea$Attach",
            "AsObservable", "tss$IObservableComponent$System$String$AsObservable"
        ],
        ctors: {
            init: function () {
                this._observable = new (tss.SettableObservableT(System.String))();
            },
            ctor: function (text) {
                if (text === void 0) { text = ""; }

                this.$initialize();
                tss.CB(tss.TextArea,HTMLTextAreaElement).ctor.call(this);
                this.InnerElement = tss.UI.TextArea(tss.UI._$2("tss-textbox tss-textarea", void 0, void 0, void 0, void 0, void 0, void 0, "text", void 0, text, void 0, void 0, void 0, void 0, void 0));
                this._errorSpan = tss.UI.Span(tss.UI._$1("tss-textbox-error"));
                this._container = tss.UI.Div$1(tss.UI._$1("tss-textbox-container"), this.InnerElement, this._errorSpan);

                this.InnerElement.style.width = "100%";
                this.InnerElement.style.height = "100%";

                this.AttachChange();
                this.AttachInput();
                this.AttachKeys();
                this.AttachFocus();
                this.AttachBlur();

                this.OnChange(H5.fn.bind(this, function (_, __) {
                    this._observable.Value$1 = this.Text;
                }));

                this.OnInput(H5.fn.bind(this, function (_, __) {
                    this._observable.Value$1 = this.Text;
                }));
            }
        },
        methods: {
            Render: function () {
                return this._container;
            },
            Attach: function (handler) {
                this.addInputUpdated(function (s, _) {
                    handler(s);
                });
            },
            SetText: function (text) {
                this.Text = text;
                return this;
            },
            ClearText: function () {
                this.SetText("");
                return this;
            },
            SetPlaceholder: function (placeholder) {
                this.Placeholder = placeholder;
                return this;
            },
            Disabled: function (value) {
                if (value === void 0) { value = true; }
                this.IsEnabled = !value;
                return this;
            },
            ReadOnly: function () {
                this.IsReadOnly = true;
                return this;
            },
            NoSpellCheck: function () {
                this.InnerElement.spellcheck = false;
                return this;
            },
            Required: function () {
                this.IsRequired = true;
                return this;
            },
            Focus: function () {
                tss.domObs.WhenMounted(this.InnerElement, H5.fn.bind(this, function () {
                    try {
                        this.InnerElement.scrollIntoViewIfNeeded();
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        this.InnerElement.scrollIntoView();
                    }

                    this.InnerElement.focus();
                }));
                return this;
            },
            AsObservable: function () {
                return this._observable;
            }
        }
    });

    H5.define("tss.TextBreadcrumbs", {
        inherits: function () { return [tss.IC,tss.ICBTTC(tss.TextBreadcrumbs,tss.TextBreadcrumb),tss.ITF,tss.IHFG]; },
        fields: {
            InnerElement: null
        },
        props: {
            Size: {
                get: function () {
                    return tss.ITFX.FromClassList$1(this.InnerElement, "tss-fontsize-small");
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.TS, this.Size));
                    this.InnerElement.classList.add(System.Enum.toString(tss.TS, value));
                }
            },
            Weight: {
                get: function () {
                    return tss.ITFX.FromClassList$2(this.InnerElement, "tss-fontweight-regular");
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.TW, this.Weight));
                    this.InnerElement.classList.add(System.Enum.toString(tss.TW, value));
                }
            },
            TextAlign: {
                get: function () {
                    return (function () {
                        throw new System.NotImplementedException.ctor();
                    })();
                },
                set: function (value) {
                    throw new System.NotImplementedException.ctor();
                }
            },
            Foreground: {
                get: function () {
                    return this.InnerElement.style.color;
                },
                set: function (value) {
                    this.InnerElement.style.color = value;
                }
            }
        },
        alias: [
            "Clear", "tss$ICBT$tss$TextBreadcrumb$Clear",
            "Replace", "tss$ICBT$tss$TextBreadcrumb$Replace",
            "Add", "tss$ICBT$tss$TextBreadcrumb$Add",
            "Render", "tss$IC$Render",
            "Size", "tss$ITF$Size",
            "Weight", "tss$ITF$Weight",
            "TextAlign", "tss$ITF$TextAlign",
            "Foreground", "tss$IHFG$Foreground"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                this.InnerElement = tss.UI.Div$2(tss.UI._$1("tss-textbreadcrumb-container tss-fontsize-small tss-fontweight-regular"));
            }
        },
        methods: {
            Clear: function () {
                tss.UI.ClearChildren(this.InnerElement);
            },
            Replace: function (newComponent, oldComponent) {
                this.InnerElement.replaceChild(newComponent.Render(), oldComponent.Render());
            },
            Add: function (component) {
                if (this.InnerElement.childElementCount === 0) {
                    this.InnerElement.appendChild(tss.UI.Div(tss.UI._$1("tss-textbreadcrumb-wrap"), component.Render()));
                } else {
                    this.InnerElement.appendChild(tss.UI.Div$1(tss.UI._$1("tss-textbreadcrumb-wrap"), tss.UI.Span(tss.UI._$1("tss-textbreadcrumb-sep"), [tss.UI.I(tss.UI._())]), component.Render()));
                }

            },
            Items: function (children) {
                if (children === void 0) { children = []; }
                children.forEach(H5.fn.bind(this, function (x) {
                        this.Add(x);
                    }));
                return this;
            },
            Render: function () {
                return this.InnerElement;
            }
        }
    });

    H5.define("tss.Toast", {
        inherits: function () { return [tss.LayerT(tss.Toast)]; },
        statics: {
            fields: {
                DefaultPosition: "topright",
                OpenToasts: null
            },
            ctors: {
                init: function () {
                    this.DefaultPosition = "topright";
                    this.OpenToasts = new (System.Collections.Generic.Dictionary$2(tss.Toast.Position,System.Collections.Generic.List$1(tss.Toast))).ctor();
                }
            },
            methods: {
                RefreshPositioning: function () {
                    var $t, $t1;
                    $t = H5.getEnumerator(tss.Toast.OpenToasts);
                    try {
                        while ($t.moveNext()) {
                            var kv = $t.Current;
                            var sum = 0;
                            $t1 = H5.getEnumerator(kv.value);
                            try {
                                while ($t1.moveNext()) {
                                    var t = $t1.Current;
                                    t.Measure();

                                    switch (kv.key) {
                                        case "topright": 
                                        case "topcenter": 
                                        case "topleft": 
                                        case "topfull": 
                                            t._toastContainer.style.marginTop = System.String.format("{0}px", [H5.box(sum + 16, System.Double, System.Double.format, System.Double.getHashCode)]);
                                            break;
                                        case "bottomright": 
                                        case "bottomcenter": 
                                        case "bottomleft": 
                                        case "bottomfull": 
                                            t._toastContainer.style.marginBottom = System.String.format("{0}px", [H5.box(sum + 16, System.Double, System.Double.format, System.Double.getHashCode)]);
                                            break;
                                    }

                                    sum += t._height + 16;
                                }
                            } finally {
                                if (H5.is($t1, System.IDisposable)) {
                                    $t1.System$IDisposable$Dispose();
                                }
                            }
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        },
        fields: {
            _type: "success",
            _pos: "topright",
            _title: null,
            _message: null,
            _height: 0,
            _timeoutDuration: 0,
            _timeoutHandle: 0,
            _toastContainer: null
        },
        props: {
            _simPos: {
                get: function () {
                    switch (this._pos) {
                        case "topright": 
                            return "topright";
                        case "topleft": 
                            return "topleft";
                        case "bottomright": 
                            return "bottomright";
                        case "bottomleft": 
                            return "bottomleft";
                        case "bottomfull": 
                            return "bottomcenter";
                        case "bottomcenter": 
                            return "bottomcenter";
                        case "topfull": 
                            return "topcenter";
                        case "topcenter": 
                            return "topcenter";
                    }
                    return this._pos;
                }
            }
        },
        ctors: {
            init: function () {
                this._type = "information";
                this._pos = tss.Toast.DefaultPosition;
                this._height = 0;
                this._timeoutDuration = 5000;
                this._timeoutHandle = 0;
                this._toastContainer = tss.UI.Div$2(tss.UI._$1("tss-toast-container"));
            }
        },
        methods: {
            TopRight: function () {
                this._pos = "topright";
                return this;
            },
            TopCenter: function () {
                this._pos = "topcenter";
                return this;
            },
            TopLeft: function () {
                this._pos = "topleft";
                return this;
            },
            BottomRight: function () {
                this._pos = "bottomright";
                return this;
            },
            BottomCenter: function () {
                this._pos = "bottomcenter";
                return this;
            },
            BottomLeft: function () {
                this._pos = "bottomleft";
                return this;
            },
            TopFull: function () {
                this._pos = "topfull";
                return this;
            },
            BottomFull: function () {
                this._pos = "bottomfull";
                return this;
            },
            Duration: function (timeSpan) {
                this._timeoutDuration = H5.Int.clip32(timeSpan.getTotalMilliseconds());
                return this;
            },
            Success$3: function (title, message) {
                this._type = "success";
                this._title = title;
                this._message = message;
                this.Fire();
            },
            Success$2: function (message) {
                this.Success$3(null, message);
            },
            Success$1: function (title, message) {
                this._type = "success";
                this._title = System.String.isNullOrEmpty(title) ? null : tss.UI.TextBlock$1(title, false, false, "tss-fontsize-medium", "tss-fontweight-semibold", void 0);
                this._message = tss.UI.TextBlock$1(message, false, false, "tss-fontsize-small", "tss-fontweight-regular", void 0);
                this.Fire();
            },
            Success: function (message) {
                this.Success$1(null, message);
            },
            Information$3: function (title, message) {
                this._type = "information";
                this._title = title;
                this._message = message;
                this.Fire();
            },
            Information$2: function (message) {
                this.Information$3(null, message);
            },
            Information$1: function (title, message) {
                this._type = "information";
                this._title = System.String.isNullOrEmpty(title) ? null : tss.UI.TextBlock$1(title, false, false, "tss-fontsize-medium", "tss-fontweight-semibold", void 0);
                this._message = tss.UI.TextBlock$1(message, false, false, "tss-fontsize-small", "tss-fontweight-regular", void 0);
                this.Fire();
            },
            Information: function (message) {
                this.Information$1(null, message);
            },
            Warning$3: function (title, message) {
                this._type = "warning";
                this._title = title;
                this._message = message;
                this.Fire();
            },
            Warning$2: function (message) {
                this.Warning$3(null, message);
            },
            Warning$1: function (title, message) {
                this._type = "warning";
                this._title = System.String.isNullOrEmpty(title) ? null : tss.UI.TextBlock$1(title, false, false, "tss-fontsize-medium", "tss-fontweight-semibold", void 0);
                this._message = tss.UI.TextBlock$1(message, false, false, "tss-fontsize-small", "tss-fontweight-regular", void 0);
                this.Fire();
            },
            Warning: function (message) {
                this.Warning$1(null, message);
            },
            Error$3: function (title, message) {
                this._type = "error";
                this._title = title;
                this._message = message;
                this.Fire();
            },
            Error$2: function (message) {
                this.Error$3(null, message);
            },
            Error$1: function (title, message) {
                this._type = "error";
                this._title = System.String.isNullOrEmpty(title) ? null : tss.UI.TextBlock$1(title, false, false, "tss-fontsize-medium", "tss-fontweight-semibold", void 0);
                this._message = tss.UI.TextBlock$1(message, false, false, "tss-fontsize-small", "tss-fontweight-regular", void 0);
                this.Fire();
            },
            Error: function (message) {
                this.Error$1(null, message);
            },
            Width: function (width) {
                this._toastContainer.style.width = width.toString();
                return this;
            },
            Height: function (height) {
                this._toastContainer.style.height = height.toString();
                return this;
            },
            Fire: function () {
                var $t;
                this._contentHtml = tss.UI.Div(tss.UI._$1("tss-toast tss-toast-" + System.Enum.toString(tss.Toast.Type, this._type) + " tss-toast-" + System.Enum.toString(tss.Toast.Position, this._pos)), this._toastContainer);

                if (H5.is(this._title, System.Object)) {
                    this._toastContainer.appendChild(tss.UI.Div(tss.UI._$1("tss-toast-title"), this._title.tss$IC$Render()));
                }

                if (H5.is(this._message, System.Object)) {
                    this._toastContainer.appendChild(tss.UI.Div(tss.UI._$1("tss-toast-message"), this._message.tss$IC$Render()));
                }

                this._toastContainer.onmouseenter = H5.fn.bind(this, function (e) {
                    this.ClearTimeout();
                });

                this._toastContainer.onclick = H5.fn.bind(this, function (e) {
                    this.ClearTimeout();
                    this.RemoveAndHide();
                });

                this._toastContainer.onmouseleave = H5.fn.bind(this, function (e) {
                    this.ResetTimeout();
                });
                var list = { };

                if (!tss.Toast.OpenToasts.tryGetValue(this._simPos, list)) {
                    list.v = new (System.Collections.Generic.List$1(tss.Toast)).ctor();
                    tss.Toast.OpenToasts.setItem(this._simPos, list.v);
                }

                var textContent = this._toastContainer.textContent;

                $t = H5.getEnumerator(list.v.ToArray());
                try {
                    while ($t.moveNext()) {
                        var otherToast = $t.Current;
                        if (H5.rE(otherToast._toastContainer.textContent, textContent)) {
                            otherToast.RemoveAndHide();
                        }
                    }
                } finally {
                    if (H5.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                list.v.add(this);

                tss.Toast.RefreshPositioning();

                this.Show();

                this.ResetTimeout();
            },
            Measure: function () {
                if (this._height === 0) {
                    var rect = this._toastContainer.getBoundingClientRect();
                    this._height = rect.height;
                }
            },
            ClearTimeout: function () {
                if (this._timeoutHandle !== 0) {
                    window.clearTimeout(this._timeoutHandle);
                    this._timeoutHandle = 0;
                }
            },
            ResetTimeout: function () {
                this.ClearTimeout();
                this._timeoutHandle = window.setTimeout(H5.fn.bind(this, function (_) {
                    this.RemoveAndHide();
                }), this._timeoutDuration);
            },
            RemoveAndHide: function () {
                tss.Toast.OpenToasts.getItem(this._simPos).remove(this);
                switch (this._simPos) {
                    case "topright": 
                    case "topcenter": 
                    case "topleft": 
                    case "topfull": 
                        this._toastContainer.style.marginTop = "0px";
                        break;
                    case "bottomright": 
                    case "bottomcenter": 
                    case "bottomleft": 
                    case "bottomfull": 
                        this._toastContainer.style.marginBottom = "100vh";
                        break;
                }
                this.Hide();
                tss.Toast.RefreshPositioning();
            }
        }
    });

    H5.define("tss.ColorPicker", {
        inherits: function () { return [tss.Input(tss.ColorPicker)]; },
        props: {
            Color: {
                get: function () {
                    return tss.Color.FromString(this.Text);
                },
                set: function (value) {
                    this.SetColor(value);
                }
            }
        },
        ctors: {
            ctor: function (color) {
                var $t;
                this.$initialize();
                tss.Input(tss.ColorPicker).ctor.call(this, "color", ($t = (color != null ? color.ToHex() : null), $t != null ? $t : "#000000"));
            }
        },
        methods: {
            SetColor: function (color) {
                return this.SetText(color.ToHex());
            }
        }
    });

    H5.define("tss.ContextMenu", {
        inherits: function () { return [tss.LayerT(tss.ContextMenu),tss.ICBTTC(tss.ContextMenu,tss.ContextMenu.Item)]; },
        statics: {
            fields: {
                DELAY: 0
            },
            ctors: {
                init: function () {
                    this.DELAY = 200;
                }
            }
        },
        fields: {
            _childContainer: null,
            _modalOverlay: null,
            _popup: null,
            _timeoutId: 0,
            _previousMouseCoords: null,
            _currentMouseCoords: null,
            _extremeCoordsTopLeft: null,
            _extremeCoordsBottomRight: null,
            _menuElementCoordsTopLeft: null,
            _activeSubMenuTopLeftCoords: null,
            _activeSubMenuBottomLeftCoords: null,
            _activeMenuItem: null,
            _activeSubMenu: null,
            _items: null
        },
        events: {
            ItemClick: null
        },
        alias: [
            "Clear", "tss$ICBT$tss$ContextMenu$Item$Clear",
            "Replace", "tss$ICBT$tss$ContextMenu$Item$Replace",
            "Add", "tss$ICBT$tss$ContextMenu$Item$Add",
            "Render", "tss$IC$Render"
        ],
        ctors: {
            init: function () {
                this._previousMouseCoords = new tss.ContextMenu.Point2D();
                this._currentMouseCoords = new tss.ContextMenu.Point2D();
                this._extremeCoordsTopLeft = new tss.ContextMenu.Point2D();
                this._extremeCoordsBottomRight = new tss.ContextMenu.Point2D();
                this._menuElementCoordsTopLeft = new tss.ContextMenu.Point2D();
                this._activeSubMenuTopLeftCoords = new tss.ContextMenu.Point2D();
                this._activeSubMenuBottomLeftCoords = new tss.ContextMenu.Point2D();
                this._items = new (System.Collections.Generic.List$1(tss.ContextMenu.Item)).ctor();
            },
            ctor: function () {
                this.$initialize();
                tss.LayerT(tss.ContextMenu).ctor.call(this);
                this.InnerElement = tss.UI.Div$2(tss.UI._$1("tss-contextmenu"));
                this._childContainer = tss.UI.Div$2(tss.UI._());
            }
        },
        methods: {
            Clear: function () {
                tss.UI.ClearChildren(tss.ScrollBar.GetCorrectContainer(this._childContainer));
            },
            Replace: function (newComponent, oldComponent) {
                tss.ScrollBar.GetCorrectContainer(this._childContainer).replaceChild(newComponent.Render(), oldComponent.Render());
            },
            Add: function (component) {
                this._items.add(component);
                tss.ScrollBar.GetCorrectContainer(this._childContainer).appendChild(component.Render());

                component.OnClick$2(H5.fn.bind(this, function (s, e) {
                    !H5.staticEquals(this.ItemClick, null) ? this.ItemClick(s, e) : null;
                    this.Hide();
                }));
            },
            Render: function () {
                throw new System.NotImplementedException.ctor();
            },
            Show: function () {
                throw new System.NotImplementedException.ctor();
            },
            SaveMouseCoords: function (x, y) {
                this._previousMouseCoords.x = this._currentMouseCoords.x;
                this._previousMouseCoords.y = this._currentMouseCoords.y;
                this._currentMouseCoords.x = x;
                this._currentMouseCoords.y = y;
            },
            OnWindowMouseMove: function (evnt) {
                var e = evnt;
                this.SaveMouseCoords(e.pageX, e.pageY);

                if (this._activeMenuItem != null) {
                    this.HideSubMenuIfCompletelyOutside();
                }
            },
            HideSubMenuIfCompletelyOutside: function () {
                if ((this._currentMouseCoords.x < this._extremeCoordsTopLeft.x || this._currentMouseCoords.x > this._extremeCoordsBottomRight.x || this._currentMouseCoords.y < this._extremeCoordsTopLeft.y || this._currentMouseCoords.y > this._extremeCoordsBottomRight.y) && !System.Linq.Enumerable.from(this._items, tss.ContextMenu.Item).any(function (i) {
                        return i.CurrentlyMouseovered;
                    })) {
                    this.CancelPendingMenuItemActivations();
                    this.DeactivateActiveMenuItem();
                }
            },
            OnItemClick: function (componentEventHandler) {
                this.addItemClick(componentEventHandler);
            },
            ShowFor$1: function (component, distanceX, distanceY) {
                if (distanceX === void 0) { distanceX = 1; }
                if (distanceY === void 0) { distanceY = 1; }
                this.ShowFor(component.tss$IC$Render(), distanceX, distanceY);
            },
            ShowFor: function (element, distanceX, distanceY) {
                if (distanceX === void 0) { distanceX = 1; }
                if (distanceY === void 0) { distanceY = 1; }
                this.ShowFor$2(element, distanceX, distanceY, false);
            },
            ShowFor$2: function (element, distanceX, distanceY, asSubMenu) {
                if (asSubMenu) {
                    this._popup = tss.UI.Div(tss.UI._$1("tss-contextmenu-popup"), this._childContainer);
                    this._contentHtml = tss.UI.Div$1(tss.UI._(), this._modalOverlay, this._popup);
                } else {
                    if (this._contentHtml == null) {
                        this._modalOverlay = tss.UI.Div$2(tss.UI._$1("tss-contextmenu-overlay"));
                        this._modalOverlay.addEventListener("click", H5.fn.bind(this, function (_) {
                            this.Hide();
                        }));
                        this._popup = tss.UI.Div(tss.UI._$1("tss-contextmenu-popup"), this._childContainer);
                        this._contentHtml = tss.UI.Div$1(tss.UI._(), this._modalOverlay, this._popup);
                    }
                }

                this._popup.style.height = "unset";
                this._popup.style.left = "-1000px";
                this._popup.style.top = "-1000px";

                tss.LayerT(tss.ContextMenu).prototype.Show.call(this);

                if (!this._popup.classList.contains("tss-no-focus")) {
                    this._popup.classList.add("tss-no-focus");
                }

                var parentRect = element.getBoundingClientRect();
                var popupRect = this._popup.getBoundingClientRect();

                var x = parentRect.left + distanceX;
                var y = parentRect.bottom + distanceY;

                this._popup.style.left = System.Double.format(x) + "px";
                this._popup.style.top = System.Double.format(y) + "px";
                this._popup.style.minWidth = System.Double.format(parentRect.width) + "px";


                if (window.innerHeight - parentRect.bottom - distanceY < popupRect.height) {
                    var top = parentRect.top - popupRect.height;
                    if (top < 0) {
                        if (parentRect.top > window.innerHeight - parentRect.bottom - distanceY) {
                            this._popup.style.top = "1px";
                            this._popup.style.height = System.Double.format(parentRect.top - distanceY) + "px";
                        } else {
                            this._popup.style.height = System.Double.format(window.innerHeight - parentRect.bottom - distanceY) + "px";
                        }
                    } else {
                        this._popup.style.top = System.Double.format(top) + "px";
                    }
                }

                if (window.innerWidth - parentRect.right - distanceX < popupRect.width) {
                    var left = parentRect.right - popupRect.width;
                    if (left < 0) {
                        if (parentRect.left > window.innerWidth - parentRect.right - distanceX) {
                            this._popup.style.left = "1px";
                            this._popup.style.width = System.Double.format(parentRect.left - distanceX) + "px";
                        } else {
                            this._popup.style.width = System.Double.format(window.innerWidth - parentRect.right - distanceX) + "px";
                        }
                    } else {
                        this._popup.style.left = System.Double.format(left) + "px";
                    }
                }

                window.setTimeout(H5.fn.bind(this, function (e) {
                    document.addEventListener("keydown", H5.fn.cacheBind(this, this.OnPopupKeyDown));
                }), 100);

                this._extremeCoordsTopLeft.x = x;
                this._extremeCoordsTopLeft.y = y;
                this._extremeCoordsBottomRight.x = y + popupRect.width;
                this._extremeCoordsBottomRight.y = y + popupRect.height;


                this.PossiblySetupSubMenuHooks();
            },
            ShowAt: function (x, y, minWidth) {
                if (this._contentHtml == null) {
                    this._modalOverlay = tss.UI.Div$2(tss.UI._$1("tss-contextmenu-overlay"));
                    this._modalOverlay.addEventListener("click", H5.fn.bind(this, function (_) {
                        this.Hide();
                    }));
                    this._popup = tss.UI.Div(tss.UI._$1("tss-contextmenu-popup"), this._childContainer);
                    this._contentHtml = tss.UI.Div$1(tss.UI._(), this._modalOverlay, this._popup);
                }

                this._popup.style.height = "unset";
                this._popup.style.left = "-1000px";
                this._popup.style.top = "-1000px";

                tss.LayerT(tss.ContextMenu).prototype.Show.call(this);

                if (!this._popup.classList.contains("tss-no-focus")) {
                    this._popup.classList.add("tss-no-focus");
                }

                var popupRect = this._popup.getBoundingClientRect();
                this._popup.style.left = x + "px";
                this._popup.style.top = y + "px";
                this._popup.style.minWidth = minWidth + "px";


                if (((((window.innerHeight - y) | 0) - 1) | 0) < popupRect.height) {
                    var top = y - popupRect.height;
                    if (top < 0) {
                        if (y > ((((window.innerHeight - y) | 0) - 1) | 0)) {
                            this._popup.style.top = "1px";
                            this._popup.style.height = ((y - 1) | 0) + "px";
                        } else {
                            this._popup.style.height = ((((window.innerHeight - y) | 0) - 1) | 0) + "px";
                        }
                    } else {
                        this._popup.style.top = System.Double.format(top) + "px";
                    }
                }

                if (((((window.innerWidth - x) | 0) - 1) | 0) < popupRect.width) {
                    var left = x - popupRect.width;
                    if (left < 0) {
                        if (x > ((((window.innerWidth - x) | 0) - 1) | 0)) {
                            this._popup.style.left = "1px";
                            this._popup.style.width = ((x - 1) | 0) + "px";
                        } else {
                            this._popup.style.width = ((((window.innerWidth - x) | 0) - 1) | 0) + "px";
                        }
                    } else {
                        this._popup.style.left = System.Double.format(left) + "px";
                    }
                }

                window.setTimeout(H5.fn.bind(this, function (e) {
                    document.addEventListener("keydown", H5.fn.cacheBind(this, this.OnPopupKeyDown));
                }), 100);

                this._extremeCoordsTopLeft.x = x;
                this._extremeCoordsTopLeft.y = y;
                this._extremeCoordsBottomRight.x = x + popupRect.width;
                this._extremeCoordsBottomRight.y = y + popupRect.height;

                this.PossiblySetupSubMenuHooks();
            },
            CancelPendingMenuItemActivations: function () {
                if (this._timeoutId > 0) {
                    clearTimeout(this._timeoutId);
                }
            },
            CalculateSlope: function (a, b) {
                return (b.y - a.y) / (b.x - a.x);
            },
            CalculateTopLeftCoords: function (element) {
                var rect = element.getBoundingClientRect();
                var topX = rect.left + (window.pageXOffset !== 0 ? window.pageXOffset : document.documentElement.scrollLeft);
                var topY = rect.top + (window.pageYOffset !== 0 ? window.pageYOffset : document.documentElement.scrollTop);
                return new tss.ContextMenu.Point2D.$ctor1(topX, topY);
            },
            CalculateTopAndBottomLeftCoords: function (element) {
                var rect = element.getBoundingClientRect();
                var topX = rect.left + (window.pageXOffset !== 0 ? window.pageXOffset : document.documentElement.scrollLeft);
                var topY = rect.top + (window.pageYOffset !== 0 ? window.pageYOffset : document.documentElement.scrollTop);
                return new (System.ValueTuple$4(tss.ContextMenu.Point2D,tss.ContextMenu.Point2D,System.Int32,System.Int32)).$ctor1(new tss.ContextMenu.Point2D.$ctor1(topX, topY), new tss.ContextMenu.Point2D.$ctor1(topX, topY + element.offsetHeight), element.offsetWidth, element.offsetHeight);
            },
            ActivateMenuItem: function (menuItem) {
                this._activeMenuItem = menuItem || (function () {
                    throw new System.ArgumentNullException.ctor();
                })();

                if (this._activeMenuItem.HasSubMenu) {
                    var menuItemElement = menuItem.Render();

                    this._activeSubMenu = menuItem._subMenu;

                    var selfRect = menuItemElement.getBoundingClientRect();


                    this._activeSubMenu.ShowFor$2(menuItemElement, H5.Int.clip32(selfRect.width), H5.Int.clip32(-selfRect.height), true);
                    menuItemElement.classList.add("tss-selected");
                    var activeSubMenuWidth = { };
                    var _activeSubMenuHeight = { };
                    H5.Deconstruct(this.CalculateTopAndBottomLeftCoords(this._activeSubMenu._popup).$clone(), H5.ref(this, "_activeSubMenuTopLeftCoords"), H5.ref(this, "_activeSubMenuBottomLeftCoords"), activeSubMenuWidth, _activeSubMenuHeight);


                    this._extremeCoordsTopLeft.x = this._menuElementCoordsTopLeft.x;
                    this._extremeCoordsTopLeft.y = this._menuElementCoordsTopLeft.y;
                    this._extremeCoordsBottomRight.x = this._activeSubMenuTopLeftCoords.x + activeSubMenuWidth.v;
                    this._extremeCoordsBottomRight.y = this._activeSubMenuTopLeftCoords.y + _activeSubMenuHeight.v;
                }
            },
            ShouldChangeActiveMenuItem: function () {

                var shouldChange = this._activeMenuItem == null || this.CalculateSlope(this._previousMouseCoords.$clone(), this._activeSubMenuTopLeftCoords.$clone()) < this.CalculateSlope(this._currentMouseCoords.$clone(), this._activeSubMenuTopLeftCoords.$clone()) || this.CalculateSlope(this._previousMouseCoords.$clone(), this._activeSubMenuBottomLeftCoords.$clone()) > this.CalculateSlope(this._currentMouseCoords.$clone(), this._activeSubMenuBottomLeftCoords.$clone());
                return shouldChange;
            },
            DeactivateActiveMenuItem: function () {
                if (this._activeMenuItem != null) {
                    this._activeMenuItem.HideSubmenus();
                    this._activeMenuItem = null;
                }
            },
            PossiblyActivateMenuItem: function (menuItem) {
                this.CancelPendingMenuItemActivations();
                if (!this.ShouldChangeActiveMenuItem()) {
                    return false;
                } else {
                    this.DeactivateActiveMenuItem();
                    this.ActivateMenuItem(menuItem);
                    return true;
                }
            },
            OnMenuItemMouseEnter: function (item) {
                if (!this.PossiblyActivateMenuItem(item)) {
                    this._timeoutId = window.setTimeout(H5.fn.bind(this, function (args) {
                        if (System.Linq.Enumerable.from(this._items, tss.ContextMenu.Item).any(function (i) {
                                return i.CurrentlyMouseovered;
                            })) {
                            this.CancelPendingMenuItemActivations();
                            this.DeactivateActiveMenuItem();
                            this.ActivateMenuItem(System.Linq.Enumerable.from(this._items, tss.ContextMenu.Item).first(function (i) {
                                    return i.CurrentlyMouseovered;
                                }));
                        }
                    }), tss.ContextMenu.DELAY);
                }
            },
            PossiblySetupSubMenuHooks: function () {
                var $t;
                if (System.Linq.Enumerable.from(this._items, tss.ContextMenu.Item).any(function (i) {
                        return i.HasSubMenu;
                    })) {
                    window.addEventListener("mousemove", H5.fn.cacheBind(this, this.OnWindowMouseMove));
                    this._menuElementCoordsTopLeft = this.CalculateTopLeftCoords(this._popup);
                    $t = H5.getEnumerator(this._items);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            item.HookMouseEnter(H5.fn.cacheBind(this, this.OnMenuItemMouseEnter));
                        }
                    } finally {
                        if (H5.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            },
            Hide: function (onHidden) {
                var $t;
                if (onHidden === void 0) { onHidden = null; }
                window.removeEventListener("mousemove", H5.fn.cacheBind(this, this.OnWindowMouseMove));
                document.removeEventListener("keydown", H5.fn.cacheBind(this, this.OnPopupKeyDown));
                tss.LayerT(tss.ContextMenu).prototype.Hide.call(this, onHidden);
                $t = H5.getEnumerator(this._items);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        item.HideSubmenus();
                        item.UnHookMouseEnter(H5.fn.cacheBind(this, this.OnMenuItemMouseEnter));
                    }
                } finally {
                    if (H5.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            Items: function (children) {
                if (children === void 0) { children = []; }
                children.forEach(H5.fn.bind(this, function (x) {
                        this.Add(x);
                    }));
                return this;
            },
            OnPopupKeyDown: function (e) {
                var ev = e;

                if (ev.keyCode === 38) {
                    if (this._contentHtml.classList.contains("tss-no-focus")) {
                        this._contentHtml.classList.remove("tss-no-focus");
                    }
                    if (document.activeElement != null && this._childContainer.contains(document.activeElement)) {
                        var el = (System.Linq.Enumerable.from(this._childContainer.children, Element).takeWhile(function (x) {
                                return !H5.equals(x, document.activeElement);
                            }).lastOrDefault(function (x) {
                                return (x).tabIndex !== -1;
                            }, null));
                        if (el != null) {
                            el.focus();
                        } else {
                            (System.Linq.Enumerable.from(this._childContainer.children, Element).last(function (x) {
                                    return (x).tabIndex !== -1;
                                })).focus();
                        }
                    } else {
                        (System.Linq.Enumerable.from(this._childContainer.children, Element).last(function (x) {
                                return (x).tabIndex !== -1;
                            })).focus();
                    }
                } else if (ev.keyCode === 40) {
                    if (this._contentHtml.classList.contains("tss-no-focus")) {
                        this._contentHtml.classList.remove("tss-no-focus");
                    }
                    if (document.activeElement != null && this._childContainer.contains(document.activeElement)) {
                        var el1 = (System.Linq.Enumerable.from(this._childContainer.children, Element).skipWhile(function (x) {
                                return !H5.equals(x, document.activeElement);
                            }).skip(1).firstOrDefault(function (x) {
                                return (x).tabIndex !== -1;
                            }, null));
                        if (el1 != null) {
                            el1.focus();
                        } else {
                            (System.Linq.Enumerable.from(this._childContainer.children, Element).first(function (x) {
                                    return (x).tabIndex !== -1;
                                })).focus();
                        }
                    } else {
                        (System.Linq.Enumerable.from(this._childContainer.children, Element).first(function (x) {
                                return (x).tabIndex !== -1;
                            })).focus();
                    }
                } else if (ev.keyCode === 27) {
                    this.Hide();
                }
            }
        }
    });

    H5.define("tss.MomentPickerBase", function (TMomentPicker, TMoment) { return {
        inherits: [tss.Input(TMomentPicker),tss.ITF,tss.IHBG,tss.IHFG],
        props: {
            Moment: {
                get: function () {
                    return this.FormatMoment(this.Text);
                }
            },
            Max: {
                get: function () {
                    return this.FormatMoment(this.InnerElement.max);
                },
                set: function (value) {
                    this.InnerElement.max = this.FormatMoment$1(value);
                }
            },
            Min: {
                get: function () {
                    return this.FormatMoment(this.InnerElement.min);
                },
                set: function (value) {
                    this.InnerElement.min = this.FormatMoment$1(value);
                }
            },
            Step: {
                get: function () {
                    return System.Int32.parse(this.InnerElement.step);
                },
                set: function (value) {
                    this.InnerElement.step = H5.toString(value);
                }
            },
            Size: {
                get: function () {
                    return tss.ITFX.FromClassList$1(this.InnerElement, "tss-fontsize-small");
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.TS, this.Size));
                    this.InnerElement.classList.add(System.Enum.toString(tss.TS, value));
                }
            },
            Weight: {
                get: function () {
                    return tss.ITFX.FromClassList$2(this.InnerElement, "tss-fontweight-regular");
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.TW, this.Weight));
                    this.InnerElement.classList.add(System.Enum.toString(tss.TW, value));
                }
            },
            TextAlign: {
                get: function () {
                    return tss.ITFX.FromClassList(this.InnerElement, "tss-textalign-left");
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.TA, this.TextAlign));
                    this.InnerElement.classList.add(System.Enum.toString(tss.TA, value));
                }
            },
            Background: {
                get: function () {
                    return this.InnerElement.style.background;
                },
                set: function (value) {
                    this.InnerElement.style.background = value;
                }
            },
            Foreground: {
                get: function () {
                    return this.InnerElement.style.color;
                },
                set: function (value) {
                    this.InnerElement.style.color = value;
                }
            }
        },
        alias: [
            "Size", "tss$ITF$Size",
            "Weight", "tss$ITF$Weight",
            "TextAlign", "tss$ITF$TextAlign",
            "Background", "tss$IHBG$Background",
            "Foreground", "tss$IHFG$Foreground"
        ],
        ctors: {
            ctor: function (type, defaultText) {
                if (defaultText === void 0) { defaultText = null; }

                this.$initialize();
                tss.Input(TMomentPicker).ctor.call(this, type, defaultText);
                this.InnerElement.classList.add("tss-fontsize-small");
                this.InnerElement.classList.add("tss-fontweight-regular");
                this.InnerElement.style.alignItems = "center";
            }
        },
        methods: {
            SetMax: function (max) {
                this.Max = max;
                return H5.cast(this, TMomentPicker);
            },
            SetMin: function (min) {
                this.Min = min;
                return H5.cast(this, TMomentPicker);
            },
            SetStep: function (step) {
                this.Step = step;
                return H5.cast(this, TMomentPicker);
            }
        }
    }; });

    H5.define("tss.Dropdown", {
        inherits: function () { return [tss.LayerT(tss.Dropdown),tss.ICVT(tss.Dropdown),tss.IObservableListComponent(tss.Dropdown.Item),tss.ITAB]; },
        statics: {
            fields: {
                _multiSelectDropdownClassName: null,
                _firstItem: null
            },
            ctors: {
                init: function () {
                    this._multiSelectDropdownClassName = "tss-dropdown-multi";
                }
            },
            methods: {
                RecursiveHighlight: function (baseElement, highlighter) {
                    var $t;
                    if (baseElement.childElementCount > 0) {
                        $t = H5.getEnumerator(baseElement.children, Element);
                        try {
                            while ($t.moveNext()) {
                                var e = $t.Current;
                                tss.Dropdown.RecursiveHighlight(e, highlighter);
                            }
                        } finally {
                            if (H5.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    } else {
                        if (highlighter.isMatch(baseElement.textContent)) {
                            var txt = baseElement.textContent;
                            baseElement.textContent = "";
                            baseElement.innerHTML = highlighter.replace(txt, "<mark>$1</mark>");
                        }
                    }
                },
                RecursiveUnhighlight: function (baseElement) {
                    var $t;
                    if (H5.rE(baseElement.tagName, "MARK")) {
                        var newChild = document.createTextNode(baseElement.textContent);
                        baseElement.parentElement.replaceChild(newChild, baseElement);
                    } else if (baseElement.childElementCount > 0) {
                        $t = H5.getEnumerator(baseElement.children, Element);
                        try {
                            while ($t.moveNext()) {
                                var e = $t.Current;
                                tss.Dropdown.RecursiveUnhighlight(e);
                            }
                        } finally {
                            if (H5.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }
                }
            }
        },
        fields: {
            _childContainer: null,
            _container: null,
            _noItemsSpan: null,
            _errorSpan: null,
            _selectedChildren: null,
            _placeholder: null,
            _spinner: null,
            _isChanged: false,
            _callSelectOnChangingItemSelections: false,
            _itemsSource: null,
            _lastRenderedItems: null,
            _popupDiv: null,
            _search: null,
            _latestRequestID: 0
        },
        props: {
            TabIndex: {
                set: function (value) {
                    this.InnerElement.tabIndex = value;
                }
            },
            Mode: {
                get: function () {
                    return this._childContainer.classList.contains(tss.Dropdown._multiSelectDropdownClassName) ? tss.Dropdown.SelectMode.Multi : tss.Dropdown.SelectMode.Single;
                },
                set: function (value) {
                    if (value === tss.Dropdown.SelectMode.Single) {
                        this._childContainer.classList.remove(tss.Dropdown._multiSelectDropdownClassName);
                    } else {
                        this._childContainer.classList.add(tss.Dropdown._multiSelectDropdownClassName);
                    }
                }
            },
            SelectedItems: {
                get: function () {
                    var $t;
                    return ($t = tss.Dropdown.Item, System.Linq.Enumerable.from(this._selectedChildren, $t).ToArray($t));
                }
            },
            SelectedText: {
                get: function () {
                    return H5.toArray(System.Linq.Enumerable.from(this._selectedChildren, tss.Dropdown.Item).select(function (x) {
                                return x.Text;
                            })).join(", ");
                }
            },
            Error: {
                get: function () {
                    return this._errorSpan.innerText;
                },
                set: function (value) {
                    this._errorSpan.innerText = value;
                }
            },
            HasBorder: {
                get: function () {
                    return !this._container.classList.contains("tss-noborder");
                },
                set: function (value) {
                    if (value) {
                        this._container.classList.remove("tss-noborder");
                    } else {
                        this._container.classList.add("tss-noborder");
                    }
                }
            },
            IsInvalid: {
                get: function () {
                    return this._container.classList.contains("tss-invalid");
                },
                set: function (value) {
                    if (value) {
                        this._container.classList.add("tss-invalid");
                    } else {
                        this._container.classList.remove("tss-invalid");
                    }
                }
            },
            IsEnabled: {
                get: function () {
                    return !this._container.classList.contains("tss-disabled");
                },
                set: function (value) {
                    if (value) {
                        this._container.classList.remove("tss-disabled");
                    } else {
                        this._container.classList.add("tss-disabled");
                    }
                }
            },
            IsRequired: {
                get: function () {
                    return this._container.classList.contains("tss-required");
                },
                set: function (value) {
                    if (value) {
                        this._container.classList.add("tss-required");
                    } else {
                        this._container.classList.remove("tss-required");
                    }
                }
            }
        },
        alias: [
            "TabIndex", "tss$ITAB$TabIndex",
            "Error", "tss$ICV$Error",
            "IsInvalid", "tss$ICV$IsInvalid",
            "Render", "tss$IC$Render",
            "Attach", "tss$ICVT$tss$Dropdown$Attach",
            "AsObservable", "tss$IObservableListComponent$tss$Dropdown$Item$AsObservable"
        ],
        ctors: {
            ctor: function (noItemsSpan) {
                if (noItemsSpan === void 0) { noItemsSpan = null; }

                this.$initialize();
                tss.LayerT(tss.Dropdown).ctor.call(this);
                this._noItemsSpan = noItemsSpan || tss.UI.Span(tss.UI._$2(void 0, void 0, void 0, void 0, void 0, void 0, "There are no options available", void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0));

                this.InnerElement = tss.UI.Div(tss.UI._$1("tss-dropdown"), this._noItemsSpan);

                this._errorSpan = tss.UI.Span(tss.UI._$1("tss-dropdown-error"));

                this._container = tss.UI.Div$1(tss.UI._$1("tss-dropdown-container"), this.InnerElement, this._errorSpan);

                this._childContainer = tss.UI.Div$2(tss.UI._());

                this.InnerElement.onclick = H5.fn.bind(this, function (e) {
                    tss.UI.StopEvent(e);
                    if (!this.IsVisible && this.IsEnabled) {
                        this.Show();
                    }
                });

                this._container.onclick = H5.fn.bind(this, function (e) {
                    tss.UI.StopEvent(e);
                    if (!this.IsVisible && this.IsEnabled) {
                        this.Show();
                    }
                });

                this._callSelectOnChangingItemSelections = true;
                this._selectedChildren = new (tss.ObservableList(tss.Dropdown.Item)).ctor();

                this._latestRequestID = 0;
            }
        },
        methods: {
            SuppressSelectedOnChangingItemSelections: function () {
                this._callSelectOnChangingItemSelections = false;
                return this;
            },
            Render: function () {
                tss.domObs.WhenMounted(this._container, H5.fn.bind(this, function () {
                    tss.domObs.WhenRemoved(this._container, H5.fn.bind(this, function () {
                        this.Hide();
                    }));
                }));
                return this._container;
            },
            Focus: function () {
                tss.domObs.WhenMounted(this.InnerElement, H5.fn.bind(this, function () {
                    try {
                        this.InnerElement.scrollIntoViewIfNeeded();
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        this.InnerElement.scrollIntoView();
                    }
                    this.InnerElement.focus();
                }));
                return this;
            },
            /**
             * This will initiate the last async data retrieval specified via a call to the Items method overload that takes a Func-of-Task-of-array-of-T. If there has not been call to that method (or if LoadItemsAsync has already been called after
             it was called) then this will throw an InvalidOperationException. If another async data retrieval had already been initiated but has not completed yet, its results will be ignored when it DOES complete because this call came after it
             and it is presumed that this data will be more current).
             *
             * @instance
             * @public
             * @this tss.Dropdown
             * @memberof tss.Dropdown
             * @return  {System.Threading.Tasks.Task}
             */
            LoadItemsAsync: function () {
                var $s = 0,
                    $t1, 
                    $tr1, 
                    $jff, 
                    $tcs = new H5.TCS(), 
                    $rv, 
                    currentRequestID, 
                    itemsSourceLocal, 
                    items, 
                    $ae, 
                    $ab = H5.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $s = H5.STEP([0,1], $s);
                                switch ($s) {
                                    case 0: {
                                        if (H5.staticEquals(this._itemsSource, null)) {
                                            throw new System.InvalidOperationException.$ctor1("Only valid with async items");
                                        }

                                        currentRequestID = ((this._latestRequestID = (this._latestRequestID + 1) | 0));

                                        itemsSourceLocal = this._itemsSource;
                                        this._itemsSource = null;

                                        this.EnsureAsyncLoadingStateEnabled();

                                        $t1 = itemsSourceLocal();
                                        $s = 1;
                                        if ($t1.isC()) {
                                            continue;
                                        }
                                        $t1.c($ab);
                                        return;
                                    }
                                    case 1: {
                                        $tr1 = $t1.gAR();
                                        items = $tr1;
                                        if (currentRequestID !== this._latestRequestID) {
                                            $tcs.sR(null);
                                            return;
                                        }

                                        this.Items$1(items);
                                        $tcs.sR(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.sR(null);
                                        return;
                                    }
                                }
                            }
                        } catch($ae1) {
                            $ae = System.Exception.create($ae1);
                            $tcs.sE($ae);
                        }
                    }, arguments);

                $ab();
                return $tcs.task;
            },
            Show: function () {
                if (this._contentHtml == null) {
                    this._popupDiv = tss.UI.Div(tss.UI._$1("tss-dropdown-popup"), this._childContainer);
                    this._contentHtml = tss.UI.Div(tss.UI._$1("tss-dropdown-layer"), this._popupDiv);

                    this._contentHtml.addEventListener("click", H5.fn.cacheBind(this, this.OnWindowClick));
                    this._contentHtml.addEventListener("dblclick", H5.fn.cacheBind(this, this.OnWindowClick));
                    this._contentHtml.addEventListener("contextmenu", H5.fn.cacheBind(this, this.OnWindowClick));
                    this._contentHtml.addEventListener("wheel", H5.fn.cacheBind(this, this.OnWindowClick));

                    if (H5.is(this._itemsSource, System.Object)) {
                        tss.tX.fireAndForget(this.LoadItemsAsync().continueWith(H5.fn.bind(this, function (t) {
                            return this.Show();
                        })));
                        return this;
                    }
                }

                this._popupDiv.style.height = "unset";
                this._popupDiv.style.left = "-1000px";
                this._popupDiv.style.top = "-1000px";

                tss.LayerT(tss.Dropdown).prototype.Show.call(this);

                this._isChanged = false;

                if (!this._popupDiv.classList.contains("tss-no-focus")) {
                    this._popupDiv.classList.add("tss-no-focus");
                }

                this.RecomputePopupPosition();

                tss.domObs.WhenMounted(this._popupDiv, H5.fn.bind(this, function () {
                    document.addEventListener("keydown", H5.fn.cacheBind(this, this.OnPopupKeyDown));
                    if (this._selectedChildren.Count > 0) {
                        this._selectedChildren.getItem(((this._selectedChildren.Count - 1) | 0)).Render().focus();
                    }
                }));

                return this;
            },
            RecomputePopupPosition: function () {
                var rect = this._container.getBoundingClientRect();
                var contentRect = this._popupDiv.getBoundingClientRect();
                this._popupDiv.style.top = System.Double.format(rect.bottom - 1) + "px";
                this._popupDiv.style.minWidth = System.Double.format(rect.width) + "px";

                var finalLeft = rect.left;
                if (rect.left + contentRect.width + 1 > window.innerWidth) {
                    finalLeft = window.innerWidth - contentRect.width - 1;
                }

                this._popupDiv.style.left = System.Double.format(finalLeft) + "px";

                if (window.innerHeight - rect.bottom - 1 < contentRect.height) {
                    var top = rect.top - contentRect.height;
                    if (top < 0) {
                        if (rect.top > window.innerHeight - rect.bottom - 1) {
                            this._popupDiv.style.top = "1px";
                            this._popupDiv.style.height = System.Double.format(rect.top - 1) + "px";
                        } else {
                            this._popupDiv.style.height = System.Double.format(window.innerHeight - rect.bottom - 1) + "px";
                        }
                    } else {
                        this._popupDiv.style.top = System.Double.format(top) + "px";
                    }
                }
            },
            Hide: function (onHidden) {
                if (onHidden === void 0) { onHidden = null; }
                this.ClearSearch();
                this.ResetSearchItems();
                document.removeEventListener("click", H5.fn.cacheBind(this, this.OnWindowClick));
                document.removeEventListener("dblclick", H5.fn.cacheBind(this, this.OnWindowClick));
                document.removeEventListener("contextmenu", H5.fn.cacheBind(this, this.OnWindowClick));
                document.removeEventListener("wheel", H5.fn.cacheBind(this, this.OnWindowClick));
                document.removeEventListener("keydown", H5.fn.cacheBind(this, this.OnPopupKeyDown));
                tss.LayerT(tss.Dropdown).prototype.Hide.call(this, onHidden);
                if (this._isChanged) {
                    this.RaiseOnChange(null);
                }
            },
            Attach: function (handler) {
                this.addInputUpdated(H5.fn.bind(this, function (s, _) {
                    handler(this);
                }));
            },
            Single: function () {
                this.Mode = tss.Dropdown.SelectMode.Single;
                return this;
            },
            Multi: function () {
                this.Mode = tss.Dropdown.SelectMode.Multi;
                return this;
            },
            NoArrow: function () {
                this.InnerElement.classList.add("tss-dropdown-noarrow");
                return this;
            },
            /**
             * This will set items to the available options, replacing any that are already rendered (and meaning that any async data retrievals that have started but not completed yet will be ignored when they DO complete because this call came
             after it and it is presumed that this data will be more current)
             *
             * @instance
             * @public
             * @this tss.Dropdown
             * @memberof tss.Dropdown
             * @param   {Array.<Tesserae.Dropdown.Item>}    children
             * @return  {tss.Dropdown}
             */
            Items$1: function (children) {
                if (children === void 0) { children = []; }
                tss.UI.ClearChildren(tss.ScrollBar.GetCorrectContainer(this._childContainer));

                this._selectedChildren.clear();

                this._latestRequestID = (this._latestRequestID + 1) | 0;

                this._lastRenderedItems = tss.ROA(tss.Dropdown.Item).op_Implicit(children);
                children.forEach(H5.fn.bind(this, function (component) {
                        tss.ScrollBar.GetCorrectContainer(this._childContainer).appendChild(component.Render());
                        component.addSelectedItem(H5.fn.cacheBind(this, this.OnItemSelected));
                    }));
                this.EnsureAsyncLoadingStateDisabled();
                this.UpdateStateBasedUponCurrentSelections();
                if (System.Linq.Enumerable.from(children, tss.Dropdown.Item).any()) {
                    this.Disabled(false);
                    this._noItemsSpan.style.display = "none";
                } else {
                    this.Hide();
                    this.Disabled(true);
                    this._noItemsSpan.style.display = "";
                }
                return this;
            },
            /**
             * This will specify an asynchronous callback that describes how to get available options - note that they will not be retrieved until LoadItemsAsync is called (when that successfully gets new item data, any existing items will be
             removed first and the list will be completely replace with the new data). LoadItemsAsync may be called explicitly (and immediately after setting this) - if not, it will be called automatically when the User clicks to open the dropdown.
             *
             * @instance
             * @public
             * @this tss.Dropdown
             * @memberof tss.Dropdown
             * @param   {System.Func}     itemsSource
             * @return  {tss.Dropdown}
             */
            Items: function (itemsSource) {
                this._noItemsSpan.style.display = "none";
                this._itemsSource = itemsSource;
                return this;
            },
            Disabled: function (value) {
                if (value === void 0) { value = true; }
                this.IsEnabled = !value;
                return this;
            },
            NoBorder: function () {
                this.HasBorder = false;
                return this;
            },
            NoBackground: function () {
                this._container.classList.add("tss-dropdown-nobg");
                return this;
            },
            Required: function () {
                this.IsRequired = true;
                return this;
            },
            Placeholder: function (text) {
                this._placeholder = tss.txtX.Secondary(tss.txt, tss.UI.TextBlock(text));
                return this;
            },
            Placeholder$1: function (placeholder) {
                this._placeholder = placeholder;
                return this;
            },
            OnWindowClick: function (e) {
                if (!H5.rE(e.srcElement, this._childContainer) && !this._childContainer.contains(e.srcElement)) {
                    this.Hide();
                }
            },
            UpdateStateBasedUponCurrentSelections: function () {
                this._selectedChildren.clear();
                this._selectedChildren.AddRange(System.Linq.Enumerable.from(this._lastRenderedItems, tss.Dropdown.Item).where(function (item) {
                        return item.IsSelected;
                    }));
                this.RenderSelected();
            },
            OnItemSelected: function (sender) {
                var $t;
                if (this.Mode === tss.Dropdown.SelectMode.Single) {
                    if (sender.IsSelected) {
                        $t = H5.getEnumerator(this._lastRenderedItems);
                        try {
                            while ($t.moveNext()) {
                                var item = $t.Current;
                                if (!H5.rE(item, sender)) {
                                    item.IsSelected = false;
                                }
                            }
                        } finally {
                            if (H5.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    } else {
                        return;
                    }
                    this.Hide();
                } else {
                    this._isChanged = true;
                }

                this.UpdateStateBasedUponCurrentSelections();

                if (this._callSelectOnChangingItemSelections) {
                    this.RaiseOnInput(null);
                }
            },
            RenderSelected: function () {
                var $t;
                tss.UI.ClearChildren(this.InnerElement);

                if (System.Linq.Enumerable.from(this.SelectedItems, tss.Dropdown.Item).any()) {
                    for (var i = 0; i < this.SelectedItems.length; i = (i + 1) | 0) {
                        var sel = ($t = this.SelectedItems)[System.Array.index(i, $t)];
                        var clone = sel.RenderSelected();
                        clone.classList.remove("tss-dropdown-item");
                        clone.classList.remove("tss-selected");
                        clone.classList.add("tss-dropdown-item-on-box");
                        this.InnerElement.appendChild(clone);
                    }
                } else {
                    if (H5.is(this._placeholder, System.Object)) {
                        var rendered = this._placeholder.tss$IC$Render();
                        rendered.classList.add("tss-dropdown-item-on-box");
                        this.InnerElement.appendChild(rendered);
                    }
                }

                this.InnerElement.appendChild(this._noItemsSpan);
            },
            OnPopupKeyDown: function (e) {
                var ev = e;

                if (H5.rE(ev.key, "ArrowUp")) {
                    var visibleItems = System.Linq.Enumerable.from(this._childContainer.children, Element).where(function (he) {
                            return !H5.rE(he.style.display, "none");
                        }).ToArray(Element);

                    if (this._popupDiv.classList.contains("tss-no-focus")) {
                        this._popupDiv.classList.remove("tss-no-focus");
                    }

                    if (document.activeElement != null && this._childContainer.contains(document.activeElement)) {
                        var el;
                        if (((el = System.Linq.Enumerable.from(visibleItems, Element).takeWhile(function (x) {
                                return !H5.equals(x, document.activeElement);
                            }).lastOrDefault(function (x) {
                                return (x).tabIndex !== -1;
                            }, null))) != null) {
                            tss.Dropdown._firstItem = el;
                        } else {
                            tss.Dropdown._firstItem = System.Linq.Enumerable.from(visibleItems, Element).lastOrDefault(function (x) {
                                    return (x).tabIndex !== -1;
                                }, null);
                        }
                    } else {
                        tss.Dropdown._firstItem = System.Linq.Enumerable.from(visibleItems, Element).lastOrDefault(function (x) {
                                return (x).tabIndex !== -1;
                            }, null);
                    }

                    if (H5.is(tss.Dropdown._firstItem, System.Object)) {
                        tss.Dropdown._firstItem.focus();
                    }
                } else if (H5.rE(ev.key, "ArrowDown")) {
                    var visibleItems1 = System.Linq.Enumerable.from(this._childContainer.children, Element).where(function (he) {
                            return !H5.rE(he.style.display, "none");
                        }).ToArray(Element);

                    if (this._popupDiv.classList.contains("tss-no-focus")) {
                        this._popupDiv.classList.remove("tss-no-focus");
                    }

                    if (document.activeElement != null && this._childContainer.contains(document.activeElement)) {
                        var el1;
                        if (((el1 = System.Linq.Enumerable.from(visibleItems1, Element).skipWhile(function (x) {
                                return !H5.equals(x, document.activeElement);
                            }).skip(1).firstOrDefault(function (x) {
                                return (x).tabIndex !== -1;
                            }, null))) != null) {
                            tss.Dropdown._firstItem = el1;
                        } else {
                            tss.Dropdown._firstItem = System.Linq.Enumerable.from(visibleItems1, Element).firstOrDefault(function (x) {
                                    return (x).tabIndex !== -1;
                                }, null);
                        }
                    } else {
                        tss.Dropdown._firstItem = System.Linq.Enumerable.from(visibleItems1, Element).firstOrDefault(function (x) {
                                return (x).tabIndex !== -1;
                            }, null);
                    }

                    if (H5.is(tss.Dropdown._firstItem, System.Object)) {
                        tss.Dropdown._firstItem.focus();
                    }
                } else {
                    this.UpdateSearch(ev);
                }
            },
            AsObservable: function () {
                return this._selectedChildren;
            },
            UpdateSearch: function (e) {
                tss.UI.StopEvent(e);

                if (H5.rE(e.key, "Backspace")) {
                    if (!System.String.isNullOrWhiteSpace(this._search)) {
                        this._search = this._search.substr(0, ((this._search.length - 1) | 0));
                        this.SearchItems();
                    }
                } else if (H5.rE(e.key, "Enter")) {
                    tss.Dropdown._firstItem != null ? tss.Dropdown._firstItem.click() : null;
                } else if (H5.rE(e.key, "Escape")) {
                    this.ClearSearch();
                    this.ResetSearchItems();
                    this.Hide();
                } else if (e.key.length === 1 && System.Text.RegularExpressions.Regex.isMatch(e.key, "[a-z0-9 _\\-.,;:!?\"'/$]", 1)) {
                    this._search = (this._search || "") + (e.key || "");
                    this.SearchItems();
                }

                if (System.String.isNullOrWhiteSpace(this._search)) {
                    this.ResetSearchItems();
                }
            },
            ResetSearchItems: function (itemsToReset) {
                var $t;
                if (itemsToReset === void 0) { itemsToReset = null; }
                itemsToReset = itemsToReset || this.GetItems();

                $t = H5.getEnumerator(itemsToReset, System.ValueTuple$2(HTMLElement,System.String));
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current.$clone();
                        item.Item1.style.display = "block";
                        tss.Dropdown.RecursiveUnhighlight(item.Item1);
                    }
                } finally {
                    if (H5.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            ClearSearch: function () {
                this._search = "";
            },
            /**
             * When a LoadItemsAsync call starts, there should be a spinner to indicate that something is happening in the background - but if a further async request comes in before the previous one has completed then there is no
             need to change anything as the spinner state will already be enabled. When multiple async requests overlap, which was started later will take precedence and the results of the earlier-started one will be ignored -
             when the 'winning' request completes, it will call the synchronous Items method and that will ensure that any loading state is disabled.
             *
             * @instance
             * @private
             * @this tss.Dropdown
             * @memberof tss.Dropdown
             * @return  {void}
             */
            EnsureAsyncLoadingStateEnabled: function () {
                if (H5.is(this._spinner, System.Object)) {
                    return;
                }

                this._spinner = tss.UI.Div$2(tss.UI._$1("tss-spinner"));
                this._container.appendChild(this._spinner);
                this._container.style.pointerEvents = "none";
            },
            /**
             * When data is successfully retrieved from a LoadItemsAsync call, it will call the synchronous Items method that will call this and ensure that any spinner state is disabled. This happens in the simple case where
             there is only that single async retrieval and it runs to completion and it also happens if it is superceded by a more recent LoadItemsAsync call or by a separate synchronous Items call.
             *
             * @instance
             * @private
             * @this tss.Dropdown
             * @memberof tss.Dropdown
             * @return  {void}
             */
            EnsureAsyncLoadingStateDisabled: function () {
                if (this._spinner == null) {
                    return;
                }

                this._spinner.remove();
                this._container.style.pointerEvents = "unset";
            },
            GetItems: function () {
                return System.Linq.Enumerable.from(this._childContainer.children, Element).select(function (child) {
                        return new (System.ValueTuple$2(HTMLElement,System.String)).$ctor1(child, child.textContent);
                    }).ToArray(System.ValueTuple$2(HTMLElement,System.String));
            },
            SearchItems: function () {
                var $t, $t1;
                var searchTerm = this._search.trim().toLowerCase();

                var items = this.GetItems();
                var itemsToRemove = System.Linq.Enumerable.from(items, System.ValueTuple$2(HTMLElement,System.String)).where(function (item) {
                        return !(System.String.contains(item.Item2.toLowerCase(),searchTerm));
                    });
                var itemsToReset = System.Linq.Enumerable.from(items, System.ValueTuple$2(HTMLElement,System.String)).except(itemsToRemove);
                tss.Dropdown._firstItem = itemsToReset.firstOrDefault(null, new (System.ValueTuple$2(HTMLElement,System.String))()).Item1;

                this.ResetSearchItems(itemsToReset);
                $t = H5.getEnumerator(itemsToRemove);
                try {
                    while ($t.moveNext()) {
                        var _d1 = $t.Current.$clone();
                        var item = { };
                        var textContent = { };
                        H5.Deconstruct(_d1.$clone(), item, textContent);
                        item.v.style.display = "none";
                    }
                } finally {
                    if (H5.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                var regex = new System.Text.RegularExpressions.Regex.ctor("(" + (System.Text.RegularExpressions.Regex.escape(searchTerm) || "") + ")", 1);
                $t1 = H5.getEnumerator(itemsToReset);
                try {
                    while ($t1.moveNext()) {
                        var _d2 = $t1.Current.$clone();
                        var item1 = { };
                        H5.Deconstruct(_d2.$clone(), item1);
                        tss.Dropdown.RecursiveUnhighlight(item1.v);
                        if (searchTerm.length > 0) {
                            tss.Dropdown.RecursiveHighlight(item1.v, regex);
                        }
                    }
                } finally {
                    if (H5.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }

                this.RecomputePopupPosition();
            }
        }
    });

    H5.define("tss.LayerHost", {
        inherits: [tss.CB(tss.Layer,HTMLDivElement)],
        alias: ["Render", "tss$IC$Render"],
        ctors: {
            ctor: function () {
                this.$initialize();
                tss.CB(tss.Layer,HTMLDivElement).ctor.call(this);
                this.InnerElement = tss.UI.Div$2(tss.UI._$1("tss-layer-host"));
            }
        },
        methods: {
            Render: function () {
                return this.InnerElement;
            }
        }
    });

    H5.define("tss.TextBox", {
        inherits: function () { return [tss.Input(tss.TextBox),tss.ITF,tss.IHBG,tss.IHFG]; },
        props: {
            Placeholder: {
                get: function () {
                    return this.InnerElement.placeholder;
                },
                set: function (value) {
                    this.InnerElement.placeholder = value;
                }
            },
            IsReadOnly: {
                get: function () {
                    return this.InnerElement.hasAttribute("readonly");
                },
                set: function (value) {
                    if (value) {
                        this.InnerElement.setAttribute("readonly", "");
                    } else {
                        this.InnerElement.removeAttribute("readonly");
                    }
                }
            },
            MaxLength: {
                get: function () {
                    return this.InnerElement.maxLength;
                },
                set: function (value) {
                    this.InnerElement.maxLength = value;
                }
            },
            IsPassword: {
                get: function () {
                    return H5.rE(this.InnerElement.type, "password");
                },
                set: function (value) {
                    if (value) {
                        this.InnerElement.type = "password";
                    } else {
                        this.InnerElement.type = "";
                    }
                }
            },
            Size: {
                get: function () {
                    return tss.ITFX.FromClassList$1(this.InnerElement, "tss-fontsize-small");
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.TS, this.Size));
                    this.InnerElement.classList.add(System.Enum.toString(tss.TS, value));
                }
            },
            Weight: {
                get: function () {
                    return tss.ITFX.FromClassList$2(this.InnerElement, "tss-fontweight-regular");
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.TW, this.Weight));
                    this.InnerElement.classList.add(System.Enum.toString(tss.TW, value));
                }
            },
            TextAlign: {
                get: function () {
                    return tss.ITFX.FromClassList(this.InnerElement, "tss-textalign-left");
                },
                set: function (value) {
                    this.InnerElement.classList.remove(System.Enum.toString(tss.TA, this.TextAlign));
                    this.InnerElement.classList.add(System.Enum.toString(tss.TA, value));
                }
            },
            Background: {
                get: function () {
                    return this.InnerElement.style.background;
                },
                set: function (value) {
                    this.InnerElement.style.background = value;
                }
            },
            Foreground: {
                get: function () {
                    return this.InnerElement.style.color;
                },
                set: function (value) {
                    this.InnerElement.style.color = value;
                }
            }
        },
        alias: [
            "Size", "tss$ITF$Size",
            "Weight", "tss$ITF$Weight",
            "TextAlign", "tss$ITF$TextAlign",
            "Background", "tss$IHBG$Background",
            "Foreground", "tss$IHFG$Foreground"
        ],
        ctors: {
            ctor: function (text) {
                if (text === void 0) { text = ""; }

                this.$initialize();
                tss.Input(tss.TextBox).ctor.call(this, "text", text);
                this.InnerElement.classList.add("tss-fontsize-small");
                this.InnerElement.classList.add("tss-fontweight-regular");
            }
        },
        methods: {
            SetPlaceholder: function (placeholder) {
                this.Placeholder = placeholder;
                return this;
            },
            ReadOnly: function () {
                this.IsReadOnly = true;
                return this;
            },
            Password: function () {
                this.IsPassword = true;
                return this;
            },
            NoBorder: function () {
                this.InnerElement.classList.add("tss-textbox-noborder");
                return this;
            },
            UnlockHeight: function () {
                this.InnerElement.classList.add("tss-textbox-h100");
                return this;
            }
        }
    });

    H5.define("tss.DatePicker", {
        inherits: function () { return [tss.MomentPickerBase(tss.DatePicker,System.DateTimeOffset)]; },
        statics: {
            methods: {
                FormatDateTime: function (date) {
                    return date.ToString$1("yyyy-MM-dd");
                }
            }
        },
        props: {
            Date: {
                get: function () {
                    return this.Moment.$clone();
                }
            }
        },
        ctors: {
            ctor: function (date) {
                if (date === void 0) { date = null; }

                this.$initialize();
                tss.MomentPickerBase(tss.DatePicker,System.DateTimeOffset).ctor.call(this, "date", System.Nullable.hasValue(date) ? tss.DatePicker.FormatDateTime(System.Nullable.getValue(date).$clone()) : "");
            }
        },
        methods: {
            /**
             * Adds the pattern attribute to the underlying input element for graceful degradation when retrieving the user selected value on older browsers.
             *
             * @instance
             * @public
             * @this tss.DatePicker
             * @memberof tss.DatePicker
             * @return  {tss.DatePicker}        The current instance of the type.
             */
            WithBrowserFallback: function () {
                this.InnerElement.pattern = "\\d{4}-\\d{2}-\\d{2}";
                return this;
            },
            FormatMoment$1: function (date) {
                return tss.DatePicker.FormatDateTime(date.$clone());
            },
            FormatMoment: function (date) {
                var result = { };
                if (System.DateTime.tryParseExact(date, "yyyy-MM-dd", System.Globalization.DateTimeFormatInfo.invariantInfo, result)) {
                    return new System.DateTimeOffset.$ctor1(result.v);
                }

                return H5.getDefaultValue(System.DateTimeOffset);
            }
        }
    });

    H5.define("tss.DateTimePicker", {
        inherits: function () { return [tss.MomentPickerBase(tss.DateTimePicker,System.DateTimeOffset)]; },
        statics: {
            methods: {
                FormatDateTime: function (dateTime) {
                    return dateTime.ToString$1("yyyy-MM-ddTHH:mm");
                }
            }
        },
        props: {
            DateTime: {
                get: function () {
                    return this.Moment.$clone();
                }
            }
        },
        ctors: {
            ctor: function (dateTime) {
                if (dateTime === void 0) { dateTime = null; }

                this.$initialize();
                tss.MomentPickerBase(tss.DateTimePicker,System.DateTimeOffset).ctor.call(this, "datetime-local", System.Nullable.hasValue(dateTime) ? tss.DateTimePicker.FormatDateTime(System.Nullable.getValue(dateTime).$clone()) : "");
            }
        },
        methods: {
            /**
             * Adds the pattern attribute to the underlying input element for graceful degradation when retrieving the user selected value on older browsers.
             *
             * @instance
             * @public
             * @this tss.DateTimePicker
             * @memberof tss.DateTimePicker
             * @return  {tss.DateTimePicker}        The current instance of the type.
             */
            WithBrowserFallback: function () {
                this.InnerElement.pattern = "[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}";
                return this;
            },
            FormatMoment$1: function (dateTime) {
                return tss.DateTimePicker.FormatDateTime(dateTime.$clone());
            },
            FormatMoment: function (dateTime) {
                var result = { };
                if (System.DateTime.tryParseExact(dateTime, "yyyy-MM-ddTHH:mm", System.Globalization.DateTimeFormatInfo.invariantInfo, result)) {
                    return new System.DateTimeOffset.$ctor1(result.v);
                }

                return H5.getDefaultValue(System.DateTimeOffset);
            }
        }
    });

    H5.define("tss.MonthPicker", {
        inherits: function () { return [tss.MomentPickerBase(tss.MonthPicker,System.ValueTuple$2(System.Int32,System.Int32))]; },
        statics: {
            methods: {
                FormatMonth: function (monthAndYear) {
                    return System.String.format("{0}-{1}", H5.box(monthAndYear.Item1, System.Int32), H5.box(monthAndYear.Item2, System.Int32));
                }
            }
        },
        props: {
            Month: {
                get: function () {
                    return this.Moment.$clone();
                }
            }
        },
        ctors: {
            ctor: function (monthAndYear) {
                this.$initialize();
                tss.MomentPickerBase(tss.MonthPicker,System.ValueTuple$2(System.Int32,System.Int32)).ctor.call(this, "month", System.Nullable.hasValue(monthAndYear) ? tss.MonthPicker.FormatMonth(System.Nullable.getValue(monthAndYear).$clone()) : "");
            }
        },
        methods: {
            /**
             * Adds the pattern attribute to the underlying input element for graceful degradation when retrieving the user selected value on older browsers.
             *
             * @instance
             * @public
             * @this tss.MonthPicker
             * @memberof tss.MonthPicker
             * @return  {tss.MonthPicker}        The current instance of the type.
             */
            WithBrowserFallback: function () {
                this.InnerElement.pattern = "[0-9]{4}-[0-9]{2}";
                return this;
            },
            FormatMoment$1: function (monthAndYear) {
                return tss.MonthPicker.FormatMonth(monthAndYear.$clone());
            },
            FormatMoment: function (monthAndYear) {
                var monthAndYearSplit = System.String.split(monthAndYear, System.Array.init([45], System.Char).map(function (i) {{ return String.fromCharCode(i); }}), null, 1);

                if (!System.Linq.Enumerable.from(monthAndYearSplit, System.String).any() || System.Linq.Enumerable.from(monthAndYearSplit, System.String).any(function (value) { return System.String.isNullOrWhiteSpace(value); })) {
                    return new (System.ValueTuple$2(System.Int32,System.Int32)).$ctor1(System.DateTime.getYear(System.DateTime.getToday()), 1);
                }

                var year = monthAndYearSplit[System.Array.index(0, monthAndYearSplit)];
                var month = monthAndYearSplit[System.Array.index(1, monthAndYearSplit)];
                var yearParsed = { };
                var monthParsed = { };

                if (!System.Int32.tryParse(year, yearParsed) || !System.Int32.tryParse(month, monthParsed)) {
                    return new (System.ValueTuple$2(System.Int32,System.Int32)).$ctor1(System.DateTime.getYear(System.DateTime.getToday()), 1);
                }

                return new (System.ValueTuple$2(System.Int32,System.Int32)).$ctor1(yearParsed.v, monthParsed.v);
            }
        }
    });

    H5.define("tss.TimePicker", {
        inherits: function () { return [tss.MomentPickerBase(tss.TimePicker,System.DateTimeOffset)]; },
        statics: {
            methods: {
                FormatDateTime: function (time) {
                    return time.ToString$1("hh:mm:ss");
                }
            }
        },
        props: {
            Time: {
                get: function () {
                    return this.Moment.$clone();
                }
            }
        },
        ctors: {
            ctor: function (time) {
                if (time === void 0) { time = null; }

                this.$initialize();
                tss.MomentPickerBase(tss.TimePicker,System.DateTimeOffset).ctor.call(this, "time", System.Nullable.hasValue(time) ? tss.TimePicker.FormatDateTime(System.Nullable.getValue(time).$clone()) : "");
            }
        },
        methods: {
            /**
             * Adds the pattern attribute to the underlying input element for graceful degradation when retrieving the user selected value on older browsers.
             *
             * @instance
             * @public
             * @this tss.TimePicker
             * @memberof tss.TimePicker
             * @return  {tss.TimePicker}        The current instance of the type.
             */
            WithBrowserFallback: function () {
                this.InnerElement.pattern = "[0-9]{2}:[0-9]{2}";
                return this;
            },
            FormatMoment$1: function (time) {
                return tss.TimePicker.FormatDateTime(time.$clone());
            },
            FormatMoment: function (time) {
                var result = { };
                if (System.DateTime.tryParseExact(time, "hh:mm:ss", System.Globalization.DateTimeFormatInfo.invariantInfo, result)) {
                    return System.DateTimeOffset.op_Implicit(result.v);
                }

                return H5.getDefaultValue(System.DateTimeOffset);
            }
        }
    });

    H5.define("tss.WeekPicker", {
        inherits: function () { return [tss.MomentPickerBase(tss.WeekPicker,System.ValueTuple$2(System.Int32,System.Int32))]; },
        statics: {
            methods: {
                FormatWeek: function (week) {
                    return System.String.format("{0}-W{1}", H5.box(week.Item1, System.Int32), H5.box(week.Item2, System.Int32));
                }
            }
        },
        props: {
            Week: {
                get: function () {
                    return this.Moment.$clone();
                }
            }
        },
        ctors: {
            ctor: function (week) {
                this.$initialize();
                tss.MomentPickerBase(tss.WeekPicker,System.ValueTuple$2(System.Int32,System.Int32)).ctor.call(this, "week", System.Nullable.hasValue(week) ? tss.WeekPicker.FormatWeek(System.Nullable.getValue(week).$clone()) : "");
            }
        },
        methods: {
            FormatMoment$1: function (week) {
                return tss.WeekPicker.FormatWeek(week.$clone());
            },
            FormatMoment: function (week) {
                var weekSplit = System.String.split(week, System.Array.init([45], System.Char).map(function (i) {{ return String.fromCharCode(i); }}), null, 1);

                if (!System.Linq.Enumerable.from(weekSplit, System.String).any() || System.Linq.Enumerable.from(weekSplit, System.String).any(function (value) { return System.String.isNullOrWhiteSpace(value); })) {
                    return new (System.ValueTuple$2(System.Int32,System.Int32)).$ctor1(System.DateTime.getYear(System.DateTime.getToday()), 1);
                }

                var year = weekSplit[System.Array.index(0, weekSplit)];
                var weekNumber = System.String.replaceAll(weekSplit[System.Array.index(1, weekSplit)].toUpperCase(), "W", "");
                var yearParsed = { };
                var weekNumberParsed = { };

                if (!System.Int32.tryParse(year, yearParsed) || !System.Int32.tryParse(weekNumber, weekNumberParsed)) {
                    return new (System.ValueTuple$2(System.Int32,System.Int32)).$ctor1(System.DateTime.getYear(System.DateTime.getToday()), 1);
                }

                return new (System.ValueTuple$2(System.Int32,System.Int32)).$ctor1(yearParsed.v, weekNumberParsed.v);
            }
        }
    });
});
